
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003138  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  00003138  000031ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000027b4  00000000  00000000  000032d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000011f5  00000000  00000000  00005a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00006c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f1  00000000  00000000  00006e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000228e  00000000  00000000  0000700e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012ca  00000000  00000000  0000929c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010d4  00000000  00000000  0000a566  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000b63c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c9  00000000  00000000  0000b7fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ea  00000000  00000000  0000bac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c3af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e3       	ldi	r30, 0x38	; 56
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9c 14 	call	0x2938	; 0x2938 <main>
      7a:	0c 94 9a 18 	jmp	0x3134	; 0x3134 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 63 18 	jmp	0x30c6	; 0x30c6 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e7       	ldi	r26, 0x70	; 112
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 6f 18 	jmp	0x30de	; 0x30de <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 ed 04 	call	0x9da	; 0x9da <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 6f 18 	jmp	0x30de	; 0x30de <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 ed 04 	call	0x9da	; 0x9da <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 63 18 	jmp	0x30c6	; 0x30c6 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e7       	ldi	r24, 0x70	; 112
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 ed 04 	call	0x9da	; 0x9da <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__epilogue_restores__>

00000622 <__nesf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 6f 18 	jmp	0x30de	; 0x30de <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__nesf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__nesf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 3a 06 	call	0xc74	; 0xc74 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__nesf2+0x58>
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__epilogue_restores__+0x18>

00000682 <__gtsf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 6f 18 	jmp	0x30de	; 0x30de <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gtsf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gtsf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 3a 06 	call	0xc74	; 0xc74 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gtsf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__epilogue_restores__+0x18>

000006e2 <__gesf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 6f 18 	jmp	0x30de	; 0x30de <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__gesf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__gesf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 3a 06 	call	0xc74	; 0xc74 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__gesf2+0x58>
     738:	8f ef       	ldi	r24, 0xFF	; 255
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__epilogue_restores__+0x18>

00000742 <__ltsf2>:
     742:	a8 e1       	ldi	r26, 0x18	; 24
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 6f 18 	jmp	0x30de	; 0x30de <__prologue_saves__+0x18>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	2d 83       	std	Y+5, r18	; 0x05
     758:	3e 83       	std	Y+6, r19	; 0x06
     75a:	4f 83       	std	Y+7, r20	; 0x07
     75c:	58 87       	std	Y+8, r21	; 0x08
     75e:	89 e0       	ldi	r24, 0x09	; 9
     760:	e8 2e       	mov	r14, r24
     762:	f1 2c       	mov	r15, r1
     764:	ec 0e       	add	r14, r28
     766:	fd 1e       	adc	r15, r29
     768:	ce 01       	movw	r24, r28
     76a:	01 96       	adiw	r24, 0x01	; 1
     76c:	b7 01       	movw	r22, r14
     76e:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     772:	8e 01       	movw	r16, r28
     774:	0f 5e       	subi	r16, 0xEF	; 239
     776:	1f 4f       	sbci	r17, 0xFF	; 255
     778:	ce 01       	movw	r24, r28
     77a:	05 96       	adiw	r24, 0x05	; 5
     77c:	b8 01       	movw	r22, r16
     77e:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     782:	89 85       	ldd	r24, Y+9	; 0x09
     784:	82 30       	cpi	r24, 0x02	; 2
     786:	40 f0       	brcs	.+16     	; 0x798 <__ltsf2+0x56>
     788:	89 89       	ldd	r24, Y+17	; 0x11
     78a:	82 30       	cpi	r24, 0x02	; 2
     78c:	28 f0       	brcs	.+10     	; 0x798 <__ltsf2+0x56>
     78e:	c7 01       	movw	r24, r14
     790:	b8 01       	movw	r22, r16
     792:	0e 94 3a 06 	call	0xc74	; 0xc74 <__fpcmp_parts_f>
     796:	01 c0       	rjmp	.+2      	; 0x79a <__ltsf2+0x58>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	68 96       	adiw	r28, 0x18	; 24
     79c:	e6 e0       	ldi	r30, 0x06	; 6
     79e:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__epilogue_restores__+0x18>

000007a2 <__fixsfsi>:
     7a2:	ac e0       	ldi	r26, 0x0C	; 12
     7a4:	b0 e0       	ldi	r27, 0x00	; 0
     7a6:	e7 ed       	ldi	r30, 0xD7	; 215
     7a8:	f3 e0       	ldi	r31, 0x03	; 3
     7aa:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__prologue_saves__+0x20>
     7ae:	69 83       	std	Y+1, r22	; 0x01
     7b0:	7a 83       	std	Y+2, r23	; 0x02
     7b2:	8b 83       	std	Y+3, r24	; 0x03
     7b4:	9c 83       	std	Y+4, r25	; 0x04
     7b6:	ce 01       	movw	r24, r28
     7b8:	01 96       	adiw	r24, 0x01	; 1
     7ba:	be 01       	movw	r22, r28
     7bc:	6b 5f       	subi	r22, 0xFB	; 251
     7be:	7f 4f       	sbci	r23, 0xFF	; 255
     7c0:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     7c4:	8d 81       	ldd	r24, Y+5	; 0x05
     7c6:	82 30       	cpi	r24, 0x02	; 2
     7c8:	61 f1       	breq	.+88     	; 0x822 <__fixsfsi+0x80>
     7ca:	82 30       	cpi	r24, 0x02	; 2
     7cc:	50 f1       	brcs	.+84     	; 0x822 <__fixsfsi+0x80>
     7ce:	84 30       	cpi	r24, 0x04	; 4
     7d0:	21 f4       	brne	.+8      	; 0x7da <__fixsfsi+0x38>
     7d2:	8e 81       	ldd	r24, Y+6	; 0x06
     7d4:	88 23       	and	r24, r24
     7d6:	51 f1       	breq	.+84     	; 0x82c <__fixsfsi+0x8a>
     7d8:	2e c0       	rjmp	.+92     	; 0x836 <__fixsfsi+0x94>
     7da:	2f 81       	ldd	r18, Y+7	; 0x07
     7dc:	38 85       	ldd	r19, Y+8	; 0x08
     7de:	37 fd       	sbrc	r19, 7
     7e0:	20 c0       	rjmp	.+64     	; 0x822 <__fixsfsi+0x80>
     7e2:	6e 81       	ldd	r22, Y+6	; 0x06
     7e4:	2f 31       	cpi	r18, 0x1F	; 31
     7e6:	31 05       	cpc	r19, r1
     7e8:	1c f0       	brlt	.+6      	; 0x7f0 <__fixsfsi+0x4e>
     7ea:	66 23       	and	r22, r22
     7ec:	f9 f0       	breq	.+62     	; 0x82c <__fixsfsi+0x8a>
     7ee:	23 c0       	rjmp	.+70     	; 0x836 <__fixsfsi+0x94>
     7f0:	8e e1       	ldi	r24, 0x1E	; 30
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	82 1b       	sub	r24, r18
     7f6:	93 0b       	sbc	r25, r19
     7f8:	29 85       	ldd	r18, Y+9	; 0x09
     7fa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7fc:	4b 85       	ldd	r20, Y+11	; 0x0b
     7fe:	5c 85       	ldd	r21, Y+12	; 0x0c
     800:	04 c0       	rjmp	.+8      	; 0x80a <__fixsfsi+0x68>
     802:	56 95       	lsr	r21
     804:	47 95       	ror	r20
     806:	37 95       	ror	r19
     808:	27 95       	ror	r18
     80a:	8a 95       	dec	r24
     80c:	d2 f7       	brpl	.-12     	; 0x802 <__fixsfsi+0x60>
     80e:	66 23       	and	r22, r22
     810:	b1 f0       	breq	.+44     	; 0x83e <__fixsfsi+0x9c>
     812:	50 95       	com	r21
     814:	40 95       	com	r20
     816:	30 95       	com	r19
     818:	21 95       	neg	r18
     81a:	3f 4f       	sbci	r19, 0xFF	; 255
     81c:	4f 4f       	sbci	r20, 0xFF	; 255
     81e:	5f 4f       	sbci	r21, 0xFF	; 255
     820:	0e c0       	rjmp	.+28     	; 0x83e <__fixsfsi+0x9c>
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	40 e0       	ldi	r20, 0x00	; 0
     828:	50 e0       	ldi	r21, 0x00	; 0
     82a:	09 c0       	rjmp	.+18     	; 0x83e <__fixsfsi+0x9c>
     82c:	2f ef       	ldi	r18, 0xFF	; 255
     82e:	3f ef       	ldi	r19, 0xFF	; 255
     830:	4f ef       	ldi	r20, 0xFF	; 255
     832:	5f e7       	ldi	r21, 0x7F	; 127
     834:	04 c0       	rjmp	.+8      	; 0x83e <__fixsfsi+0x9c>
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	40 e0       	ldi	r20, 0x00	; 0
     83c:	50 e8       	ldi	r21, 0x80	; 128
     83e:	b9 01       	movw	r22, r18
     840:	ca 01       	movw	r24, r20
     842:	2c 96       	adiw	r28, 0x0c	; 12
     844:	e2 e0       	ldi	r30, 0x02	; 2
     846:	0c 94 8f 18 	jmp	0x311e	; 0x311e <__epilogue_restores__+0x20>

0000084a <__floatunsisf>:
     84a:	a8 e0       	ldi	r26, 0x08	; 8
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 6b 18 	jmp	0x30d6	; 0x30d6 <__prologue_saves__+0x10>
     856:	7b 01       	movw	r14, r22
     858:	8c 01       	movw	r16, r24
     85a:	61 15       	cp	r22, r1
     85c:	71 05       	cpc	r23, r1
     85e:	81 05       	cpc	r24, r1
     860:	91 05       	cpc	r25, r1
     862:	19 f4       	brne	.+6      	; 0x86a <__stack+0xb>
     864:	82 e0       	ldi	r24, 0x02	; 2
     866:	89 83       	std	Y+1, r24	; 0x01
     868:	60 c0       	rjmp	.+192    	; 0x92a <__stack+0xcb>
     86a:	83 e0       	ldi	r24, 0x03	; 3
     86c:	89 83       	std	Y+1, r24	; 0x01
     86e:	8e e1       	ldi	r24, 0x1E	; 30
     870:	c8 2e       	mov	r12, r24
     872:	d1 2c       	mov	r13, r1
     874:	dc 82       	std	Y+4, r13	; 0x04
     876:	cb 82       	std	Y+3, r12	; 0x03
     878:	ed 82       	std	Y+5, r14	; 0x05
     87a:	fe 82       	std	Y+6, r15	; 0x06
     87c:	0f 83       	std	Y+7, r16	; 0x07
     87e:	18 87       	std	Y+8, r17	; 0x08
     880:	c8 01       	movw	r24, r16
     882:	b7 01       	movw	r22, r14
     884:	0e 94 9e 04 	call	0x93c	; 0x93c <__clzsi2>
     888:	fc 01       	movw	r30, r24
     88a:	31 97       	sbiw	r30, 0x01	; 1
     88c:	f7 ff       	sbrs	r31, 7
     88e:	3b c0       	rjmp	.+118    	; 0x906 <__stack+0xa7>
     890:	22 27       	eor	r18, r18
     892:	33 27       	eor	r19, r19
     894:	2e 1b       	sub	r18, r30
     896:	3f 0b       	sbc	r19, r31
     898:	57 01       	movw	r10, r14
     89a:	68 01       	movw	r12, r16
     89c:	02 2e       	mov	r0, r18
     89e:	04 c0       	rjmp	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	d6 94       	lsr	r13
     8a2:	c7 94       	ror	r12
     8a4:	b7 94       	ror	r11
     8a6:	a7 94       	ror	r10
     8a8:	0a 94       	dec	r0
     8aa:	d2 f7       	brpl	.-12     	; 0x8a0 <__stack+0x41>
     8ac:	40 e0       	ldi	r20, 0x00	; 0
     8ae:	50 e0       	ldi	r21, 0x00	; 0
     8b0:	60 e0       	ldi	r22, 0x00	; 0
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	a0 e0       	ldi	r26, 0x00	; 0
     8ba:	b0 e0       	ldi	r27, 0x00	; 0
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	88 0f       	add	r24, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	aa 1f       	adc	r26, r26
     8c4:	bb 1f       	adc	r27, r27
     8c6:	2a 95       	dec	r18
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	01 97       	sbiw	r24, 0x01	; 1
     8cc:	a1 09       	sbc	r26, r1
     8ce:	b1 09       	sbc	r27, r1
     8d0:	8e 21       	and	r24, r14
     8d2:	9f 21       	and	r25, r15
     8d4:	a0 23       	and	r26, r16
     8d6:	b1 23       	and	r27, r17
     8d8:	00 97       	sbiw	r24, 0x00	; 0
     8da:	a1 05       	cpc	r26, r1
     8dc:	b1 05       	cpc	r27, r1
     8de:	21 f0       	breq	.+8      	; 0x8e8 <__stack+0x89>
     8e0:	41 e0       	ldi	r20, 0x01	; 1
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	4a 29       	or	r20, r10
     8ea:	5b 29       	or	r21, r11
     8ec:	6c 29       	or	r22, r12
     8ee:	7d 29       	or	r23, r13
     8f0:	4d 83       	std	Y+5, r20	; 0x05
     8f2:	5e 83       	std	Y+6, r21	; 0x06
     8f4:	6f 83       	std	Y+7, r22	; 0x07
     8f6:	78 87       	std	Y+8, r23	; 0x08
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	8e 1b       	sub	r24, r30
     8fe:	9f 0b       	sbc	r25, r31
     900:	9c 83       	std	Y+4, r25	; 0x04
     902:	8b 83       	std	Y+3, r24	; 0x03
     904:	12 c0       	rjmp	.+36     	; 0x92a <__stack+0xcb>
     906:	30 97       	sbiw	r30, 0x00	; 0
     908:	81 f0       	breq	.+32     	; 0x92a <__stack+0xcb>
     90a:	0e 2e       	mov	r0, r30
     90c:	04 c0       	rjmp	.+8      	; 0x916 <__stack+0xb7>
     90e:	ee 0c       	add	r14, r14
     910:	ff 1c       	adc	r15, r15
     912:	00 1f       	adc	r16, r16
     914:	11 1f       	adc	r17, r17
     916:	0a 94       	dec	r0
     918:	d2 f7       	brpl	.-12     	; 0x90e <__stack+0xaf>
     91a:	ed 82       	std	Y+5, r14	; 0x05
     91c:	fe 82       	std	Y+6, r15	; 0x06
     91e:	0f 83       	std	Y+7, r16	; 0x07
     920:	18 87       	std	Y+8, r17	; 0x08
     922:	ce 1a       	sub	r12, r30
     924:	df 0a       	sbc	r13, r31
     926:	dc 82       	std	Y+4, r13	; 0x04
     928:	cb 82       	std	Y+3, r12	; 0x03
     92a:	1a 82       	std	Y+2, r1	; 0x02
     92c:	ce 01       	movw	r24, r28
     92e:	01 96       	adiw	r24, 0x01	; 1
     930:	0e 94 ed 04 	call	0x9da	; 0x9da <__pack_f>
     934:	28 96       	adiw	r28, 0x08	; 8
     936:	ea e0       	ldi	r30, 0x0A	; 10
     938:	0c 94 87 18 	jmp	0x310e	; 0x310e <__epilogue_restores__+0x10>

0000093c <__clzsi2>:
     93c:	ef 92       	push	r14
     93e:	ff 92       	push	r15
     940:	0f 93       	push	r16
     942:	1f 93       	push	r17
     944:	7b 01       	movw	r14, r22
     946:	8c 01       	movw	r16, r24
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	e8 16       	cp	r14, r24
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	f8 06       	cpc	r15, r24
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	08 07       	cpc	r16, r24
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	18 07       	cpc	r17, r24
     958:	88 f4       	brcc	.+34     	; 0x97c <__clzsi2+0x40>
     95a:	8f ef       	ldi	r24, 0xFF	; 255
     95c:	e8 16       	cp	r14, r24
     95e:	f1 04       	cpc	r15, r1
     960:	01 05       	cpc	r16, r1
     962:	11 05       	cpc	r17, r1
     964:	31 f0       	breq	.+12     	; 0x972 <__clzsi2+0x36>
     966:	28 f0       	brcs	.+10     	; 0x972 <__clzsi2+0x36>
     968:	88 e0       	ldi	r24, 0x08	; 8
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	a0 e0       	ldi	r26, 0x00	; 0
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	17 c0       	rjmp	.+46     	; 0x9a0 <__clzsi2+0x64>
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	a0 e0       	ldi	r26, 0x00	; 0
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	12 c0       	rjmp	.+36     	; 0x9a0 <__clzsi2+0x64>
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	e8 16       	cp	r14, r24
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	f8 06       	cpc	r15, r24
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	08 07       	cpc	r16, r24
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	18 07       	cpc	r17, r24
     98c:	28 f0       	brcs	.+10     	; 0x998 <__clzsi2+0x5c>
     98e:	88 e1       	ldi	r24, 0x18	; 24
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	a0 e0       	ldi	r26, 0x00	; 0
     994:	b0 e0       	ldi	r27, 0x00	; 0
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__clzsi2+0x64>
     998:	80 e1       	ldi	r24, 0x10	; 16
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	a0 e0       	ldi	r26, 0x00	; 0
     99e:	b0 e0       	ldi	r27, 0x00	; 0
     9a0:	20 e2       	ldi	r18, 0x20	; 32
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	28 1b       	sub	r18, r24
     9aa:	39 0b       	sbc	r19, r25
     9ac:	4a 0b       	sbc	r20, r26
     9ae:	5b 0b       	sbc	r21, r27
     9b0:	04 c0       	rjmp	.+8      	; 0x9ba <__clzsi2+0x7e>
     9b2:	16 95       	lsr	r17
     9b4:	07 95       	ror	r16
     9b6:	f7 94       	ror	r15
     9b8:	e7 94       	ror	r14
     9ba:	8a 95       	dec	r24
     9bc:	d2 f7       	brpl	.-12     	; 0x9b2 <__clzsi2+0x76>
     9be:	f7 01       	movw	r30, r14
     9c0:	e8 58       	subi	r30, 0x88	; 136
     9c2:	ff 4f       	sbci	r31, 0xFF	; 255
     9c4:	80 81       	ld	r24, Z
     9c6:	28 1b       	sub	r18, r24
     9c8:	31 09       	sbc	r19, r1
     9ca:	41 09       	sbc	r20, r1
     9cc:	51 09       	sbc	r21, r1
     9ce:	c9 01       	movw	r24, r18
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	ff 90       	pop	r15
     9d6:	ef 90       	pop	r14
     9d8:	08 95       	ret

000009da <__pack_f>:
     9da:	df 92       	push	r13
     9dc:	ef 92       	push	r14
     9de:	ff 92       	push	r15
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	fc 01       	movw	r30, r24
     9e6:	e4 80       	ldd	r14, Z+4	; 0x04
     9e8:	f5 80       	ldd	r15, Z+5	; 0x05
     9ea:	06 81       	ldd	r16, Z+6	; 0x06
     9ec:	17 81       	ldd	r17, Z+7	; 0x07
     9ee:	d1 80       	ldd	r13, Z+1	; 0x01
     9f0:	80 81       	ld	r24, Z
     9f2:	82 30       	cpi	r24, 0x02	; 2
     9f4:	48 f4       	brcc	.+18     	; 0xa08 <__pack_f+0x2e>
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	a0 e1       	ldi	r26, 0x10	; 16
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	e8 2a       	or	r14, r24
     a00:	f9 2a       	or	r15, r25
     a02:	0a 2b       	or	r16, r26
     a04:	1b 2b       	or	r17, r27
     a06:	a5 c0       	rjmp	.+330    	; 0xb52 <__pack_f+0x178>
     a08:	84 30       	cpi	r24, 0x04	; 4
     a0a:	09 f4       	brne	.+2      	; 0xa0e <__pack_f+0x34>
     a0c:	9f c0       	rjmp	.+318    	; 0xb4c <__pack_f+0x172>
     a0e:	82 30       	cpi	r24, 0x02	; 2
     a10:	21 f4       	brne	.+8      	; 0xa1a <__pack_f+0x40>
     a12:	ee 24       	eor	r14, r14
     a14:	ff 24       	eor	r15, r15
     a16:	87 01       	movw	r16, r14
     a18:	05 c0       	rjmp	.+10     	; 0xa24 <__pack_f+0x4a>
     a1a:	e1 14       	cp	r14, r1
     a1c:	f1 04       	cpc	r15, r1
     a1e:	01 05       	cpc	r16, r1
     a20:	11 05       	cpc	r17, r1
     a22:	19 f4       	brne	.+6      	; 0xa2a <__pack_f+0x50>
     a24:	e0 e0       	ldi	r30, 0x00	; 0
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	96 c0       	rjmp	.+300    	; 0xb56 <__pack_f+0x17c>
     a2a:	62 81       	ldd	r22, Z+2	; 0x02
     a2c:	73 81       	ldd	r23, Z+3	; 0x03
     a2e:	9f ef       	ldi	r25, 0xFF	; 255
     a30:	62 38       	cpi	r22, 0x82	; 130
     a32:	79 07       	cpc	r23, r25
     a34:	0c f0       	brlt	.+2      	; 0xa38 <__pack_f+0x5e>
     a36:	5b c0       	rjmp	.+182    	; 0xaee <__pack_f+0x114>
     a38:	22 e8       	ldi	r18, 0x82	; 130
     a3a:	3f ef       	ldi	r19, 0xFF	; 255
     a3c:	26 1b       	sub	r18, r22
     a3e:	37 0b       	sbc	r19, r23
     a40:	2a 31       	cpi	r18, 0x1A	; 26
     a42:	31 05       	cpc	r19, r1
     a44:	2c f0       	brlt	.+10     	; 0xa50 <__pack_f+0x76>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	2a c0       	rjmp	.+84     	; 0xaa4 <__pack_f+0xca>
     a50:	b8 01       	movw	r22, r16
     a52:	a7 01       	movw	r20, r14
     a54:	02 2e       	mov	r0, r18
     a56:	04 c0       	rjmp	.+8      	; 0xa60 <__pack_f+0x86>
     a58:	76 95       	lsr	r23
     a5a:	67 95       	ror	r22
     a5c:	57 95       	ror	r21
     a5e:	47 95       	ror	r20
     a60:	0a 94       	dec	r0
     a62:	d2 f7       	brpl	.-12     	; 0xa58 <__pack_f+0x7e>
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	a0 e0       	ldi	r26, 0x00	; 0
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	04 c0       	rjmp	.+8      	; 0xa76 <__pack_f+0x9c>
     a6e:	88 0f       	add	r24, r24
     a70:	99 1f       	adc	r25, r25
     a72:	aa 1f       	adc	r26, r26
     a74:	bb 1f       	adc	r27, r27
     a76:	2a 95       	dec	r18
     a78:	d2 f7       	brpl	.-12     	; 0xa6e <__pack_f+0x94>
     a7a:	01 97       	sbiw	r24, 0x01	; 1
     a7c:	a1 09       	sbc	r26, r1
     a7e:	b1 09       	sbc	r27, r1
     a80:	8e 21       	and	r24, r14
     a82:	9f 21       	and	r25, r15
     a84:	a0 23       	and	r26, r16
     a86:	b1 23       	and	r27, r17
     a88:	00 97       	sbiw	r24, 0x00	; 0
     a8a:	a1 05       	cpc	r26, r1
     a8c:	b1 05       	cpc	r27, r1
     a8e:	21 f0       	breq	.+8      	; 0xa98 <__pack_f+0xbe>
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	9a 01       	movw	r18, r20
     a9a:	ab 01       	movw	r20, r22
     a9c:	28 2b       	or	r18, r24
     a9e:	39 2b       	or	r19, r25
     aa0:	4a 2b       	or	r20, r26
     aa2:	5b 2b       	or	r21, r27
     aa4:	da 01       	movw	r26, r20
     aa6:	c9 01       	movw	r24, r18
     aa8:	8f 77       	andi	r24, 0x7F	; 127
     aaa:	90 70       	andi	r25, 0x00	; 0
     aac:	a0 70       	andi	r26, 0x00	; 0
     aae:	b0 70       	andi	r27, 0x00	; 0
     ab0:	80 34       	cpi	r24, 0x40	; 64
     ab2:	91 05       	cpc	r25, r1
     ab4:	a1 05       	cpc	r26, r1
     ab6:	b1 05       	cpc	r27, r1
     ab8:	39 f4       	brne	.+14     	; 0xac8 <__pack_f+0xee>
     aba:	27 ff       	sbrs	r18, 7
     abc:	09 c0       	rjmp	.+18     	; 0xad0 <__pack_f+0xf6>
     abe:	20 5c       	subi	r18, 0xC0	; 192
     ac0:	3f 4f       	sbci	r19, 0xFF	; 255
     ac2:	4f 4f       	sbci	r20, 0xFF	; 255
     ac4:	5f 4f       	sbci	r21, 0xFF	; 255
     ac6:	04 c0       	rjmp	.+8      	; 0xad0 <__pack_f+0xf6>
     ac8:	21 5c       	subi	r18, 0xC1	; 193
     aca:	3f 4f       	sbci	r19, 0xFF	; 255
     acc:	4f 4f       	sbci	r20, 0xFF	; 255
     ace:	5f 4f       	sbci	r21, 0xFF	; 255
     ad0:	e0 e0       	ldi	r30, 0x00	; 0
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	20 30       	cpi	r18, 0x00	; 0
     ad6:	a0 e0       	ldi	r26, 0x00	; 0
     ad8:	3a 07       	cpc	r19, r26
     ada:	a0 e0       	ldi	r26, 0x00	; 0
     adc:	4a 07       	cpc	r20, r26
     ade:	a0 e4       	ldi	r26, 0x40	; 64
     ae0:	5a 07       	cpc	r21, r26
     ae2:	10 f0       	brcs	.+4      	; 0xae8 <__pack_f+0x10e>
     ae4:	e1 e0       	ldi	r30, 0x01	; 1
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	79 01       	movw	r14, r18
     aea:	8a 01       	movw	r16, r20
     aec:	27 c0       	rjmp	.+78     	; 0xb3c <__pack_f+0x162>
     aee:	60 38       	cpi	r22, 0x80	; 128
     af0:	71 05       	cpc	r23, r1
     af2:	64 f5       	brge	.+88     	; 0xb4c <__pack_f+0x172>
     af4:	fb 01       	movw	r30, r22
     af6:	e1 58       	subi	r30, 0x81	; 129
     af8:	ff 4f       	sbci	r31, 0xFF	; 255
     afa:	d8 01       	movw	r26, r16
     afc:	c7 01       	movw	r24, r14
     afe:	8f 77       	andi	r24, 0x7F	; 127
     b00:	90 70       	andi	r25, 0x00	; 0
     b02:	a0 70       	andi	r26, 0x00	; 0
     b04:	b0 70       	andi	r27, 0x00	; 0
     b06:	80 34       	cpi	r24, 0x40	; 64
     b08:	91 05       	cpc	r25, r1
     b0a:	a1 05       	cpc	r26, r1
     b0c:	b1 05       	cpc	r27, r1
     b0e:	39 f4       	brne	.+14     	; 0xb1e <__pack_f+0x144>
     b10:	e7 fe       	sbrs	r14, 7
     b12:	0d c0       	rjmp	.+26     	; 0xb2e <__pack_f+0x154>
     b14:	80 e4       	ldi	r24, 0x40	; 64
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	a0 e0       	ldi	r26, 0x00	; 0
     b1a:	b0 e0       	ldi	r27, 0x00	; 0
     b1c:	04 c0       	rjmp	.+8      	; 0xb26 <__pack_f+0x14c>
     b1e:	8f e3       	ldi	r24, 0x3F	; 63
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	b0 e0       	ldi	r27, 0x00	; 0
     b26:	e8 0e       	add	r14, r24
     b28:	f9 1e       	adc	r15, r25
     b2a:	0a 1f       	adc	r16, r26
     b2c:	1b 1f       	adc	r17, r27
     b2e:	17 ff       	sbrs	r17, 7
     b30:	05 c0       	rjmp	.+10     	; 0xb3c <__pack_f+0x162>
     b32:	16 95       	lsr	r17
     b34:	07 95       	ror	r16
     b36:	f7 94       	ror	r15
     b38:	e7 94       	ror	r14
     b3a:	31 96       	adiw	r30, 0x01	; 1
     b3c:	87 e0       	ldi	r24, 0x07	; 7
     b3e:	16 95       	lsr	r17
     b40:	07 95       	ror	r16
     b42:	f7 94       	ror	r15
     b44:	e7 94       	ror	r14
     b46:	8a 95       	dec	r24
     b48:	d1 f7       	brne	.-12     	; 0xb3e <__pack_f+0x164>
     b4a:	05 c0       	rjmp	.+10     	; 0xb56 <__pack_f+0x17c>
     b4c:	ee 24       	eor	r14, r14
     b4e:	ff 24       	eor	r15, r15
     b50:	87 01       	movw	r16, r14
     b52:	ef ef       	ldi	r30, 0xFF	; 255
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	6e 2f       	mov	r22, r30
     b58:	67 95       	ror	r22
     b5a:	66 27       	eor	r22, r22
     b5c:	67 95       	ror	r22
     b5e:	90 2f       	mov	r25, r16
     b60:	9f 77       	andi	r25, 0x7F	; 127
     b62:	d7 94       	ror	r13
     b64:	dd 24       	eor	r13, r13
     b66:	d7 94       	ror	r13
     b68:	8e 2f       	mov	r24, r30
     b6a:	86 95       	lsr	r24
     b6c:	49 2f       	mov	r20, r25
     b6e:	46 2b       	or	r20, r22
     b70:	58 2f       	mov	r21, r24
     b72:	5d 29       	or	r21, r13
     b74:	b7 01       	movw	r22, r14
     b76:	ca 01       	movw	r24, r20
     b78:	1f 91       	pop	r17
     b7a:	0f 91       	pop	r16
     b7c:	ff 90       	pop	r15
     b7e:	ef 90       	pop	r14
     b80:	df 90       	pop	r13
     b82:	08 95       	ret

00000b84 <__unpack_f>:
     b84:	fc 01       	movw	r30, r24
     b86:	db 01       	movw	r26, r22
     b88:	40 81       	ld	r20, Z
     b8a:	51 81       	ldd	r21, Z+1	; 0x01
     b8c:	22 81       	ldd	r18, Z+2	; 0x02
     b8e:	62 2f       	mov	r22, r18
     b90:	6f 77       	andi	r22, 0x7F	; 127
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	22 1f       	adc	r18, r18
     b96:	22 27       	eor	r18, r18
     b98:	22 1f       	adc	r18, r18
     b9a:	93 81       	ldd	r25, Z+3	; 0x03
     b9c:	89 2f       	mov	r24, r25
     b9e:	88 0f       	add	r24, r24
     ba0:	82 2b       	or	r24, r18
     ba2:	28 2f       	mov	r18, r24
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	99 1f       	adc	r25, r25
     ba8:	99 27       	eor	r25, r25
     baa:	99 1f       	adc	r25, r25
     bac:	11 96       	adiw	r26, 0x01	; 1
     bae:	9c 93       	st	X, r25
     bb0:	11 97       	sbiw	r26, 0x01	; 1
     bb2:	21 15       	cp	r18, r1
     bb4:	31 05       	cpc	r19, r1
     bb6:	a9 f5       	brne	.+106    	; 0xc22 <__unpack_f+0x9e>
     bb8:	41 15       	cp	r20, r1
     bba:	51 05       	cpc	r21, r1
     bbc:	61 05       	cpc	r22, r1
     bbe:	71 05       	cpc	r23, r1
     bc0:	11 f4       	brne	.+4      	; 0xbc6 <__unpack_f+0x42>
     bc2:	82 e0       	ldi	r24, 0x02	; 2
     bc4:	37 c0       	rjmp	.+110    	; 0xc34 <__unpack_f+0xb0>
     bc6:	82 e8       	ldi	r24, 0x82	; 130
     bc8:	9f ef       	ldi	r25, 0xFF	; 255
     bca:	13 96       	adiw	r26, 0x03	; 3
     bcc:	9c 93       	st	X, r25
     bce:	8e 93       	st	-X, r24
     bd0:	12 97       	sbiw	r26, 0x02	; 2
     bd2:	9a 01       	movw	r18, r20
     bd4:	ab 01       	movw	r20, r22
     bd6:	67 e0       	ldi	r22, 0x07	; 7
     bd8:	22 0f       	add	r18, r18
     bda:	33 1f       	adc	r19, r19
     bdc:	44 1f       	adc	r20, r20
     bde:	55 1f       	adc	r21, r21
     be0:	6a 95       	dec	r22
     be2:	d1 f7       	brne	.-12     	; 0xbd8 <__unpack_f+0x54>
     be4:	83 e0       	ldi	r24, 0x03	; 3
     be6:	8c 93       	st	X, r24
     be8:	0d c0       	rjmp	.+26     	; 0xc04 <__unpack_f+0x80>
     bea:	22 0f       	add	r18, r18
     bec:	33 1f       	adc	r19, r19
     bee:	44 1f       	adc	r20, r20
     bf0:	55 1f       	adc	r21, r21
     bf2:	12 96       	adiw	r26, 0x02	; 2
     bf4:	8d 91       	ld	r24, X+
     bf6:	9c 91       	ld	r25, X
     bf8:	13 97       	sbiw	r26, 0x03	; 3
     bfa:	01 97       	sbiw	r24, 0x01	; 1
     bfc:	13 96       	adiw	r26, 0x03	; 3
     bfe:	9c 93       	st	X, r25
     c00:	8e 93       	st	-X, r24
     c02:	12 97       	sbiw	r26, 0x02	; 2
     c04:	20 30       	cpi	r18, 0x00	; 0
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	38 07       	cpc	r19, r24
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	48 07       	cpc	r20, r24
     c0e:	80 e4       	ldi	r24, 0x40	; 64
     c10:	58 07       	cpc	r21, r24
     c12:	58 f3       	brcs	.-42     	; 0xbea <__unpack_f+0x66>
     c14:	14 96       	adiw	r26, 0x04	; 4
     c16:	2d 93       	st	X+, r18
     c18:	3d 93       	st	X+, r19
     c1a:	4d 93       	st	X+, r20
     c1c:	5c 93       	st	X, r21
     c1e:	17 97       	sbiw	r26, 0x07	; 7
     c20:	08 95       	ret
     c22:	2f 3f       	cpi	r18, 0xFF	; 255
     c24:	31 05       	cpc	r19, r1
     c26:	79 f4       	brne	.+30     	; 0xc46 <__unpack_f+0xc2>
     c28:	41 15       	cp	r20, r1
     c2a:	51 05       	cpc	r21, r1
     c2c:	61 05       	cpc	r22, r1
     c2e:	71 05       	cpc	r23, r1
     c30:	19 f4       	brne	.+6      	; 0xc38 <__unpack_f+0xb4>
     c32:	84 e0       	ldi	r24, 0x04	; 4
     c34:	8c 93       	st	X, r24
     c36:	08 95       	ret
     c38:	64 ff       	sbrs	r22, 4
     c3a:	03 c0       	rjmp	.+6      	; 0xc42 <__unpack_f+0xbe>
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	8c 93       	st	X, r24
     c40:	12 c0       	rjmp	.+36     	; 0xc66 <__unpack_f+0xe2>
     c42:	1c 92       	st	X, r1
     c44:	10 c0       	rjmp	.+32     	; 0xc66 <__unpack_f+0xe2>
     c46:	2f 57       	subi	r18, 0x7F	; 127
     c48:	30 40       	sbci	r19, 0x00	; 0
     c4a:	13 96       	adiw	r26, 0x03	; 3
     c4c:	3c 93       	st	X, r19
     c4e:	2e 93       	st	-X, r18
     c50:	12 97       	sbiw	r26, 0x02	; 2
     c52:	83 e0       	ldi	r24, 0x03	; 3
     c54:	8c 93       	st	X, r24
     c56:	87 e0       	ldi	r24, 0x07	; 7
     c58:	44 0f       	add	r20, r20
     c5a:	55 1f       	adc	r21, r21
     c5c:	66 1f       	adc	r22, r22
     c5e:	77 1f       	adc	r23, r23
     c60:	8a 95       	dec	r24
     c62:	d1 f7       	brne	.-12     	; 0xc58 <__unpack_f+0xd4>
     c64:	70 64       	ori	r23, 0x40	; 64
     c66:	14 96       	adiw	r26, 0x04	; 4
     c68:	4d 93       	st	X+, r20
     c6a:	5d 93       	st	X+, r21
     c6c:	6d 93       	st	X+, r22
     c6e:	7c 93       	st	X, r23
     c70:	17 97       	sbiw	r26, 0x07	; 7
     c72:	08 95       	ret

00000c74 <__fpcmp_parts_f>:
     c74:	1f 93       	push	r17
     c76:	dc 01       	movw	r26, r24
     c78:	fb 01       	movw	r30, r22
     c7a:	9c 91       	ld	r25, X
     c7c:	92 30       	cpi	r25, 0x02	; 2
     c7e:	08 f4       	brcc	.+2      	; 0xc82 <__fpcmp_parts_f+0xe>
     c80:	47 c0       	rjmp	.+142    	; 0xd10 <__fpcmp_parts_f+0x9c>
     c82:	80 81       	ld	r24, Z
     c84:	82 30       	cpi	r24, 0x02	; 2
     c86:	08 f4       	brcc	.+2      	; 0xc8a <__fpcmp_parts_f+0x16>
     c88:	43 c0       	rjmp	.+134    	; 0xd10 <__fpcmp_parts_f+0x9c>
     c8a:	94 30       	cpi	r25, 0x04	; 4
     c8c:	51 f4       	brne	.+20     	; 0xca2 <__fpcmp_parts_f+0x2e>
     c8e:	11 96       	adiw	r26, 0x01	; 1
     c90:	1c 91       	ld	r17, X
     c92:	84 30       	cpi	r24, 0x04	; 4
     c94:	99 f5       	brne	.+102    	; 0xcfc <__fpcmp_parts_f+0x88>
     c96:	81 81       	ldd	r24, Z+1	; 0x01
     c98:	68 2f       	mov	r22, r24
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	61 1b       	sub	r22, r17
     c9e:	71 09       	sbc	r23, r1
     ca0:	3f c0       	rjmp	.+126    	; 0xd20 <__fpcmp_parts_f+0xac>
     ca2:	84 30       	cpi	r24, 0x04	; 4
     ca4:	21 f0       	breq	.+8      	; 0xcae <__fpcmp_parts_f+0x3a>
     ca6:	92 30       	cpi	r25, 0x02	; 2
     ca8:	31 f4       	brne	.+12     	; 0xcb6 <__fpcmp_parts_f+0x42>
     caa:	82 30       	cpi	r24, 0x02	; 2
     cac:	b9 f1       	breq	.+110    	; 0xd1c <__fpcmp_parts_f+0xa8>
     cae:	81 81       	ldd	r24, Z+1	; 0x01
     cb0:	88 23       	and	r24, r24
     cb2:	89 f1       	breq	.+98     	; 0xd16 <__fpcmp_parts_f+0xa2>
     cb4:	2d c0       	rjmp	.+90     	; 0xd10 <__fpcmp_parts_f+0x9c>
     cb6:	11 96       	adiw	r26, 0x01	; 1
     cb8:	1c 91       	ld	r17, X
     cba:	11 97       	sbiw	r26, 0x01	; 1
     cbc:	82 30       	cpi	r24, 0x02	; 2
     cbe:	f1 f0       	breq	.+60     	; 0xcfc <__fpcmp_parts_f+0x88>
     cc0:	81 81       	ldd	r24, Z+1	; 0x01
     cc2:	18 17       	cp	r17, r24
     cc4:	d9 f4       	brne	.+54     	; 0xcfc <__fpcmp_parts_f+0x88>
     cc6:	12 96       	adiw	r26, 0x02	; 2
     cc8:	2d 91       	ld	r18, X+
     cca:	3c 91       	ld	r19, X
     ccc:	13 97       	sbiw	r26, 0x03	; 3
     cce:	82 81       	ldd	r24, Z+2	; 0x02
     cd0:	93 81       	ldd	r25, Z+3	; 0x03
     cd2:	82 17       	cp	r24, r18
     cd4:	93 07       	cpc	r25, r19
     cd6:	94 f0       	brlt	.+36     	; 0xcfc <__fpcmp_parts_f+0x88>
     cd8:	28 17       	cp	r18, r24
     cda:	39 07       	cpc	r19, r25
     cdc:	bc f0       	brlt	.+46     	; 0xd0c <__fpcmp_parts_f+0x98>
     cde:	14 96       	adiw	r26, 0x04	; 4
     ce0:	8d 91       	ld	r24, X+
     ce2:	9d 91       	ld	r25, X+
     ce4:	0d 90       	ld	r0, X+
     ce6:	bc 91       	ld	r27, X
     ce8:	a0 2d       	mov	r26, r0
     cea:	24 81       	ldd	r18, Z+4	; 0x04
     cec:	35 81       	ldd	r19, Z+5	; 0x05
     cee:	46 81       	ldd	r20, Z+6	; 0x06
     cf0:	57 81       	ldd	r21, Z+7	; 0x07
     cf2:	28 17       	cp	r18, r24
     cf4:	39 07       	cpc	r19, r25
     cf6:	4a 07       	cpc	r20, r26
     cf8:	5b 07       	cpc	r21, r27
     cfa:	18 f4       	brcc	.+6      	; 0xd02 <__fpcmp_parts_f+0x8e>
     cfc:	11 23       	and	r17, r17
     cfe:	41 f0       	breq	.+16     	; 0xd10 <__fpcmp_parts_f+0x9c>
     d00:	0a c0       	rjmp	.+20     	; 0xd16 <__fpcmp_parts_f+0xa2>
     d02:	82 17       	cp	r24, r18
     d04:	93 07       	cpc	r25, r19
     d06:	a4 07       	cpc	r26, r20
     d08:	b5 07       	cpc	r27, r21
     d0a:	40 f4       	brcc	.+16     	; 0xd1c <__fpcmp_parts_f+0xa8>
     d0c:	11 23       	and	r17, r17
     d0e:	19 f0       	breq	.+6      	; 0xd16 <__fpcmp_parts_f+0xa2>
     d10:	61 e0       	ldi	r22, 0x01	; 1
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	05 c0       	rjmp	.+10     	; 0xd20 <__fpcmp_parts_f+0xac>
     d16:	6f ef       	ldi	r22, 0xFF	; 255
     d18:	7f ef       	ldi	r23, 0xFF	; 255
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <__fpcmp_parts_f+0xac>
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	cb 01       	movw	r24, r22
     d22:	1f 91       	pop	r17
     d24:	08 95       	ret

00000d26 <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"

ES_t DIO_enuInit(void)
{
     d26:	df 93       	push	r29
     d28:	cf 93       	push	r28
     d2a:	0f 92       	push	r0
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     d30:	19 82       	std	Y+1, r1	; 0x01

	DDRA=CONC(DIO_u8PA7_DIR,DIO_u8PA6_DIR,DIO_u8PA5_DIR,DIO_u8PA4_DIR,DIO_u8PA3_DIR,DIO_u8PA2_DIR,DIO_u8PA1_DIR,DIO_u8PA0_DIR);
     d32:	ea e3       	ldi	r30, 0x3A	; 58
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	81 eb       	ldi	r24, 0xB1	; 177
     d38:	80 83       	st	Z, r24

	PORTA=CONC(DIO_u8PA7_VALUE,DIO_u8PA6_VALUE,DIO_u8PA5_VALUE,DIO_u8PA4_VALUE,DIO_u8PA3_VALUE,DIO_u8PA2_VALUE,DIO_u8PA1_VALUE,DIO_u8PA0_VALUE);
     d3a:	eb e3       	ldi	r30, 0x3B	; 59
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	86 e1       	ldi	r24, 0x16	; 22
     d40:	80 83       	st	Z, r24

	return Local_enuErrorState;
     d42:	89 81       	ldd	r24, Y+1	; 0x01
}
     d44:	0f 90       	pop	r0
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8Direction)
{
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	00 d0       	rcall	.+0      	; 0xd52 <DIO_enuSetPinDirection+0x6>
     d52:	00 d0       	rcall	.+0      	; 0xd54 <DIO_enuSetPinDirection+0x8>
     d54:	00 d0       	rcall	.+0      	; 0xd56 <DIO_enuSetPinDirection+0xa>
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	8a 83       	std	Y+2, r24	; 0x02
     d5c:	6b 83       	std	Y+3, r22	; 0x03
     d5e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     d60:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_u8GROUP_D
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	08 f0       	brcs	.+2      	; 0xd6a <DIO_enuSetPinDirection+0x1e>
     d68:	d1 c0       	rjmp	.+418    	; 0xf0c <DIO_enuSetPinDirection+0x1c0>
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	88 30       	cpi	r24, 0x08	; 8
     d6e:	08 f0       	brcs	.+2      	; 0xd72 <DIO_enuSetPinDirection+0x26>
     d70:	cd c0       	rjmp	.+410    	; 0xf0c <DIO_enuSetPinDirection+0x1c0>
     d72:	8c 81       	ldd	r24, Y+4	; 0x04
     d74:	82 30       	cpi	r24, 0x02	; 2
     d76:	08 f0       	brcs	.+2      	; 0xd7a <DIO_enuSetPinDirection+0x2e>
     d78:	c9 c0       	rjmp	.+402    	; 0xf0c <DIO_enuSetPinDirection+0x1c0>
			&& Copy_u8PinID <= DIO_u8PIN7
			&& Copy_u8Direction <= DIO_u8OUTPUT)
	{
		switch (Copy_u8PortID)
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	3e 83       	std	Y+6, r19	; 0x06
     d82:	2d 83       	std	Y+5, r18	; 0x05
     d84:	6d 81       	ldd	r22, Y+5	; 0x05
     d86:	7e 81       	ldd	r23, Y+6	; 0x06
     d88:	61 30       	cpi	r22, 0x01	; 1
     d8a:	71 05       	cpc	r23, r1
     d8c:	09 f4       	brne	.+2      	; 0xd90 <DIO_enuSetPinDirection+0x44>
     d8e:	41 c0       	rjmp	.+130    	; 0xe12 <DIO_enuSetPinDirection+0xc6>
     d90:	8d 81       	ldd	r24, Y+5	; 0x05
     d92:	9e 81       	ldd	r25, Y+6	; 0x06
     d94:	82 30       	cpi	r24, 0x02	; 2
     d96:	91 05       	cpc	r25, r1
     d98:	34 f4       	brge	.+12     	; 0xda6 <DIO_enuSetPinDirection+0x5a>
     d9a:	2d 81       	ldd	r18, Y+5	; 0x05
     d9c:	3e 81       	ldd	r19, Y+6	; 0x06
     d9e:	21 15       	cp	r18, r1
     da0:	31 05       	cpc	r19, r1
     da2:	71 f0       	breq	.+28     	; 0xdc0 <DIO_enuSetPinDirection+0x74>
     da4:	b0 c0       	rjmp	.+352    	; 0xf06 <DIO_enuSetPinDirection+0x1ba>
     da6:	6d 81       	ldd	r22, Y+5	; 0x05
     da8:	7e 81       	ldd	r23, Y+6	; 0x06
     daa:	62 30       	cpi	r22, 0x02	; 2
     dac:	71 05       	cpc	r23, r1
     dae:	09 f4       	brne	.+2      	; 0xdb2 <DIO_enuSetPinDirection+0x66>
     db0:	59 c0       	rjmp	.+178    	; 0xe64 <DIO_enuSetPinDirection+0x118>
     db2:	8d 81       	ldd	r24, Y+5	; 0x05
     db4:	9e 81       	ldd	r25, Y+6	; 0x06
     db6:	83 30       	cpi	r24, 0x03	; 3
     db8:	91 05       	cpc	r25, r1
     dba:	09 f4       	brne	.+2      	; 0xdbe <DIO_enuSetPinDirection+0x72>
     dbc:	7c c0       	rjmp	.+248    	; 0xeb6 <DIO_enuSetPinDirection+0x16a>
     dbe:	a3 c0       	rjmp	.+326    	; 0xf06 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_u8GROUP_A:

			DDRA &=~(DIO_MASK_BIT<<Copy_u8PinID);
     dc0:	aa e3       	ldi	r26, 0x3A	; 58
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	ea e3       	ldi	r30, 0x3A	; 58
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	48 2f       	mov	r20, r24
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <DIO_enuSetPinDirection+0x90>
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	2a 95       	dec	r18
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <DIO_enuSetPinDirection+0x8c>
     de0:	80 95       	com	r24
     de2:	84 23       	and	r24, r20
     de4:	8c 93       	st	X, r24
			DDRA |= (Copy_u8Direction<<Copy_u8PinID);
     de6:	aa e3       	ldi	r26, 0x3A	; 58
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	ea e3       	ldi	r30, 0x3A	; 58
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	48 2f       	mov	r20, r24
     df2:	8c 81       	ldd	r24, Y+4	; 0x04
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	88 2f       	mov	r24, r24
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	b9 01       	movw	r22, r18
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <DIO_enuSetPinDirection+0xba>
     e02:	66 0f       	add	r22, r22
     e04:	77 1f       	adc	r23, r23
     e06:	8a 95       	dec	r24
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <DIO_enuSetPinDirection+0xb6>
     e0a:	cb 01       	movw	r24, r22
     e0c:	84 2b       	or	r24, r20
     e0e:	8c 93       	st	X, r24
     e10:	7a c0       	rjmp	.+244    	; 0xf06 <DIO_enuSetPinDirection+0x1ba>

			break;
		case DIO_u8GROUP_B:

			DDRB &=~(DIO_MASK_BIT<<Copy_u8PinID);
     e12:	a7 e3       	ldi	r26, 0x37	; 55
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e7 e3       	ldi	r30, 0x37	; 55
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	48 2f       	mov	r20, r24
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <DIO_enuSetPinDirection+0xe2>
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	2a 95       	dec	r18
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <DIO_enuSetPinDirection+0xde>
     e32:	80 95       	com	r24
     e34:	84 23       	and	r24, r20
     e36:	8c 93       	st	X, r24
			DDRB |= (Copy_u8Direction<<Copy_u8PinID);
     e38:	a7 e3       	ldi	r26, 0x37	; 55
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e7 e3       	ldi	r30, 0x37	; 55
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	48 2f       	mov	r20, r24
     e44:	8c 81       	ldd	r24, Y+4	; 0x04
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	88 2f       	mov	r24, r24
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	b9 01       	movw	r22, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <DIO_enuSetPinDirection+0x10c>
     e54:	66 0f       	add	r22, r22
     e56:	77 1f       	adc	r23, r23
     e58:	8a 95       	dec	r24
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <DIO_enuSetPinDirection+0x108>
     e5c:	cb 01       	movw	r24, r22
     e5e:	84 2b       	or	r24, r20
     e60:	8c 93       	st	X, r24
     e62:	51 c0       	rjmp	.+162    	; 0xf06 <DIO_enuSetPinDirection+0x1ba>

			break;
		case DIO_u8GROUP_C:

			DDRC &=~(DIO_MASK_BIT<<Copy_u8PinID);
     e64:	a4 e3       	ldi	r26, 0x34	; 52
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e4 e3       	ldi	r30, 0x34	; 52
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <DIO_enuSetPinDirection+0x134>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	2a 95       	dec	r18
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <DIO_enuSetPinDirection+0x130>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
			DDRC |= (Copy_u8Direction<<Copy_u8PinID);
     e8a:	a4 e3       	ldi	r26, 0x34	; 52
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e4 e3       	ldi	r30, 0x34	; 52
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	48 2f       	mov	r20, r24
     e96:	8c 81       	ldd	r24, Y+4	; 0x04
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	88 2f       	mov	r24, r24
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	b9 01       	movw	r22, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <DIO_enuSetPinDirection+0x15e>
     ea6:	66 0f       	add	r22, r22
     ea8:	77 1f       	adc	r23, r23
     eaa:	8a 95       	dec	r24
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <DIO_enuSetPinDirection+0x15a>
     eae:	cb 01       	movw	r24, r22
     eb0:	84 2b       	or	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	28 c0       	rjmp	.+80     	; 0xf06 <DIO_enuSetPinDirection+0x1ba>

			break;
		case DIO_u8GROUP_D:

			DDRD &=~(DIO_MASK_BIT<<Copy_u8PinID);
     eb6:	a1 e3       	ldi	r26, 0x31	; 49
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e1 e3       	ldi	r30, 0x31	; 49
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	48 2f       	mov	r20, r24
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <DIO_enuSetPinDirection+0x186>
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	2a 95       	dec	r18
     ed4:	e2 f7       	brpl	.-8      	; 0xece <DIO_enuSetPinDirection+0x182>
     ed6:	80 95       	com	r24
     ed8:	84 23       	and	r24, r20
     eda:	8c 93       	st	X, r24
			DDRD |= (Copy_u8Direction<<Copy_u8PinID);
     edc:	a1 e3       	ldi	r26, 0x31	; 49
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e1 e3       	ldi	r30, 0x31	; 49
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	48 2f       	mov	r20, r24
     ee8:	8c 81       	ldd	r24, Y+4	; 0x04
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	88 2f       	mov	r24, r24
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	b9 01       	movw	r22, r18
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <DIO_enuSetPinDirection+0x1b0>
     ef8:	66 0f       	add	r22, r22
     efa:	77 1f       	adc	r23, r23
     efc:	8a 95       	dec	r24
     efe:	e2 f7       	brpl	.-8      	; 0xef8 <DIO_enuSetPinDirection+0x1ac>
     f00:	cb 01       	movw	r24, r22
     f02:	84 2b       	or	r24, r20
     f04:	8c 93       	st	X, r24

			break;
		}
		Local_enuErrorState = ES_OK;
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     f0c:	82 e0       	ldi	r24, 0x02	; 2
     f0e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
     f10:	89 81       	ldd	r24, Y+1	; 0x01
}
     f12:	26 96       	adiw	r28, 0x06	; 6
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	de bf       	out	0x3e, r29	; 62
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	cd bf       	out	0x3d, r28	; 61
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8Value)
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	00 d0       	rcall	.+0      	; 0xf2a <DIO_enuSetPinValue+0x6>
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <DIO_enuSetPinValue+0x8>
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <DIO_enuSetPinValue+0xa>
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	8a 83       	std	Y+2, r24	; 0x02
     f34:	6b 83       	std	Y+3, r22	; 0x03
     f36:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     f38:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_u8GROUP_D
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	84 30       	cpi	r24, 0x04	; 4
     f3e:	08 f0       	brcs	.+2      	; 0xf42 <DIO_enuSetPinValue+0x1e>
     f40:	d4 c0       	rjmp	.+424    	; 0x10ea <DIO_enuSetPinValue+0x1c6>
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	88 30       	cpi	r24, 0x08	; 8
     f46:	08 f0       	brcs	.+2      	; 0xf4a <DIO_enuSetPinValue+0x26>
     f48:	d0 c0       	rjmp	.+416    	; 0x10ea <DIO_enuSetPinValue+0x1c6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	82 30       	cpi	r24, 0x02	; 2
     f4e:	20 f0       	brcs	.+8      	; 0xf58 <DIO_enuSetPinValue+0x34>
     f50:	8c 81       	ldd	r24, Y+4	; 0x04
     f52:	82 30       	cpi	r24, 0x02	; 2
     f54:	08 f0       	brcs	.+2      	; 0xf58 <DIO_enuSetPinValue+0x34>
     f56:	c9 c0       	rjmp	.+402    	; 0x10ea <DIO_enuSetPinValue+0x1c6>
			&& Copy_u8PinID <= DIO_u8PIN7
			&& (Copy_u8Value <= DIO_u8HIGH || Copy_u8Value <= DIO_u8PULL_UP ))
	{
		switch (Copy_u8PortID)
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	3e 83       	std	Y+6, r19	; 0x06
     f60:	2d 83       	std	Y+5, r18	; 0x05
     f62:	6d 81       	ldd	r22, Y+5	; 0x05
     f64:	7e 81       	ldd	r23, Y+6	; 0x06
     f66:	61 30       	cpi	r22, 0x01	; 1
     f68:	71 05       	cpc	r23, r1
     f6a:	09 f4       	brne	.+2      	; 0xf6e <DIO_enuSetPinValue+0x4a>
     f6c:	41 c0       	rjmp	.+130    	; 0xff0 <DIO_enuSetPinValue+0xcc>
     f6e:	8d 81       	ldd	r24, Y+5	; 0x05
     f70:	9e 81       	ldd	r25, Y+6	; 0x06
     f72:	82 30       	cpi	r24, 0x02	; 2
     f74:	91 05       	cpc	r25, r1
     f76:	34 f4       	brge	.+12     	; 0xf84 <DIO_enuSetPinValue+0x60>
     f78:	2d 81       	ldd	r18, Y+5	; 0x05
     f7a:	3e 81       	ldd	r19, Y+6	; 0x06
     f7c:	21 15       	cp	r18, r1
     f7e:	31 05       	cpc	r19, r1
     f80:	71 f0       	breq	.+28     	; 0xf9e <DIO_enuSetPinValue+0x7a>
     f82:	b0 c0       	rjmp	.+352    	; 0x10e4 <DIO_enuSetPinValue+0x1c0>
     f84:	6d 81       	ldd	r22, Y+5	; 0x05
     f86:	7e 81       	ldd	r23, Y+6	; 0x06
     f88:	62 30       	cpi	r22, 0x02	; 2
     f8a:	71 05       	cpc	r23, r1
     f8c:	09 f4       	brne	.+2      	; 0xf90 <DIO_enuSetPinValue+0x6c>
     f8e:	59 c0       	rjmp	.+178    	; 0x1042 <DIO_enuSetPinValue+0x11e>
     f90:	8d 81       	ldd	r24, Y+5	; 0x05
     f92:	9e 81       	ldd	r25, Y+6	; 0x06
     f94:	83 30       	cpi	r24, 0x03	; 3
     f96:	91 05       	cpc	r25, r1
     f98:	09 f4       	brne	.+2      	; 0xf9c <DIO_enuSetPinValue+0x78>
     f9a:	7c c0       	rjmp	.+248    	; 0x1094 <DIO_enuSetPinValue+0x170>
     f9c:	a3 c0       	rjmp	.+326    	; 0x10e4 <DIO_enuSetPinValue+0x1c0>
		{
		case DIO_u8GROUP_A:

			PORTA &=~(DIO_MASK_BIT<<Copy_u8PinID);
     f9e:	ab e3       	ldi	r26, 0x3B	; 59
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	eb e3       	ldi	r30, 0x3B	; 59
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	48 2f       	mov	r20, r24
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <DIO_enuSetPinValue+0x96>
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	2a 95       	dec	r18
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <DIO_enuSetPinValue+0x92>
     fbe:	80 95       	com	r24
     fc0:	84 23       	and	r24, r20
     fc2:	8c 93       	st	X, r24
			PORTA |= (Copy_u8Value<<Copy_u8PinID);
     fc4:	ab e3       	ldi	r26, 0x3B	; 59
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	eb e3       	ldi	r30, 0x3B	; 59
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	8c 81       	ldd	r24, Y+4	; 0x04
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	88 2f       	mov	r24, r24
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	b9 01       	movw	r22, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <DIO_enuSetPinValue+0xc0>
     fe0:	66 0f       	add	r22, r22
     fe2:	77 1f       	adc	r23, r23
     fe4:	8a 95       	dec	r24
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <DIO_enuSetPinValue+0xbc>
     fe8:	cb 01       	movw	r24, r22
     fea:	84 2b       	or	r24, r20
     fec:	8c 93       	st	X, r24
     fee:	7a c0       	rjmp	.+244    	; 0x10e4 <DIO_enuSetPinValue+0x1c0>

			break;
		case DIO_u8GROUP_B:

			PORTB &=~(DIO_MASK_BIT<<Copy_u8PinID);
     ff0:	a8 e3       	ldi	r26, 0x38	; 56
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e8 e3       	ldi	r30, 0x38	; 56
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	48 2f       	mov	r20, r24
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DIO_enuSetPinValue+0xe8>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	2a 95       	dec	r18
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DIO_enuSetPinValue+0xe4>
    1010:	80 95       	com	r24
    1012:	84 23       	and	r24, r20
    1014:	8c 93       	st	X, r24
			PORTB |= (Copy_u8Value<<Copy_u8PinID);
    1016:	a8 e3       	ldi	r26, 0x38	; 56
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e8 e3       	ldi	r30, 0x38	; 56
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	48 2f       	mov	r20, r24
    1022:	8c 81       	ldd	r24, Y+4	; 0x04
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	88 2f       	mov	r24, r24
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	b9 01       	movw	r22, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <DIO_enuSetPinValue+0x112>
    1032:	66 0f       	add	r22, r22
    1034:	77 1f       	adc	r23, r23
    1036:	8a 95       	dec	r24
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <DIO_enuSetPinValue+0x10e>
    103a:	cb 01       	movw	r24, r22
    103c:	84 2b       	or	r24, r20
    103e:	8c 93       	st	X, r24
    1040:	51 c0       	rjmp	.+162    	; 0x10e4 <DIO_enuSetPinValue+0x1c0>

			break;
		case DIO_u8GROUP_C:

			PORTC &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1042:	a5 e3       	ldi	r26, 0x35	; 53
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e5 e3       	ldi	r30, 0x35	; 53
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	48 2f       	mov	r20, r24
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 c0       	rjmp	.+4      	; 0x105e <DIO_enuSetPinValue+0x13a>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	2a 95       	dec	r18
    1060:	e2 f7       	brpl	.-8      	; 0x105a <DIO_enuSetPinValue+0x136>
    1062:	80 95       	com	r24
    1064:	84 23       	and	r24, r20
    1066:	8c 93       	st	X, r24
			PORTC |= (Copy_u8Value<<Copy_u8PinID);
    1068:	a5 e3       	ldi	r26, 0x35	; 53
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e5 e3       	ldi	r30, 0x35	; 53
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	48 2f       	mov	r20, r24
    1074:	8c 81       	ldd	r24, Y+4	; 0x04
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	88 2f       	mov	r24, r24
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	b9 01       	movw	r22, r18
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <DIO_enuSetPinValue+0x164>
    1084:	66 0f       	add	r22, r22
    1086:	77 1f       	adc	r23, r23
    1088:	8a 95       	dec	r24
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <DIO_enuSetPinValue+0x160>
    108c:	cb 01       	movw	r24, r22
    108e:	84 2b       	or	r24, r20
    1090:	8c 93       	st	X, r24
    1092:	28 c0       	rjmp	.+80     	; 0x10e4 <DIO_enuSetPinValue+0x1c0>

			break;
		case DIO_u8GROUP_D:

			PORTD &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1094:	a2 e3       	ldi	r26, 0x32	; 50
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e2 e3       	ldi	r30, 0x32	; 50
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	48 2f       	mov	r20, r24
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <DIO_enuSetPinValue+0x18c>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	2a 95       	dec	r18
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <DIO_enuSetPinValue+0x188>
    10b4:	80 95       	com	r24
    10b6:	84 23       	and	r24, r20
    10b8:	8c 93       	st	X, r24
			PORTD |= (Copy_u8Value<<Copy_u8PinID);
    10ba:	a2 e3       	ldi	r26, 0x32	; 50
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e2 e3       	ldi	r30, 0x32	; 50
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	48 2f       	mov	r20, r24
    10c6:	8c 81       	ldd	r24, Y+4	; 0x04
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	88 2f       	mov	r24, r24
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	b9 01       	movw	r22, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <DIO_enuSetPinValue+0x1b6>
    10d6:	66 0f       	add	r22, r22
    10d8:	77 1f       	adc	r23, r23
    10da:	8a 95       	dec	r24
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <DIO_enuSetPinValue+0x1b2>
    10de:	cb 01       	movw	r24, r22
    10e0:	84 2b       	or	r24, r20
    10e2:	8c 93       	st	X, r24

			break;
		}
		Local_enuErrorState = ES_OK;
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	89 83       	std	Y+1, r24	; 0x01
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <DIO_enuSetPinValue+0x1ca>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    10ea:	82 e0       	ldi	r24, 0x02	; 2
    10ec:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    10f0:	26 96       	adiw	r28, 0x06	; 6
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	f8 94       	cli
    10f6:	de bf       	out	0x3e, r29	; 62
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	cd bf       	out	0x3d, r28	; 61
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID)
{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	00 d0       	rcall	.+0      	; 0x1108 <DIO_enuTogPinValue+0x6>
    1108:	00 d0       	rcall	.+0      	; 0x110a <DIO_enuTogPinValue+0x8>
    110a:	0f 92       	push	r0
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    1110:	8a 83       	std	Y+2, r24	; 0x02
    1112:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1114:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_u8GROUP_D
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	84 30       	cpi	r24, 0x04	; 4
    111a:	08 f0       	brcs	.+2      	; 0x111e <DIO_enuTogPinValue+0x1c>
    111c:	75 c0       	rjmp	.+234    	; 0x1208 <DIO_enuTogPinValue+0x106>
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	88 30       	cpi	r24, 0x08	; 8
    1122:	08 f0       	brcs	.+2      	; 0x1126 <DIO_enuTogPinValue+0x24>
    1124:	71 c0       	rjmp	.+226    	; 0x1208 <DIO_enuTogPinValue+0x106>
			&& Copy_u8PinID <= DIO_u8PIN7)
	{
		switch (Copy_u8PortID)
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	3d 83       	std	Y+5, r19	; 0x05
    112e:	2c 83       	std	Y+4, r18	; 0x04
    1130:	8c 81       	ldd	r24, Y+4	; 0x04
    1132:	9d 81       	ldd	r25, Y+5	; 0x05
    1134:	81 30       	cpi	r24, 0x01	; 1
    1136:	91 05       	cpc	r25, r1
    1138:	49 f1       	breq	.+82     	; 0x118c <DIO_enuTogPinValue+0x8a>
    113a:	2c 81       	ldd	r18, Y+4	; 0x04
    113c:	3d 81       	ldd	r19, Y+5	; 0x05
    113e:	22 30       	cpi	r18, 0x02	; 2
    1140:	31 05       	cpc	r19, r1
    1142:	2c f4       	brge	.+10     	; 0x114e <DIO_enuTogPinValue+0x4c>
    1144:	8c 81       	ldd	r24, Y+4	; 0x04
    1146:	9d 81       	ldd	r25, Y+5	; 0x05
    1148:	00 97       	sbiw	r24, 0x00	; 0
    114a:	61 f0       	breq	.+24     	; 0x1164 <DIO_enuTogPinValue+0x62>
    114c:	5a c0       	rjmp	.+180    	; 0x1202 <DIO_enuTogPinValue+0x100>
    114e:	2c 81       	ldd	r18, Y+4	; 0x04
    1150:	3d 81       	ldd	r19, Y+5	; 0x05
    1152:	22 30       	cpi	r18, 0x02	; 2
    1154:	31 05       	cpc	r19, r1
    1156:	71 f1       	breq	.+92     	; 0x11b4 <DIO_enuTogPinValue+0xb2>
    1158:	8c 81       	ldd	r24, Y+4	; 0x04
    115a:	9d 81       	ldd	r25, Y+5	; 0x05
    115c:	83 30       	cpi	r24, 0x03	; 3
    115e:	91 05       	cpc	r25, r1
    1160:	e9 f1       	breq	.+122    	; 0x11dc <DIO_enuTogPinValue+0xda>
    1162:	4f c0       	rjmp	.+158    	; 0x1202 <DIO_enuTogPinValue+0x100>
		{
		case DIO_u8GROUP_A:

			PORTA ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1164:	ab e3       	ldi	r26, 0x3B	; 59
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	eb e3       	ldi	r30, 0x3B	; 59
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	48 2f       	mov	r20, r24
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 2e       	mov	r0, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <DIO_enuTogPinValue+0x80>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <DIO_enuTogPinValue+0x7c>
    1186:	84 27       	eor	r24, r20
    1188:	8c 93       	st	X, r24
    118a:	3b c0       	rjmp	.+118    	; 0x1202 <DIO_enuTogPinValue+0x100>

			break;
		case DIO_u8GROUP_B:

			PORTB ^= (DIO_MASK_BIT<<Copy_u8PinID);
    118c:	a8 e3       	ldi	r26, 0x38	; 56
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e8 e3       	ldi	r30, 0x38	; 56
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 2e       	mov	r0, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <DIO_enuTogPinValue+0xa8>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	0a 94       	dec	r0
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <DIO_enuTogPinValue+0xa4>
    11ae:	84 27       	eor	r24, r20
    11b0:	8c 93       	st	X, r24
    11b2:	27 c0       	rjmp	.+78     	; 0x1202 <DIO_enuTogPinValue+0x100>

			break;
		case DIO_u8GROUP_C:

			PORTC ^= (DIO_MASK_BIT<<Copy_u8PinID);
    11b4:	a5 e3       	ldi	r26, 0x35	; 53
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e5 e3       	ldi	r30, 0x35	; 53
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	48 2f       	mov	r20, r24
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	02 2e       	mov	r0, r18
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <DIO_enuTogPinValue+0xd0>
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	0a 94       	dec	r0
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <DIO_enuTogPinValue+0xcc>
    11d6:	84 27       	eor	r24, r20
    11d8:	8c 93       	st	X, r24
    11da:	13 c0       	rjmp	.+38     	; 0x1202 <DIO_enuTogPinValue+0x100>

			break;
		case DIO_u8GROUP_D:

			PORTD ^= (DIO_MASK_BIT<<Copy_u8PinID);
    11dc:	a2 e3       	ldi	r26, 0x32	; 50
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e2 e3       	ldi	r30, 0x32	; 50
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	48 2f       	mov	r20, r24
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	02 2e       	mov	r0, r18
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <DIO_enuTogPinValue+0xf8>
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	0a 94       	dec	r0
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <DIO_enuTogPinValue+0xf4>
    11fe:	84 27       	eor	r24, r20
    1200:	8c 93       	st	X, r24

			break;
		}
		Local_enuErrorState = ES_OK;
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	02 c0       	rjmp	.+4      	; 0x120c <DIO_enuTogPinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1208:	82 e0       	ldi	r24, 0x02	; 2
    120a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    120c:	89 81       	ldd	r24, Y+1	; 0x01
}
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <DIO_enuGetPinValue>:
ES_t DIO_enuGetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	27 97       	sbiw	r28, 0x07	; 7
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	8a 83       	std	Y+2, r24	; 0x02
    1234:	6b 83       	std	Y+3, r22	; 0x03
    1236:	5d 83       	std	Y+5, r21	; 0x05
    1238:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    123a:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    123c:	8c 81       	ldd	r24, Y+4	; 0x04
    123e:	9d 81       	ldd	r25, Y+5	; 0x05
    1240:	00 97       	sbiw	r24, 0x00	; 0
    1242:	09 f4       	brne	.+2      	; 0x1246 <DIO_enuGetPinValue+0x28>
    1244:	7e c0       	rjmp	.+252    	; 0x1342 <DIO_enuGetPinValue+0x124>
	{
		if(Copy_u8PortID <= DIO_u8GROUP_D
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	84 30       	cpi	r24, 0x04	; 4
    124a:	08 f0       	brcs	.+2      	; 0x124e <DIO_enuGetPinValue+0x30>
    124c:	77 c0       	rjmp	.+238    	; 0x133c <DIO_enuGetPinValue+0x11e>
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	88 30       	cpi	r24, 0x08	; 8
    1252:	08 f0       	brcs	.+2      	; 0x1256 <DIO_enuGetPinValue+0x38>
    1254:	73 c0       	rjmp	.+230    	; 0x133c <DIO_enuGetPinValue+0x11e>
				&& Copy_u8PinID <= DIO_u8PIN7)
		{
			switch (Copy_u8PortID)
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	3f 83       	std	Y+7, r19	; 0x07
    125e:	2e 83       	std	Y+6, r18	; 0x06
    1260:	4e 81       	ldd	r20, Y+6	; 0x06
    1262:	5f 81       	ldd	r21, Y+7	; 0x07
    1264:	41 30       	cpi	r20, 0x01	; 1
    1266:	51 05       	cpc	r21, r1
    1268:	59 f1       	breq	.+86     	; 0x12c0 <DIO_enuGetPinValue+0xa2>
    126a:	8e 81       	ldd	r24, Y+6	; 0x06
    126c:	9f 81       	ldd	r25, Y+7	; 0x07
    126e:	82 30       	cpi	r24, 0x02	; 2
    1270:	91 05       	cpc	r25, r1
    1272:	34 f4       	brge	.+12     	; 0x1280 <DIO_enuGetPinValue+0x62>
    1274:	2e 81       	ldd	r18, Y+6	; 0x06
    1276:	3f 81       	ldd	r19, Y+7	; 0x07
    1278:	21 15       	cp	r18, r1
    127a:	31 05       	cpc	r19, r1
    127c:	69 f0       	breq	.+26     	; 0x1298 <DIO_enuGetPinValue+0x7a>
    127e:	5b c0       	rjmp	.+182    	; 0x1336 <DIO_enuGetPinValue+0x118>
    1280:	4e 81       	ldd	r20, Y+6	; 0x06
    1282:	5f 81       	ldd	r21, Y+7	; 0x07
    1284:	42 30       	cpi	r20, 0x02	; 2
    1286:	51 05       	cpc	r21, r1
    1288:	79 f1       	breq	.+94     	; 0x12e8 <DIO_enuGetPinValue+0xca>
    128a:	8e 81       	ldd	r24, Y+6	; 0x06
    128c:	9f 81       	ldd	r25, Y+7	; 0x07
    128e:	83 30       	cpi	r24, 0x03	; 3
    1290:	91 05       	cpc	r25, r1
    1292:	09 f4       	brne	.+2      	; 0x1296 <DIO_enuGetPinValue+0x78>
    1294:	3d c0       	rjmp	.+122    	; 0x1310 <DIO_enuGetPinValue+0xf2>
    1296:	4f c0       	rjmp	.+158    	; 0x1336 <DIO_enuGetPinValue+0x118>
			{
			case DIO_u8GROUP_A:

				*Copy_pu8Value = ( (PINA >> Copy_u8PinID ) & DIO_MASK_BIT);
    1298:	e9 e3       	ldi	r30, 0x39	; 57
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	88 2f       	mov	r24, r24
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	a9 01       	movw	r20, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <DIO_enuGetPinValue+0x92>
    12ac:	55 95       	asr	r21
    12ae:	47 95       	ror	r20
    12b0:	8a 95       	dec	r24
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <DIO_enuGetPinValue+0x8e>
    12b4:	ca 01       	movw	r24, r20
    12b6:	81 70       	andi	r24, 0x01	; 1
    12b8:	ec 81       	ldd	r30, Y+4	; 0x04
    12ba:	fd 81       	ldd	r31, Y+5	; 0x05
    12bc:	80 83       	st	Z, r24
    12be:	3b c0       	rjmp	.+118    	; 0x1336 <DIO_enuGetPinValue+0x118>

				break;
			case DIO_u8GROUP_B:

				*Copy_pu8Value = ( (PINB >> Copy_u8PinID ) & DIO_MASK_BIT);
    12c0:	e6 e3       	ldi	r30, 0x36	; 54
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	88 2f       	mov	r24, r24
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	a9 01       	movw	r20, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <DIO_enuGetPinValue+0xba>
    12d4:	55 95       	asr	r21
    12d6:	47 95       	ror	r20
    12d8:	8a 95       	dec	r24
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <DIO_enuGetPinValue+0xb6>
    12dc:	ca 01       	movw	r24, r20
    12de:	81 70       	andi	r24, 0x01	; 1
    12e0:	ec 81       	ldd	r30, Y+4	; 0x04
    12e2:	fd 81       	ldd	r31, Y+5	; 0x05
    12e4:	80 83       	st	Z, r24
    12e6:	27 c0       	rjmp	.+78     	; 0x1336 <DIO_enuGetPinValue+0x118>

				break;
			case DIO_u8GROUP_C:

				*Copy_pu8Value = ( (PINC >> Copy_u8PinID ) & DIO_MASK_BIT);
    12e8:	e3 e3       	ldi	r30, 0x33	; 51
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	88 2f       	mov	r24, r24
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	a9 01       	movw	r20, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <DIO_enuGetPinValue+0xe2>
    12fc:	55 95       	asr	r21
    12fe:	47 95       	ror	r20
    1300:	8a 95       	dec	r24
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <DIO_enuGetPinValue+0xde>
    1304:	ca 01       	movw	r24, r20
    1306:	81 70       	andi	r24, 0x01	; 1
    1308:	ec 81       	ldd	r30, Y+4	; 0x04
    130a:	fd 81       	ldd	r31, Y+5	; 0x05
    130c:	80 83       	st	Z, r24
    130e:	13 c0       	rjmp	.+38     	; 0x1336 <DIO_enuGetPinValue+0x118>

				break;
			case DIO_u8GROUP_D:

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);
    1310:	e0 e3       	ldi	r30, 0x30	; 48
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	88 2f       	mov	r24, r24
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	a9 01       	movw	r20, r18
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <DIO_enuGetPinValue+0x10a>
    1324:	55 95       	asr	r21
    1326:	47 95       	ror	r20
    1328:	8a 95       	dec	r24
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <DIO_enuGetPinValue+0x106>
    132c:	ca 01       	movw	r24, r20
    132e:	81 70       	andi	r24, 0x01	; 1
    1330:	ec 81       	ldd	r30, Y+4	; 0x04
    1332:	fd 81       	ldd	r31, Y+5	; 0x05
    1334:	80 83       	st	Z, r24

				break;
			}
			Local_enuErrorState = ES_OK;
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	89 83       	std	Y+1, r24	; 0x01
    133a:	05 c0       	rjmp	.+10     	; 0x1346 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    133c:	82 e0       	ldi	r24, 0x02	; 2
    133e:	89 83       	std	Y+1, r24	; 0x01
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1342:	83 e0       	ldi	r24, 0x03	; 3
    1344:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1346:	89 81       	ldd	r24, Y+1	; 0x01
}
    1348:	27 96       	adiw	r28, 0x07	; 7
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	de bf       	out	0x3e, r29	; 62
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	cd bf       	out	0x3d, r28	; 61
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <LCD_enuInit>:

#include <util/delay.h>


ES_t LCD_enuInit(void)
{
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	e9 97       	sbiw	r28, 0x39	; 57
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	de bf       	out	0x3e, r29	; 62
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_u8ErrorState = ES_NOK;
    136e:	19 ae       	std	Y+57, r1	; 0x39

	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	61 e0       	ldi	r22, 0x01	; 1
    1374:	41 e0       	ldi	r20, 0x01	; 1
    1376:	0e 94 a6 06 	call	0xd4c	; 0xd4c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	62 e0       	ldi	r22, 0x02	; 2
    137e:	41 e0       	ldi	r20, 0x01	; 1
    1380:	0e 94 a6 06 	call	0xd4c	; 0xd4c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	63 e0       	ldi	r22, 0x03	; 3
    1388:	41 e0       	ldi	r20, 0x01	; 1
    138a:	0e 94 a6 06 	call	0xd4c	; 0xd4c <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	67 e0       	ldi	r22, 0x07	; 7
    1392:	41 e0       	ldi	r20, 0x01	; 1
    1394:	0e 94 a6 06 	call	0xd4c	; 0xd4c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	66 e0       	ldi	r22, 0x06	; 6
    139c:	41 e0       	ldi	r20, 0x01	; 1
    139e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	65 e0       	ldi	r22, 0x05	; 5
    13a6:	41 e0       	ldi	r20, 0x01	; 1
    13a8:	0e 94 a6 06 	call	0xd4c	; 0xd4c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	64 e0       	ldi	r22, 0x04	; 4
    13b0:	41 e0       	ldi	r20, 0x01	; 1
    13b2:	0e 94 a6 06 	call	0xd4c	; 0xd4c <DIO_enuSetPinDirection>
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	ac e0       	ldi	r26, 0x0C	; 12
    13bc:	b2 e4       	ldi	r27, 0x42	; 66
    13be:	8d ab       	std	Y+53, r24	; 0x35
    13c0:	9e ab       	std	Y+54, r25	; 0x36
    13c2:	af ab       	std	Y+55, r26	; 0x37
    13c4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c6:	6d a9       	ldd	r22, Y+53	; 0x35
    13c8:	7e a9       	ldd	r23, Y+54	; 0x36
    13ca:	8f a9       	ldd	r24, Y+55	; 0x37
    13cc:	98 ad       	ldd	r25, Y+56	; 0x38
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	4a e7       	ldi	r20, 0x7A	; 122
    13d4:	55 e4       	ldi	r21, 0x45	; 69
    13d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	89 ab       	std	Y+49, r24	; 0x31
    13e0:	9a ab       	std	Y+50, r25	; 0x32
    13e2:	ab ab       	std	Y+51, r26	; 0x33
    13e4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13e6:	69 a9       	ldd	r22, Y+49	; 0x31
    13e8:	7a a9       	ldd	r23, Y+50	; 0x32
    13ea:	8b a9       	ldd	r24, Y+51	; 0x33
    13ec:	9c a9       	ldd	r25, Y+52	; 0x34
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	40 e8       	ldi	r20, 0x80	; 128
    13f4:	5f e3       	ldi	r21, 0x3F	; 63
    13f6:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    13fa:	88 23       	and	r24, r24
    13fc:	2c f4       	brge	.+10     	; 0x1408 <LCD_enuInit+0xae>
		__ticks = 1;
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	98 ab       	std	Y+48, r25	; 0x30
    1404:	8f a7       	std	Y+47, r24	; 0x2f
    1406:	3f c0       	rjmp	.+126    	; 0x1486 <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    1408:	69 a9       	ldd	r22, Y+49	; 0x31
    140a:	7a a9       	ldd	r23, Y+50	; 0x32
    140c:	8b a9       	ldd	r24, Y+51	; 0x33
    140e:	9c a9       	ldd	r25, Y+52	; 0x34
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	3f ef       	ldi	r19, 0xFF	; 255
    1414:	4f e7       	ldi	r20, 0x7F	; 127
    1416:	57 e4       	ldi	r21, 0x47	; 71
    1418:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    141c:	18 16       	cp	r1, r24
    141e:	4c f5       	brge	.+82     	; 0x1472 <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1420:	6d a9       	ldd	r22, Y+53	; 0x35
    1422:	7e a9       	ldd	r23, Y+54	; 0x36
    1424:	8f a9       	ldd	r24, Y+55	; 0x37
    1426:	98 ad       	ldd	r25, Y+56	; 0x38
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	40 e2       	ldi	r20, 0x20	; 32
    142e:	51 e4       	ldi	r21, 0x41	; 65
    1430:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	bc 01       	movw	r22, r24
    143a:	cd 01       	movw	r24, r26
    143c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	98 ab       	std	Y+48, r25	; 0x30
    1446:	8f a7       	std	Y+47, r24	; 0x2f
    1448:	0f c0       	rjmp	.+30     	; 0x1468 <LCD_enuInit+0x10e>
    144a:	80 e9       	ldi	r24, 0x90	; 144
    144c:	91 e0       	ldi	r25, 0x01	; 1
    144e:	9e a7       	std	Y+46, r25	; 0x2e
    1450:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1452:	8d a5       	ldd	r24, Y+45	; 0x2d
    1454:	9e a5       	ldd	r25, Y+46	; 0x2e
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	f1 f7       	brne	.-4      	; 0x1456 <LCD_enuInit+0xfc>
    145a:	9e a7       	std	Y+46, r25	; 0x2e
    145c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    145e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1460:	98 a9       	ldd	r25, Y+48	; 0x30
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	98 ab       	std	Y+48, r25	; 0x30
    1466:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1468:	8f a5       	ldd	r24, Y+47	; 0x2f
    146a:	98 a9       	ldd	r25, Y+48	; 0x30
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	69 f7       	brne	.-38     	; 0x144a <LCD_enuInit+0xf0>
    1470:	14 c0       	rjmp	.+40     	; 0x149a <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1472:	69 a9       	ldd	r22, Y+49	; 0x31
    1474:	7a a9       	ldd	r23, Y+50	; 0x32
    1476:	8b a9       	ldd	r24, Y+51	; 0x33
    1478:	9c a9       	ldd	r25, Y+52	; 0x34
    147a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	98 ab       	std	Y+48, r25	; 0x30
    1484:	8f a7       	std	Y+47, r24	; 0x2f
    1486:	8f a5       	ldd	r24, Y+47	; 0x2f
    1488:	98 a9       	ldd	r25, Y+48	; 0x30
    148a:	9c a7       	std	Y+44, r25	; 0x2c
    148c:	8b a7       	std	Y+43, r24	; 0x2b
    148e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1490:	9c a5       	ldd	r25, Y+44	; 0x2c
    1492:	01 97       	sbiw	r24, 0x01	; 1
    1494:	f1 f7       	brne	.-4      	; 0x1492 <LCD_enuInit+0x138>
    1496:	9c a7       	std	Y+44, r25	; 0x2c
    1498:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);
#if LCD_MODE == FOUR_BIT
	DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	61 e0       	ldi	r22, 0x01	; 1
    149e:	40 e0       	ldi	r20, 0x00	; 0
    14a0:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x28);
    14a4:	88 e2       	ldi	r24, 0x28	; 40
    14a6:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	a0 e8       	ldi	r26, 0x80	; 128
    14b0:	bf e3       	ldi	r27, 0x3F	; 63
    14b2:	8f a3       	std	Y+39, r24	; 0x27
    14b4:	98 a7       	std	Y+40, r25	; 0x28
    14b6:	a9 a7       	std	Y+41, r26	; 0x29
    14b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ba:	6f a1       	ldd	r22, Y+39	; 0x27
    14bc:	78 a5       	ldd	r23, Y+40	; 0x28
    14be:	89 a5       	ldd	r24, Y+41	; 0x29
    14c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	4a e7       	ldi	r20, 0x7A	; 122
    14c8:	55 e4       	ldi	r21, 0x45	; 69
    14ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	8b a3       	std	Y+35, r24	; 0x23
    14d4:	9c a3       	std	Y+36, r25	; 0x24
    14d6:	ad a3       	std	Y+37, r26	; 0x25
    14d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14da:	6b a1       	ldd	r22, Y+35	; 0x23
    14dc:	7c a1       	ldd	r23, Y+36	; 0x24
    14de:	8d a1       	ldd	r24, Y+37	; 0x25
    14e0:	9e a1       	ldd	r25, Y+38	; 0x26
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 e8       	ldi	r20, 0x80	; 128
    14e8:	5f e3       	ldi	r21, 0x3F	; 63
    14ea:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    14ee:	88 23       	and	r24, r24
    14f0:	2c f4       	brge	.+10     	; 0x14fc <LCD_enuInit+0x1a2>
		__ticks = 1;
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	9a a3       	std	Y+34, r25	; 0x22
    14f8:	89 a3       	std	Y+33, r24	; 0x21
    14fa:	3f c0       	rjmp	.+126    	; 0x157a <LCD_enuInit+0x220>
	else if (__tmp > 65535)
    14fc:	6b a1       	ldd	r22, Y+35	; 0x23
    14fe:	7c a1       	ldd	r23, Y+36	; 0x24
    1500:	8d a1       	ldd	r24, Y+37	; 0x25
    1502:	9e a1       	ldd	r25, Y+38	; 0x26
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	3f ef       	ldi	r19, 0xFF	; 255
    1508:	4f e7       	ldi	r20, 0x7F	; 127
    150a:	57 e4       	ldi	r21, 0x47	; 71
    150c:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    1510:	18 16       	cp	r1, r24
    1512:	4c f5       	brge	.+82     	; 0x1566 <LCD_enuInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1514:	6f a1       	ldd	r22, Y+39	; 0x27
    1516:	78 a5       	ldd	r23, Y+40	; 0x28
    1518:	89 a5       	ldd	r24, Y+41	; 0x29
    151a:	9a a5       	ldd	r25, Y+42	; 0x2a
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	40 e2       	ldi	r20, 0x20	; 32
    1522:	51 e4       	ldi	r21, 0x41	; 65
    1524:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	bc 01       	movw	r22, r24
    152e:	cd 01       	movw	r24, r26
    1530:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	9a a3       	std	Y+34, r25	; 0x22
    153a:	89 a3       	std	Y+33, r24	; 0x21
    153c:	0f c0       	rjmp	.+30     	; 0x155c <LCD_enuInit+0x202>
    153e:	80 e9       	ldi	r24, 0x90	; 144
    1540:	91 e0       	ldi	r25, 0x01	; 1
    1542:	98 a3       	std	Y+32, r25	; 0x20
    1544:	8f 8f       	std	Y+31, r24	; 0x1f
    1546:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1548:	98 a1       	ldd	r25, Y+32	; 0x20
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	f1 f7       	brne	.-4      	; 0x154a <LCD_enuInit+0x1f0>
    154e:	98 a3       	std	Y+32, r25	; 0x20
    1550:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1552:	89 a1       	ldd	r24, Y+33	; 0x21
    1554:	9a a1       	ldd	r25, Y+34	; 0x22
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	9a a3       	std	Y+34, r25	; 0x22
    155a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155c:	89 a1       	ldd	r24, Y+33	; 0x21
    155e:	9a a1       	ldd	r25, Y+34	; 0x22
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	69 f7       	brne	.-38     	; 0x153e <LCD_enuInit+0x1e4>
    1564:	14 c0       	rjmp	.+40     	; 0x158e <LCD_enuInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1566:	6b a1       	ldd	r22, Y+35	; 0x23
    1568:	7c a1       	ldd	r23, Y+36	; 0x24
    156a:	8d a1       	ldd	r24, Y+37	; 0x25
    156c:	9e a1       	ldd	r25, Y+38	; 0x26
    156e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	9a a3       	std	Y+34, r25	; 0x22
    1578:	89 a3       	std	Y+33, r24	; 0x21
    157a:	89 a1       	ldd	r24, Y+33	; 0x21
    157c:	9a a1       	ldd	r25, Y+34	; 0x22
    157e:	9e 8f       	std	Y+30, r25	; 0x1e
    1580:	8d 8f       	std	Y+29, r24	; 0x1d
    1582:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1584:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	f1 f7       	brne	.-4      	; 0x1586 <LCD_enuInit+0x22c>
    158a:	9e 8f       	std	Y+30, r25	; 0x1e
    158c:	8d 8f       	std	Y+29, r24	; 0x1d


#endif

	_delay_ms(1);
	DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	61 e0       	ldi	r22, 0x01	; 1
    1592:	40 e0       	ldi	r20, 0x00	; 0
    1594:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x0f);
    1598:	8f e0       	ldi	r24, 0x0F	; 15
    159a:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	a0 e8       	ldi	r26, 0x80	; 128
    15a4:	bf e3       	ldi	r27, 0x3F	; 63
    15a6:	89 8f       	std	Y+25, r24	; 0x19
    15a8:	9a 8f       	std	Y+26, r25	; 0x1a
    15aa:	ab 8f       	std	Y+27, r26	; 0x1b
    15ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ae:	69 8d       	ldd	r22, Y+25	; 0x19
    15b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	4a e7       	ldi	r20, 0x7A	; 122
    15bc:	55 e4       	ldi	r21, 0x45	; 69
    15be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15c2:	dc 01       	movw	r26, r24
    15c4:	cb 01       	movw	r24, r22
    15c6:	8d 8b       	std	Y+21, r24	; 0x15
    15c8:	9e 8b       	std	Y+22, r25	; 0x16
    15ca:	af 8b       	std	Y+23, r26	; 0x17
    15cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15ce:	6d 89       	ldd	r22, Y+21	; 0x15
    15d0:	7e 89       	ldd	r23, Y+22	; 0x16
    15d2:	8f 89       	ldd	r24, Y+23	; 0x17
    15d4:	98 8d       	ldd	r25, Y+24	; 0x18
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	40 e8       	ldi	r20, 0x80	; 128
    15dc:	5f e3       	ldi	r21, 0x3F	; 63
    15de:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    15e2:	88 23       	and	r24, r24
    15e4:	2c f4       	brge	.+10     	; 0x15f0 <LCD_enuInit+0x296>
		__ticks = 1;
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	9c 8b       	std	Y+20, r25	; 0x14
    15ec:	8b 8b       	std	Y+19, r24	; 0x13
    15ee:	3f c0       	rjmp	.+126    	; 0x166e <LCD_enuInit+0x314>
	else if (__tmp > 65535)
    15f0:	6d 89       	ldd	r22, Y+21	; 0x15
    15f2:	7e 89       	ldd	r23, Y+22	; 0x16
    15f4:	8f 89       	ldd	r24, Y+23	; 0x17
    15f6:	98 8d       	ldd	r25, Y+24	; 0x18
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	3f ef       	ldi	r19, 0xFF	; 255
    15fc:	4f e7       	ldi	r20, 0x7F	; 127
    15fe:	57 e4       	ldi	r21, 0x47	; 71
    1600:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    1604:	18 16       	cp	r1, r24
    1606:	4c f5       	brge	.+82     	; 0x165a <LCD_enuInit+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1608:	69 8d       	ldd	r22, Y+25	; 0x19
    160a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    160c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    160e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	40 e2       	ldi	r20, 0x20	; 32
    1616:	51 e4       	ldi	r21, 0x41	; 65
    1618:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	bc 01       	movw	r22, r24
    1622:	cd 01       	movw	r24, r26
    1624:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	9c 8b       	std	Y+20, r25	; 0x14
    162e:	8b 8b       	std	Y+19, r24	; 0x13
    1630:	0f c0       	rjmp	.+30     	; 0x1650 <LCD_enuInit+0x2f6>
    1632:	80 e9       	ldi	r24, 0x90	; 144
    1634:	91 e0       	ldi	r25, 0x01	; 1
    1636:	9a 8b       	std	Y+18, r25	; 0x12
    1638:	89 8b       	std	Y+17, r24	; 0x11
    163a:	89 89       	ldd	r24, Y+17	; 0x11
    163c:	9a 89       	ldd	r25, Y+18	; 0x12
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	f1 f7       	brne	.-4      	; 0x163e <LCD_enuInit+0x2e4>
    1642:	9a 8b       	std	Y+18, r25	; 0x12
    1644:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1646:	8b 89       	ldd	r24, Y+19	; 0x13
    1648:	9c 89       	ldd	r25, Y+20	; 0x14
    164a:	01 97       	sbiw	r24, 0x01	; 1
    164c:	9c 8b       	std	Y+20, r25	; 0x14
    164e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1650:	8b 89       	ldd	r24, Y+19	; 0x13
    1652:	9c 89       	ldd	r25, Y+20	; 0x14
    1654:	00 97       	sbiw	r24, 0x00	; 0
    1656:	69 f7       	brne	.-38     	; 0x1632 <LCD_enuInit+0x2d8>
    1658:	14 c0       	rjmp	.+40     	; 0x1682 <LCD_enuInit+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    165a:	6d 89       	ldd	r22, Y+21	; 0x15
    165c:	7e 89       	ldd	r23, Y+22	; 0x16
    165e:	8f 89       	ldd	r24, Y+23	; 0x17
    1660:	98 8d       	ldd	r25, Y+24	; 0x18
    1662:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1666:	dc 01       	movw	r26, r24
    1668:	cb 01       	movw	r24, r22
    166a:	9c 8b       	std	Y+20, r25	; 0x14
    166c:	8b 8b       	std	Y+19, r24	; 0x13
    166e:	8b 89       	ldd	r24, Y+19	; 0x13
    1670:	9c 89       	ldd	r25, Y+20	; 0x14
    1672:	98 8b       	std	Y+16, r25	; 0x10
    1674:	8f 87       	std	Y+15, r24	; 0x0f
    1676:	8f 85       	ldd	r24, Y+15	; 0x0f
    1678:	98 89       	ldd	r25, Y+16	; 0x10
    167a:	01 97       	sbiw	r24, 0x01	; 1
    167c:	f1 f7       	brne	.-4      	; 0x167a <LCD_enuInit+0x320>
    167e:	98 8b       	std	Y+16, r25	; 0x10
    1680:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	61 e0       	ldi	r22, 0x01	; 1
    1686:	40 e0       	ldi	r20, 0x00	; 0
    1688:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x01);
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	a0 e0       	ldi	r26, 0x00	; 0
    1698:	b0 e4       	ldi	r27, 0x40	; 64
    169a:	8b 87       	std	Y+11, r24	; 0x0b
    169c:	9c 87       	std	Y+12, r25	; 0x0c
    169e:	ad 87       	std	Y+13, r26	; 0x0d
    16a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	4a e7       	ldi	r20, 0x7A	; 122
    16b0:	55 e4       	ldi	r21, 0x45	; 69
    16b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	8f 83       	std	Y+7, r24	; 0x07
    16bc:	98 87       	std	Y+8, r25	; 0x08
    16be:	a9 87       	std	Y+9, r26	; 0x09
    16c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16c2:	6f 81       	ldd	r22, Y+7	; 0x07
    16c4:	78 85       	ldd	r23, Y+8	; 0x08
    16c6:	89 85       	ldd	r24, Y+9	; 0x09
    16c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	40 e8       	ldi	r20, 0x80	; 128
    16d0:	5f e3       	ldi	r21, 0x3F	; 63
    16d2:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    16d6:	88 23       	and	r24, r24
    16d8:	2c f4       	brge	.+10     	; 0x16e4 <LCD_enuInit+0x38a>
		__ticks = 1;
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	9e 83       	std	Y+6, r25	; 0x06
    16e0:	8d 83       	std	Y+5, r24	; 0x05
    16e2:	3f c0       	rjmp	.+126    	; 0x1762 <LCD_enuInit+0x408>
	else if (__tmp > 65535)
    16e4:	6f 81       	ldd	r22, Y+7	; 0x07
    16e6:	78 85       	ldd	r23, Y+8	; 0x08
    16e8:	89 85       	ldd	r24, Y+9	; 0x09
    16ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	3f ef       	ldi	r19, 0xFF	; 255
    16f0:	4f e7       	ldi	r20, 0x7F	; 127
    16f2:	57 e4       	ldi	r21, 0x47	; 71
    16f4:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    16f8:	18 16       	cp	r1, r24
    16fa:	4c f5       	brge	.+82     	; 0x174e <LCD_enuInit+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    16fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1700:	8d 85       	ldd	r24, Y+13	; 0x0d
    1702:	9e 85       	ldd	r25, Y+14	; 0x0e
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	40 e2       	ldi	r20, 0x20	; 32
    170a:	51 e4       	ldi	r21, 0x41	; 65
    170c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	bc 01       	movw	r22, r24
    1716:	cd 01       	movw	r24, r26
    1718:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	9e 83       	std	Y+6, r25	; 0x06
    1722:	8d 83       	std	Y+5, r24	; 0x05
    1724:	0f c0       	rjmp	.+30     	; 0x1744 <LCD_enuInit+0x3ea>
    1726:	80 e9       	ldi	r24, 0x90	; 144
    1728:	91 e0       	ldi	r25, 0x01	; 1
    172a:	9c 83       	std	Y+4, r25	; 0x04
    172c:	8b 83       	std	Y+3, r24	; 0x03
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	9c 81       	ldd	r25, Y+4	; 0x04
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	f1 f7       	brne	.-4      	; 0x1732 <LCD_enuInit+0x3d8>
    1736:	9c 83       	std	Y+4, r25	; 0x04
    1738:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    173a:	8d 81       	ldd	r24, Y+5	; 0x05
    173c:	9e 81       	ldd	r25, Y+6	; 0x06
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	9e 83       	std	Y+6, r25	; 0x06
    1742:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1744:	8d 81       	ldd	r24, Y+5	; 0x05
    1746:	9e 81       	ldd	r25, Y+6	; 0x06
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	69 f7       	brne	.-38     	; 0x1726 <LCD_enuInit+0x3cc>
    174c:	14 c0       	rjmp	.+40     	; 0x1776 <LCD_enuInit+0x41c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174e:	6f 81       	ldd	r22, Y+7	; 0x07
    1750:	78 85       	ldd	r23, Y+8	; 0x08
    1752:	89 85       	ldd	r24, Y+9	; 0x09
    1754:	9a 85       	ldd	r25, Y+10	; 0x0a
    1756:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	9e 83       	std	Y+6, r25	; 0x06
    1760:	8d 83       	std	Y+5, r24	; 0x05
    1762:	8d 81       	ldd	r24, Y+5	; 0x05
    1764:	9e 81       	ldd	r25, Y+6	; 0x06
    1766:	9a 83       	std	Y+2, r25	; 0x02
    1768:	89 83       	std	Y+1, r24	; 0x01
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	9a 81       	ldd	r25, Y+2	; 0x02
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	f1 f7       	brne	.-4      	; 0x176e <LCD_enuInit+0x414>
    1772:	9a 83       	std	Y+2, r25	; 0x02
    1774:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);
	DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	61 e0       	ldi	r22, 0x01	; 1
    177a:	40 e0       	ldi	r20, 0x00	; 0
    177c:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x06);
    1780:	86 e0       	ldi	r24, 0x06	; 6
    1782:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>

	return Local_u8ErrorState;
    1786:	89 ad       	ldd	r24, Y+57	; 0x39
}
    1788:	e9 96       	adiw	r28, 0x39	; 57
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	de bf       	out	0x3e, r29	; 62
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	cd bf       	out	0x3d, r28	; 61
    1794:	cf 91       	pop	r28
    1796:	df 91       	pop	r29
    1798:	08 95       	ret

0000179a <LCD_enuSendData>:

ES_t LCD_enuSendData(u8 Copy_u8Data)
{
    179a:	df 93       	push	r29
    179c:	cf 93       	push	r28
    179e:	00 d0       	rcall	.+0      	; 0x17a0 <LCD_enuSendData+0x6>
    17a0:	00 d0       	rcall	.+0      	; 0x17a2 <LCD_enuSendData+0x8>
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_u8ErrorState = ES_NOK;
    17a8:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u16ErrorState;
	Local_u16ErrorState = DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	61 e0       	ldi	r22, 0x01	; 1
    17ae:	41 e0       	ldi	r20, 0x01	; 1
    17b0:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
    17b4:	88 2f       	mov	r24, r24
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	9a 83       	std	Y+2, r25	; 0x02
    17ba:	89 83       	std	Y+1, r24	; 0x01
	Local_u16ErrorState = (LCD_enuWriteNLatch(Copy_u8Data)<<2);
    17bc:	8c 81       	ldd	r24, Y+4	; 0x04
    17be:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
    17c2:	88 2f       	mov	r24, r24
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	9a 83       	std	Y+2, r25	; 0x02
    17d0:	89 83       	std	Y+1, r24	; 0x01
	if (Local_u16ErrorState == 0b0101){
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	9a 81       	ldd	r25, Y+2	; 0x02
    17d6:	85 30       	cpi	r24, 0x05	; 5
    17d8:	91 05       	cpc	r25, r1
    17da:	11 f4       	brne	.+4      	; 0x17e0 <LCD_enuSendData+0x46>
		Local_u8ErrorState = ES_OK;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Local_u8ErrorState;
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	08 95       	ret

000017f0 <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    17f0:	df 93       	push	r29
    17f2:	cf 93       	push	r28
    17f4:	00 d0       	rcall	.+0      	; 0x17f6 <LCD_enuSendCommand+0x6>
    17f6:	00 d0       	rcall	.+0      	; 0x17f8 <LCD_enuSendCommand+0x8>
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
    17fc:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_u8ErrorState = ES_NOK;
    17fe:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u16ErrorState;
	Local_u16ErrorState = DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	61 e0       	ldi	r22, 0x01	; 1
    1804:	40 e0       	ldi	r20, 0x00	; 0
    1806:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
    180a:	88 2f       	mov	r24, r24
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	9a 83       	std	Y+2, r25	; 0x02
    1810:	89 83       	std	Y+1, r24	; 0x01
	Local_u16ErrorState = (LCD_enuWriteNLatch(Copy_u8Command)<<2);
    1812:	8c 81       	ldd	r24, Y+4	; 0x04
    1814:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
    1818:	88 2f       	mov	r24, r24
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	88 0f       	add	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	88 0f       	add	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	9a 83       	std	Y+2, r25	; 0x02
    1826:	89 83       	std	Y+1, r24	; 0x01
	if (Local_u16ErrorState == 0b0101){
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	9a 81       	ldd	r25, Y+2	; 0x02
    182c:	85 30       	cpi	r24, 0x05	; 5
    182e:	91 05       	cpc	r25, r1
    1830:	11 f4       	brne	.+4      	; 0x1836 <LCD_enuSendCommand+0x46>
		Local_u8ErrorState = ES_OK;
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Local_u8ErrorState;
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <LCD_enuSendString>:

ES_t LCD_enuSendString(const char * Copy_pcString)
{
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	00 d0       	rcall	.+0      	; 0x184c <LCD_enuSendString+0x6>
    184c:	0f 92       	push	r0
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
    1852:	9b 83       	std	Y+3, r25	; 0x03
    1854:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_u8ErrorState = ES_NOK;
    1856:	19 82       	std	Y+1, r1	; 0x01
    1858:	10 c0       	rjmp	.+32     	; 0x187a <LCD_enuSendString+0x34>

	while (*Copy_pcString)//'\0' ,'0'// (*Copy_pcString!='\0') or (*Copy_pcString!='\0')
	{
		DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	61 e0       	ldi	r22, 0x01	; 1
    185e:	41 e0       	ldi	r20, 0x01	; 1
    1860:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
		LCD_enuWriteNLatch(*Copy_pcString++);
    1864:	ea 81       	ldd	r30, Y+2	; 0x02
    1866:	fb 81       	ldd	r31, Y+3	; 0x03
    1868:	20 81       	ld	r18, Z
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	9b 81       	ldd	r25, Y+3	; 0x03
    186e:	01 96       	adiw	r24, 0x01	; 1
    1870:	9b 83       	std	Y+3, r25	; 0x03
    1872:	8a 83       	std	Y+2, r24	; 0x02
    1874:	82 2f       	mov	r24, r18
    1876:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>

ES_t LCD_enuSendString(const char * Copy_pcString)
{
	ES_t Local_u8ErrorState = ES_NOK;

	while (*Copy_pcString)//'\0' ,'0'// (*Copy_pcString!='\0') or (*Copy_pcString!='\0')
    187a:	ea 81       	ldd	r30, Y+2	; 0x02
    187c:	fb 81       	ldd	r31, Y+3	; 0x03
    187e:	80 81       	ld	r24, Z
    1880:	88 23       	and	r24, r24
    1882:	59 f7       	brne	.-42     	; 0x185a <LCD_enuSendString+0x14>
	{
		DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
		LCD_enuWriteNLatch(*Copy_pcString++);
	}

	return Local_u8ErrorState;
    1884:	89 81       	ldd	r24, Y+1	; 0x01
}
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	cf 91       	pop	r28
    188e:	df 91       	pop	r29
    1890:	08 95       	ret

00001892 <LCD_enuGoToPosition>:


ES_t LCD_enuGoToPosition(u8 Copy_u8Line,u8 Copy_u8Column)//16*2
{
    1892:	df 93       	push	r29
    1894:	cf 93       	push	r28
    1896:	00 d0       	rcall	.+0      	; 0x1898 <LCD_enuGoToPosition+0x6>
    1898:	00 d0       	rcall	.+0      	; 0x189a <LCD_enuGoToPosition+0x8>
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
    189e:	8b 83       	std	Y+3, r24	; 0x03
    18a0:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    18a2:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8ErrorState = 0;
    18a4:	19 82       	std	Y+1, r1	; 0x01

	Local_u8ErrorState = DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8LOW);
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	61 e0       	ldi	r22, 0x01	; 1
    18aa:	40 e0       	ldi	r20, 0x00	; 0
    18ac:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
    18b0:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8Line == 1)
    18b2:	8b 81       	ldd	r24, Y+3	; 0x03
    18b4:	81 30       	cpi	r24, 0x01	; 1
    18b6:	79 f4       	brne	.+30     	; 0x18d6 <LCD_enuGoToPosition+0x44>
	{
		Local_u8ErrorState |= LCD_enuWriteNLatch(FIRST_LINE_STARTING_ADDRESS + (Copy_u8Column - 1))<<2;
    18b8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ba:	81 58       	subi	r24, 0x81	; 129
    18bc:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
    18c0:	88 2f       	mov	r24, r24
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	98 2f       	mov	r25, r24
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	89 2b       	or	r24, r25
    18d2:	89 83       	std	Y+1, r24	; 0x01
    18d4:	14 c0       	rjmp	.+40     	; 0x18fe <LCD_enuGoToPosition+0x6c>
	}
	else if(Copy_u8Line == 2)
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	82 30       	cpi	r24, 0x02	; 2
    18da:	79 f4       	brne	.+30     	; 0x18fa <LCD_enuGoToPosition+0x68>
	{
		Local_u8ErrorState |= LCD_enuWriteNLatch(SECOND_LINE_STARTING_ADDRESS + (Copy_u8Column - 1))<<2;
    18dc:	8c 81       	ldd	r24, Y+4	; 0x04
    18de:	81 54       	subi	r24, 0x41	; 65
    18e0:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
    18e4:	88 2f       	mov	r24, r24
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	98 2f       	mov	r25, r24
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	89 2b       	or	r24, r25
    18f6:	89 83       	std	Y+1, r24	; 0x01
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <LCD_enuGoToPosition+0x6c>
	}
	else {
		Local_enuErrorState = ES_OUT_OF_RANGE;
    18fa:	82 e0       	ldi	r24, 0x02	; 2
    18fc:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(Local_u8ErrorState == 5)
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
    1900:	85 30       	cpi	r24, 0x05	; 5
    1902:	11 f4       	brne	.+4      	; 0x1908 <LCD_enuGoToPosition+0x76>
	{
		Local_enuErrorState = ES_OK;
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
}
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <LCD_enuSendExtraCharacter>:

ES_t LCD_enuSendExtraCharacter(u8 Copy_Au8Arr[],u8 Copy_u8PatternNumber,u8 Copy_u8NumberOfPatterns,u8 Copy_u8Line,u8 Copy_u8Column,u8 Copy_u8IncDec)
{
    1918:	ef 92       	push	r14
    191a:	0f 93       	push	r16
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	2b 97       	sbiw	r28, 0x0b	; 11
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	f8 94       	cli
    192a:	de bf       	out	0x3e, r29	; 62
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	cd bf       	out	0x3d, r28	; 61
    1930:	9c 83       	std	Y+4, r25	; 0x04
    1932:	8b 83       	std	Y+3, r24	; 0x03
    1934:	6d 83       	std	Y+5, r22	; 0x05
    1936:	4e 83       	std	Y+6, r20	; 0x06
    1938:	2f 83       	std	Y+7, r18	; 0x07
    193a:	08 87       	std	Y+8, r16	; 0x08
    193c:	e9 86       	std	Y+9, r14	; 0x09
	ES_t Local_enuErrorState = ES_NOK;
    193e:	1a 82       	std	Y+2, r1	; 0x02

	DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8LOW);//sending command
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	61 e0       	ldi	r22, 0x01	; 1
    1944:	40 e0       	ldi	r20, 0x00	; 0
    1946:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>

	switch(Copy_u8PatternNumber)
    194a:	8d 81       	ldd	r24, Y+5	; 0x05
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	3b 87       	std	Y+11, r19	; 0x0b
    1952:	2a 87       	std	Y+10, r18	; 0x0a
    1954:	8a 85       	ldd	r24, Y+10	; 0x0a
    1956:	9b 85       	ldd	r25, Y+11	; 0x0b
    1958:	83 30       	cpi	r24, 0x03	; 3
    195a:	91 05       	cpc	r25, r1
    195c:	a9 f1       	breq	.+106    	; 0x19c8 <LCD_enuSendExtraCharacter+0xb0>
    195e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1960:	3b 85       	ldd	r19, Y+11	; 0x0b
    1962:	24 30       	cpi	r18, 0x04	; 4
    1964:	31 05       	cpc	r19, r1
    1966:	7c f4       	brge	.+30     	; 0x1986 <LCD_enuSendExtraCharacter+0x6e>
    1968:	8a 85       	ldd	r24, Y+10	; 0x0a
    196a:	9b 85       	ldd	r25, Y+11	; 0x0b
    196c:	81 30       	cpi	r24, 0x01	; 1
    196e:	91 05       	cpc	r25, r1
    1970:	19 f1       	breq	.+70     	; 0x19b8 <LCD_enuSendExtraCharacter+0xa0>
    1972:	2a 85       	ldd	r18, Y+10	; 0x0a
    1974:	3b 85       	ldd	r19, Y+11	; 0x0b
    1976:	22 30       	cpi	r18, 0x02	; 2
    1978:	31 05       	cpc	r19, r1
    197a:	14 f5       	brge	.+68     	; 0x19c0 <LCD_enuSendExtraCharacter+0xa8>
    197c:	8a 85       	ldd	r24, Y+10	; 0x0a
    197e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1980:	00 97       	sbiw	r24, 0x00	; 0
    1982:	b1 f0       	breq	.+44     	; 0x19b0 <LCD_enuSendExtraCharacter+0x98>
    1984:	34 c0       	rjmp	.+104    	; 0x19ee <LCD_enuSendExtraCharacter+0xd6>
    1986:	2a 85       	ldd	r18, Y+10	; 0x0a
    1988:	3b 85       	ldd	r19, Y+11	; 0x0b
    198a:	25 30       	cpi	r18, 0x05	; 5
    198c:	31 05       	cpc	r19, r1
    198e:	21 f1       	breq	.+72     	; 0x19d8 <LCD_enuSendExtraCharacter+0xc0>
    1990:	8a 85       	ldd	r24, Y+10	; 0x0a
    1992:	9b 85       	ldd	r25, Y+11	; 0x0b
    1994:	85 30       	cpi	r24, 0x05	; 5
    1996:	91 05       	cpc	r25, r1
    1998:	dc f0       	brlt	.+54     	; 0x19d0 <LCD_enuSendExtraCharacter+0xb8>
    199a:	2a 85       	ldd	r18, Y+10	; 0x0a
    199c:	3b 85       	ldd	r19, Y+11	; 0x0b
    199e:	26 30       	cpi	r18, 0x06	; 6
    19a0:	31 05       	cpc	r19, r1
    19a2:	f1 f0       	breq	.+60     	; 0x19e0 <LCD_enuSendExtraCharacter+0xc8>
    19a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    19a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    19a8:	87 30       	cpi	r24, 0x07	; 7
    19aa:	91 05       	cpc	r25, r1
    19ac:	e9 f0       	breq	.+58     	; 0x19e8 <LCD_enuSendExtraCharacter+0xd0>
    19ae:	1f c0       	rjmp	.+62     	; 0x19ee <LCD_enuSendExtraCharacter+0xd6>
	{
		case 0:
			LCD_enuWriteNLatch(PATTERN_ZERO);
    19b0:	80 e4       	ldi	r24, 0x40	; 64
    19b2:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
    19b6:	1b c0       	rjmp	.+54     	; 0x19ee <LCD_enuSendExtraCharacter+0xd6>
		break;
		case 1:
			LCD_enuWriteNLatch(PATTERN_ONE);
    19b8:	88 e4       	ldi	r24, 0x48	; 72
    19ba:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
    19be:	17 c0       	rjmp	.+46     	; 0x19ee <LCD_enuSendExtraCharacter+0xd6>
		break;
		case 2:
			LCD_enuWriteNLatch(PATTERN_TWO);
    19c0:	80 e5       	ldi	r24, 0x50	; 80
    19c2:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
    19c6:	13 c0       	rjmp	.+38     	; 0x19ee <LCD_enuSendExtraCharacter+0xd6>
		break;
		case 3:
			LCD_enuWriteNLatch(PATTERN_THREE);
    19c8:	88 e5       	ldi	r24, 0x58	; 88
    19ca:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
    19ce:	0f c0       	rjmp	.+30     	; 0x19ee <LCD_enuSendExtraCharacter+0xd6>
		break;
		case 4:
			LCD_enuWriteNLatch(PATTERN_FOUR);
    19d0:	80 e6       	ldi	r24, 0x60	; 96
    19d2:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
    19d6:	0b c0       	rjmp	.+22     	; 0x19ee <LCD_enuSendExtraCharacter+0xd6>
		break;
		case 5:
			LCD_enuWriteNLatch(PATTERN_FIVE);
    19d8:	88 e6       	ldi	r24, 0x68	; 104
    19da:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
    19de:	07 c0       	rjmp	.+14     	; 0x19ee <LCD_enuSendExtraCharacter+0xd6>
		break;
		case 6:
			LCD_enuWriteNLatch(PATTERN_SIX);
    19e0:	80 e7       	ldi	r24, 0x70	; 112
    19e2:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
    19e6:	03 c0       	rjmp	.+6      	; 0x19ee <LCD_enuSendExtraCharacter+0xd6>
		break;
		case 7:
			LCD_enuWriteNLatch(PATTERN_SEVEN);
    19e8:	88 e7       	ldi	r24, 0x78	; 120
    19ea:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
		break;
	}

	/*FILL THE CGRAM WITH THE PATTERNS*/
	DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8HIGH);//sending data
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	61 e0       	ldi	r22, 0x01	; 1
    19f2:	41 e0       	ldi	r20, 0x01	; 1
    19f4:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>

	u8 Local_u8Iterator;
	for(Local_u8Iterator = 0;Local_u8Iterator<Copy_u8NumberOfPatterns*8;Local_u8Iterator++)
    19f8:	19 82       	std	Y+1, r1	; 0x01
    19fa:	0e c0       	rjmp	.+28     	; 0x1a18 <LCD_enuSendExtraCharacter+0x100>
		LCD_enuWriteNLatch(Copy_Au8Arr[Local_u8Iterator]);
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	28 2f       	mov	r18, r24
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	9c 81       	ldd	r25, Y+4	; 0x04
    1a06:	fc 01       	movw	r30, r24
    1a08:	e2 0f       	add	r30, r18
    1a0a:	f3 1f       	adc	r31, r19
    1a0c:	80 81       	ld	r24, Z
    1a0e:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>

	/*FILL THE CGRAM WITH THE PATTERNS*/
	DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8HIGH);//sending data

	u8 Local_u8Iterator;
	for(Local_u8Iterator = 0;Local_u8Iterator<Copy_u8NumberOfPatterns*8;Local_u8Iterator++)
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	8f 5f       	subi	r24, 0xFF	; 255
    1a16:	89 83       	std	Y+1, r24	; 0x01
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	28 2f       	mov	r18, r24
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a20:	88 2f       	mov	r24, r24
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	88 0f       	add	r24, r24
    1a26:	99 1f       	adc	r25, r25
    1a28:	88 0f       	add	r24, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	88 0f       	add	r24, r24
    1a2e:	99 1f       	adc	r25, r25
    1a30:	28 17       	cp	r18, r24
    1a32:	39 07       	cpc	r19, r25
    1a34:	1c f3       	brlt	.-58     	; 0x19fc <LCD_enuSendExtraCharacter+0xe4>
		LCD_enuWriteNLatch(Copy_Au8Arr[Local_u8Iterator]);

	/*INCREMENT OR DECREMENT*/
	if(Copy_u8IncDec == DECREMENT)
    1a36:	89 85       	ldd	r24, Y+9	; 0x09
    1a38:	80 35       	cpi	r24, 0x50	; 80
    1a3a:	41 f4       	brne	.+16     	; 0x1a4c <LCD_enuSendExtraCharacter+0x134>
	{
		DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8LOW);//sending command
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	61 e0       	ldi	r22, 0x01	; 1
    1a40:	40 e0       	ldi	r20, 0x00	; 0
    1a42:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
		LCD_enuWriteNLatch(ENTRY_MODE_SET_DECREMENT);
    1a46:	84 e0       	ldi	r24, 0x04	; 4
    1a48:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
	}

	/*GO TO POSITION*/
	DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8LOW);//sending command
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	61 e0       	ldi	r22, 0x01	; 1
    1a50:	40 e0       	ldi	r20, 0x00	; 0
    1a52:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
	if(Copy_u8Line == 1)
    1a56:	8f 81       	ldd	r24, Y+7	; 0x07
    1a58:	81 30       	cpi	r24, 0x01	; 1
    1a5a:	29 f4       	brne	.+10     	; 0x1a66 <LCD_enuSendExtraCharacter+0x14e>
	{
		LCD_enuWriteNLatch(FIRST_LINE_STARTING_ADDRESS + (Copy_u8Column - 1));
    1a5c:	88 85       	ldd	r24, Y+8	; 0x08
    1a5e:	81 58       	subi	r24, 0x81	; 129
    1a60:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
    1a64:	07 c0       	rjmp	.+14     	; 0x1a74 <LCD_enuSendExtraCharacter+0x15c>
	}
	else if(Copy_u8Line == 2)
    1a66:	8f 81       	ldd	r24, Y+7	; 0x07
    1a68:	82 30       	cpi	r24, 0x02	; 2
    1a6a:	21 f4       	brne	.+8      	; 0x1a74 <LCD_enuSendExtraCharacter+0x15c>
	{
		LCD_enuWriteNLatch(SECOND_LINE_STARTING_ADDRESS + (Copy_u8Column - 1));
    1a6c:	88 85       	ldd	r24, Y+8	; 0x08
    1a6e:	81 54       	subi	r24, 0x41	; 65
    1a70:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
	}

	/*DISPLAY DATA*/
	DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8HIGH);//sending data
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	61 e0       	ldi	r22, 0x01	; 1
    1a78:	41 e0       	ldi	r20, 0x01	; 1
    1a7a:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
	for(Local_u8Iterator = 0;Local_u8Iterator<Copy_u8NumberOfPatterns;Local_u8Iterator++)
    1a7e:	19 82       	std	Y+1, r1	; 0x01
    1a80:	09 c0       	rjmp	.+18     	; 0x1a94 <LCD_enuSendExtraCharacter+0x17c>
	{
		LCD_enuWriteNLatch(Copy_u8PatternNumber);
    1a82:	8d 81       	ldd	r24, Y+5	; 0x05
    1a84:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
		Copy_u8PatternNumber++;
    1a88:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8a:	8f 5f       	subi	r24, 0xFF	; 255
    1a8c:	8d 83       	std	Y+5, r24	; 0x05
		LCD_enuWriteNLatch(SECOND_LINE_STARTING_ADDRESS + (Copy_u8Column - 1));
	}

	/*DISPLAY DATA*/
	DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8HIGH);//sending data
	for(Local_u8Iterator = 0;Local_u8Iterator<Copy_u8NumberOfPatterns;Local_u8Iterator++)
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
    1a90:	8f 5f       	subi	r24, 0xFF	; 255
    1a92:	89 83       	std	Y+1, r24	; 0x01
    1a94:	99 81       	ldd	r25, Y+1	; 0x01
    1a96:	8e 81       	ldd	r24, Y+6	; 0x06
    1a98:	98 17       	cp	r25, r24
    1a9a:	98 f3       	brcs	.-26     	; 0x1a82 <LCD_enuSendExtraCharacter+0x16a>
	{
		LCD_enuWriteNLatch(Copy_u8PatternNumber);
		Copy_u8PatternNumber++;
	}

	return Local_enuErrorState;
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1a9e:	2b 96       	adiw	r28, 0x0b	; 11
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	f8 94       	cli
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	cd bf       	out	0x3d, r28	; 61
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	0f 91       	pop	r16
    1ab0:	ef 90       	pop	r14
    1ab2:	08 95       	ret

00001ab4 <LCD_enuDisplayInt>:

ES_t LCD_enuDisplayInt(s32 Copy_s32Number)
{
    1ab4:	df 93       	push	r29
    1ab6:	cf 93       	push	r28
    1ab8:	cd b7       	in	r28, 0x3d	; 61
    1aba:	de b7       	in	r29, 0x3e	; 62
    1abc:	61 97       	sbiw	r28, 0x11	; 17
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	f8 94       	cli
    1ac2:	de bf       	out	0x3e, r29	; 62
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	cd bf       	out	0x3d, r28	; 61
    1ac8:	6e 87       	std	Y+14, r22	; 0x0e
    1aca:	7f 87       	std	Y+15, r23	; 0x0f
    1acc:	88 8b       	std	Y+16, r24	; 0x10
    1ace:	99 8b       	std	Y+17, r25	; 0x11
	ES_t Local_enuErrorState = ES_NOK;
    1ad0:	1d 86       	std	Y+13, r1	; 0x0d

	DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8HIGH);//sending data
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	61 e0       	ldi	r22, 0x01	; 1
    1ad6:	41 e0       	ldi	r20, 0x01	; 1
    1ad8:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>

	if(Copy_s32Number == 0)
    1adc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ade:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ae0:	a8 89       	ldd	r26, Y+16	; 0x10
    1ae2:	b9 89       	ldd	r27, Y+17	; 0x11
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	a1 05       	cpc	r26, r1
    1ae8:	b1 05       	cpc	r27, r1
    1aea:	21 f4       	brne	.+8      	; 0x1af4 <LCD_enuDisplayInt+0x40>
		LCD_enuWriteNLatch(48);
    1aec:	80 e3       	ldi	r24, 0x30	; 48
    1aee:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
    1af2:	c8 c0       	rjmp	.+400    	; 0x1c84 <LCD_enuDisplayInt+0x1d0>
	else
	{
		if(Copy_s32Number < 0)
    1af4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1af6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1af8:	a8 89       	ldd	r26, Y+16	; 0x10
    1afa:	b9 89       	ldd	r27, Y+17	; 0x11
    1afc:	bb 23       	and	r27, r27
    1afe:	94 f4       	brge	.+36     	; 0x1b24 <LCD_enuDisplayInt+0x70>
			{
				LCD_enuWriteNLatch('-');
    1b00:	8d e2       	ldi	r24, 0x2D	; 45
    1b02:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
				Copy_s32Number *= -1;
    1b06:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b08:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b0a:	a8 89       	ldd	r26, Y+16	; 0x10
    1b0c:	b9 89       	ldd	r27, Y+17	; 0x11
    1b0e:	b0 95       	com	r27
    1b10:	a0 95       	com	r26
    1b12:	90 95       	com	r25
    1b14:	81 95       	neg	r24
    1b16:	9f 4f       	sbci	r25, 0xFF	; 255
    1b18:	af 4f       	sbci	r26, 0xFF	; 255
    1b1a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b1c:	8e 87       	std	Y+14, r24	; 0x0e
    1b1e:	9f 87       	std	Y+15, r25	; 0x0f
    1b20:	a8 8b       	std	Y+16, r26	; 0x10
    1b22:	b9 8b       	std	Y+17, r27	; 0x11
			}

			//REVERSE THE NUMBER
			s32 Local_s32Remainder = 0;
    1b24:	19 86       	std	Y+9, r1	; 0x09
    1b26:	1a 86       	std	Y+10, r1	; 0x0a
    1b28:	1b 86       	std	Y+11, r1	; 0x0b
    1b2a:	1c 86       	std	Y+12, r1	; 0x0c
			s32 Local_s32Current;
			s32 Local_s32Duplicate = Copy_s32Number;
    1b2c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b2e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b30:	a8 89       	ldd	r26, Y+16	; 0x10
    1b32:	b9 89       	ldd	r27, Y+17	; 0x11
    1b34:	89 83       	std	Y+1, r24	; 0x01
    1b36:	9a 83       	std	Y+2, r25	; 0x02
    1b38:	ab 83       	std	Y+3, r26	; 0x03
    1b3a:	bc 83       	std	Y+4, r27	; 0x04
    1b3c:	3e c0       	rjmp	.+124    	; 0x1bba <LCD_enuDisplayInt+0x106>

			while(Local_s32Duplicate != 0)
			{
				Local_s32Current = Local_s32Duplicate%10;
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	9a 81       	ldd	r25, Y+2	; 0x02
    1b42:	ab 81       	ldd	r26, Y+3	; 0x03
    1b44:	bc 81       	ldd	r27, Y+4	; 0x04
    1b46:	2a e0       	ldi	r18, 0x0A	; 10
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	40 e0       	ldi	r20, 0x00	; 0
    1b4c:	50 e0       	ldi	r21, 0x00	; 0
    1b4e:	bc 01       	movw	r22, r24
    1b50:	cd 01       	movw	r24, r26
    1b52:	0e 94 34 18 	call	0x3068	; 0x3068 <__divmodsi4>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	8d 83       	std	Y+5, r24	; 0x05
    1b5c:	9e 83       	std	Y+6, r25	; 0x06
    1b5e:	af 83       	std	Y+7, r26	; 0x07
    1b60:	b8 87       	std	Y+8, r27	; 0x08
				Local_s32Remainder = (Local_s32Remainder * 10) + Local_s32Current;
    1b62:	89 85       	ldd	r24, Y+9	; 0x09
    1b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b66:	ab 85       	ldd	r26, Y+11	; 0x0b
    1b68:	bc 85       	ldd	r27, Y+12	; 0x0c
    1b6a:	2a e0       	ldi	r18, 0x0A	; 10
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	40 e0       	ldi	r20, 0x00	; 0
    1b70:	50 e0       	ldi	r21, 0x00	; 0
    1b72:	bc 01       	movw	r22, r24
    1b74:	cd 01       	movw	r24, r26
    1b76:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__mulsi3>
    1b7a:	9b 01       	movw	r18, r22
    1b7c:	ac 01       	movw	r20, r24
    1b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b80:	9e 81       	ldd	r25, Y+6	; 0x06
    1b82:	af 81       	ldd	r26, Y+7	; 0x07
    1b84:	b8 85       	ldd	r27, Y+8	; 0x08
    1b86:	82 0f       	add	r24, r18
    1b88:	93 1f       	adc	r25, r19
    1b8a:	a4 1f       	adc	r26, r20
    1b8c:	b5 1f       	adc	r27, r21
    1b8e:	89 87       	std	Y+9, r24	; 0x09
    1b90:	9a 87       	std	Y+10, r25	; 0x0a
    1b92:	ab 87       	std	Y+11, r26	; 0x0b
    1b94:	bc 87       	std	Y+12, r27	; 0x0c
				Local_s32Duplicate /= 10;
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9a:	ab 81       	ldd	r26, Y+3	; 0x03
    1b9c:	bc 81       	ldd	r27, Y+4	; 0x04
    1b9e:	2a e0       	ldi	r18, 0x0A	; 10
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	40 e0       	ldi	r20, 0x00	; 0
    1ba4:	50 e0       	ldi	r21, 0x00	; 0
    1ba6:	bc 01       	movw	r22, r24
    1ba8:	cd 01       	movw	r24, r26
    1baa:	0e 94 34 18 	call	0x3068	; 0x3068 <__divmodsi4>
    1bae:	da 01       	movw	r26, r20
    1bb0:	c9 01       	movw	r24, r18
    1bb2:	89 83       	std	Y+1, r24	; 0x01
    1bb4:	9a 83       	std	Y+2, r25	; 0x02
    1bb6:	ab 83       	std	Y+3, r26	; 0x03
    1bb8:	bc 83       	std	Y+4, r27	; 0x04
			//REVERSE THE NUMBER
			s32 Local_s32Remainder = 0;
			s32 Local_s32Current;
			s32 Local_s32Duplicate = Copy_s32Number;

			while(Local_s32Duplicate != 0)
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bbe:	ab 81       	ldd	r26, Y+3	; 0x03
    1bc0:	bc 81       	ldd	r27, Y+4	; 0x04
    1bc2:	00 97       	sbiw	r24, 0x00	; 0
    1bc4:	a1 05       	cpc	r26, r1
    1bc6:	b1 05       	cpc	r27, r1
    1bc8:	09 f0       	breq	.+2      	; 0x1bcc <LCD_enuDisplayInt+0x118>
    1bca:	b9 cf       	rjmp	.-142    	; 0x1b3e <LCD_enuDisplayInt+0x8a>
    1bcc:	23 c0       	rjmp	.+70     	; 0x1c14 <LCD_enuDisplayInt+0x160>
				Local_s32Duplicate /= 10;
			}

			while(Local_s32Remainder != 0)
			{
				LCD_enuWriteNLatch( (Local_s32Remainder%10) + 48);
    1bce:	89 85       	ldd	r24, Y+9	; 0x09
    1bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd2:	ab 85       	ldd	r26, Y+11	; 0x0b
    1bd4:	bc 85       	ldd	r27, Y+12	; 0x0c
    1bd6:	2a e0       	ldi	r18, 0x0A	; 10
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	40 e0       	ldi	r20, 0x00	; 0
    1bdc:	50 e0       	ldi	r21, 0x00	; 0
    1bde:	bc 01       	movw	r22, r24
    1be0:	cd 01       	movw	r24, r26
    1be2:	0e 94 34 18 	call	0x3068	; 0x3068 <__divmodsi4>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	80 5d       	subi	r24, 0xD0	; 208
    1bec:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
				Local_s32Remainder /= 10;
    1bf0:	89 85       	ldd	r24, Y+9	; 0x09
    1bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf4:	ab 85       	ldd	r26, Y+11	; 0x0b
    1bf6:	bc 85       	ldd	r27, Y+12	; 0x0c
    1bf8:	2a e0       	ldi	r18, 0x0A	; 10
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e0       	ldi	r20, 0x00	; 0
    1bfe:	50 e0       	ldi	r21, 0x00	; 0
    1c00:	bc 01       	movw	r22, r24
    1c02:	cd 01       	movw	r24, r26
    1c04:	0e 94 34 18 	call	0x3068	; 0x3068 <__divmodsi4>
    1c08:	da 01       	movw	r26, r20
    1c0a:	c9 01       	movw	r24, r18
    1c0c:	89 87       	std	Y+9, r24	; 0x09
    1c0e:	9a 87       	std	Y+10, r25	; 0x0a
    1c10:	ab 87       	std	Y+11, r26	; 0x0b
    1c12:	bc 87       	std	Y+12, r27	; 0x0c
				Local_s32Current = Local_s32Duplicate%10;
				Local_s32Remainder = (Local_s32Remainder * 10) + Local_s32Current;
				Local_s32Duplicate /= 10;
			}

			while(Local_s32Remainder != 0)
    1c14:	89 85       	ldd	r24, Y+9	; 0x09
    1c16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c18:	ab 85       	ldd	r26, Y+11	; 0x0b
    1c1a:	bc 85       	ldd	r27, Y+12	; 0x0c
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	a1 05       	cpc	r26, r1
    1c20:	b1 05       	cpc	r27, r1
    1c22:	a9 f6       	brne	.-86     	; 0x1bce <LCD_enuDisplayInt+0x11a>
			}

			//SOLVING THE ZERO BUG
			while(1)
			{
				Local_s32Current = Copy_s32Number% 10;
    1c24:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c26:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c28:	a8 89       	ldd	r26, Y+16	; 0x10
    1c2a:	b9 89       	ldd	r27, Y+17	; 0x11
    1c2c:	2a e0       	ldi	r18, 0x0A	; 10
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	40 e0       	ldi	r20, 0x00	; 0
    1c32:	50 e0       	ldi	r21, 0x00	; 0
    1c34:	bc 01       	movw	r22, r24
    1c36:	cd 01       	movw	r24, r26
    1c38:	0e 94 34 18 	call	0x3068	; 0x3068 <__divmodsi4>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	8d 83       	std	Y+5, r24	; 0x05
    1c42:	9e 83       	std	Y+6, r25	; 0x06
    1c44:	af 83       	std	Y+7, r26	; 0x07
    1c46:	b8 87       	std	Y+8, r27	; 0x08
				if(Local_s32Current != 0)
    1c48:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4c:	af 81       	ldd	r26, Y+7	; 0x07
    1c4e:	b8 85       	ldd	r27, Y+8	; 0x08
    1c50:	00 97       	sbiw	r24, 0x00	; 0
    1c52:	a1 05       	cpc	r26, r1
    1c54:	b1 05       	cpc	r27, r1
    1c56:	b1 f4       	brne	.+44     	; 0x1c84 <LCD_enuDisplayInt+0x1d0>
					break;
				else
				{
					LCD_enuWriteNLatch(48);
    1c58:	80 e3       	ldi	r24, 0x30	; 48
    1c5a:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
					Copy_s32Number /= 10;
    1c5e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c60:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c62:	a8 89       	ldd	r26, Y+16	; 0x10
    1c64:	b9 89       	ldd	r27, Y+17	; 0x11
    1c66:	2a e0       	ldi	r18, 0x0A	; 10
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	40 e0       	ldi	r20, 0x00	; 0
    1c6c:	50 e0       	ldi	r21, 0x00	; 0
    1c6e:	bc 01       	movw	r22, r24
    1c70:	cd 01       	movw	r24, r26
    1c72:	0e 94 34 18 	call	0x3068	; 0x3068 <__divmodsi4>
    1c76:	da 01       	movw	r26, r20
    1c78:	c9 01       	movw	r24, r18
    1c7a:	8e 87       	std	Y+14, r24	; 0x0e
    1c7c:	9f 87       	std	Y+15, r25	; 0x0f
    1c7e:	a8 8b       	std	Y+16, r26	; 0x10
    1c80:	b9 8b       	std	Y+17, r27	; 0x11
    1c82:	d0 cf       	rjmp	.-96     	; 0x1c24 <LCD_enuDisplayInt+0x170>
				}
			}
	}

	return Local_enuErrorState;
    1c84:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    1c86:	61 96       	adiw	r28, 0x11	; 17
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	de bf       	out	0x3e, r29	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	cd bf       	out	0x3d, r28	; 61
    1c92:	cf 91       	pop	r28
    1c94:	df 91       	pop	r29
    1c96:	08 95       	ret

00001c98 <LCD_enuDisplayFloat>:

ES_t LCD_enuDisplayFloat(f32 Copy_f32Number)
{
    1c98:	df 93       	push	r29
    1c9a:	cf 93       	push	r28
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	69 97       	sbiw	r28, 0x19	; 25
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	f8 94       	cli
    1ca6:	de bf       	out	0x3e, r29	; 62
    1ca8:	0f be       	out	0x3f, r0	; 63
    1caa:	cd bf       	out	0x3d, r28	; 61
    1cac:	6e 8b       	std	Y+22, r22	; 0x16
    1cae:	7f 8b       	std	Y+23, r23	; 0x17
    1cb0:	88 8f       	std	Y+24, r24	; 0x18
    1cb2:	99 8f       	std	Y+25, r25	; 0x19
	ES_t Local_enuErrorState = ES_NOK;
    1cb4:	1d 8a       	std	Y+21, r1	; 0x15

	DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8HIGH);//sending data
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	61 e0       	ldi	r22, 0x01	; 1
    1cba:	41 e0       	ldi	r20, 0x01	; 1
    1cbc:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>

	u32 Local_u32IntVer = (u32)Copy_f32Number;
    1cc0:	6e 89       	ldd	r22, Y+22	; 0x16
    1cc2:	7f 89       	ldd	r23, Y+23	; 0x17
    1cc4:	88 8d       	ldd	r24, Y+24	; 0x18
    1cc6:	99 8d       	ldd	r25, Y+25	; 0x19
    1cc8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	89 8b       	std	Y+17, r24	; 0x11
    1cd2:	9a 8b       	std	Y+18, r25	; 0x12
    1cd4:	ab 8b       	std	Y+19, r26	; 0x13
    1cd6:	bc 8b       	std	Y+20, r27	; 0x14

	if(Local_u32IntVer == 0)
    1cd8:	89 89       	ldd	r24, Y+17	; 0x11
    1cda:	9a 89       	ldd	r25, Y+18	; 0x12
    1cdc:	ab 89       	ldd	r26, Y+19	; 0x13
    1cde:	bc 89       	ldd	r27, Y+20	; 0x14
    1ce0:	00 97       	sbiw	r24, 0x00	; 0
    1ce2:	a1 05       	cpc	r26, r1
    1ce4:	b1 05       	cpc	r27, r1
    1ce6:	09 f0       	breq	.+2      	; 0x1cea <LCD_enuDisplayFloat+0x52>
    1ce8:	54 c0       	rjmp	.+168    	; 0x1d92 <LCD_enuDisplayFloat+0xfa>
	{
		LCD_enuWriteNLatch(48);
    1cea:	80 e3       	ldi	r24, 0x30	; 48
    1cec:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
		//ADD THE FLOATING POINT
		LCD_enuWriteNLatch('.');
    1cf0:	8e e2       	ldi	r24, 0x2E	; 46
    1cf2:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
    1cf6:	3f c0       	rjmp	.+126    	; 0x1d76 <LCD_enuDisplayFloat+0xde>

		//DISPLAY NUMBERS AFTER THE FLOATING POINT
		while((u32)Copy_f32Number)
		{
			Copy_f32Number *= 10;
    1cf8:	6e 89       	ldd	r22, Y+22	; 0x16
    1cfa:	7f 89       	ldd	r23, Y+23	; 0x17
    1cfc:	88 8d       	ldd	r24, Y+24	; 0x18
    1cfe:	99 8d       	ldd	r25, Y+25	; 0x19
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	40 e2       	ldi	r20, 0x20	; 32
    1d06:	51 e4       	ldi	r21, 0x41	; 65
    1d08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	8e 8b       	std	Y+22, r24	; 0x16
    1d12:	9f 8b       	std	Y+23, r25	; 0x17
    1d14:	a8 8f       	std	Y+24, r26	; 0x18
    1d16:	b9 8f       	std	Y+25, r27	; 0x19
			LCD_enuWriteNLatch(((u32)Copy_f32Number%10) + 48);
    1d18:	6e 89       	ldd	r22, Y+22	; 0x16
    1d1a:	7f 89       	ldd	r23, Y+23	; 0x17
    1d1c:	88 8d       	ldd	r24, Y+24	; 0x18
    1d1e:	99 8d       	ldd	r25, Y+25	; 0x19
    1d20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	2a e0       	ldi	r18, 0x0A	; 10
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	40 e0       	ldi	r20, 0x00	; 0
    1d2e:	50 e0       	ldi	r21, 0x00	; 0
    1d30:	bc 01       	movw	r22, r24
    1d32:	cd 01       	movw	r24, r26
    1d34:	0e 94 12 18 	call	0x3024	; 0x3024 <__udivmodsi4>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	80 5d       	subi	r24, 0xD0	; 208
    1d3e:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
			Copy_f32Number = Copy_f32Number - (u32)Copy_f32Number;
    1d42:	6e 89       	ldd	r22, Y+22	; 0x16
    1d44:	7f 89       	ldd	r23, Y+23	; 0x17
    1d46:	88 8d       	ldd	r24, Y+24	; 0x18
    1d48:	99 8d       	ldd	r25, Y+25	; 0x19
    1d4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	bc 01       	movw	r22, r24
    1d54:	cd 01       	movw	r24, r26
    1d56:	0e 94 25 04 	call	0x84a	; 0x84a <__floatunsisf>
    1d5a:	9b 01       	movw	r18, r22
    1d5c:	ac 01       	movw	r20, r24
    1d5e:	6e 89       	ldd	r22, Y+22	; 0x16
    1d60:	7f 89       	ldd	r23, Y+23	; 0x17
    1d62:	88 8d       	ldd	r24, Y+24	; 0x18
    1d64:	99 8d       	ldd	r25, Y+25	; 0x19
    1d66:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	8e 8b       	std	Y+22, r24	; 0x16
    1d70:	9f 8b       	std	Y+23, r25	; 0x17
    1d72:	a8 8f       	std	Y+24, r26	; 0x18
    1d74:	b9 8f       	std	Y+25, r27	; 0x19
		LCD_enuWriteNLatch(48);
		//ADD THE FLOATING POINT
		LCD_enuWriteNLatch('.');

		//DISPLAY NUMBERS AFTER THE FLOATING POINT
		while((u32)Copy_f32Number)
    1d76:	6e 89       	ldd	r22, Y+22	; 0x16
    1d78:	7f 89       	ldd	r23, Y+23	; 0x17
    1d7a:	88 8d       	ldd	r24, Y+24	; 0x18
    1d7c:	99 8d       	ldd	r25, Y+25	; 0x19
    1d7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	00 97       	sbiw	r24, 0x00	; 0
    1d88:	a1 05       	cpc	r26, r1
    1d8a:	b1 05       	cpc	r27, r1
    1d8c:	09 f0       	breq	.+2      	; 0x1d90 <LCD_enuDisplayFloat+0xf8>
    1d8e:	b4 cf       	rjmp	.-152    	; 0x1cf8 <LCD_enuDisplayFloat+0x60>
    1d90:	34 c1       	rjmp	.+616    	; 0x1ffa <LCD_enuDisplayFloat+0x362>
		}
	}

	else
	{
		if(Copy_f32Number < 0)
    1d92:	6e 89       	ldd	r22, Y+22	; 0x16
    1d94:	7f 89       	ldd	r23, Y+23	; 0x17
    1d96:	88 8d       	ldd	r24, Y+24	; 0x18
    1d98:	99 8d       	ldd	r25, Y+25	; 0x19
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e0       	ldi	r20, 0x00	; 0
    1da0:	50 e0       	ldi	r21, 0x00	; 0
    1da2:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    1da6:	88 23       	and	r24, r24
    1da8:	64 f4       	brge	.+24     	; 0x1dc2 <LCD_enuDisplayFloat+0x12a>
			{
				LCD_enuWriteNLatch('-');
    1daa:	8d e2       	ldi	r24, 0x2D	; 45
    1dac:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
				Copy_f32Number *= -1;
    1db0:	8e 89       	ldd	r24, Y+22	; 0x16
    1db2:	9f 89       	ldd	r25, Y+23	; 0x17
    1db4:	a8 8d       	ldd	r26, Y+24	; 0x18
    1db6:	b9 8d       	ldd	r27, Y+25	; 0x19
    1db8:	b0 58       	subi	r27, 0x80	; 128
    1dba:	8e 8b       	std	Y+22, r24	; 0x16
    1dbc:	9f 8b       	std	Y+23, r25	; 0x17
    1dbe:	a8 8f       	std	Y+24, r26	; 0x18
    1dc0:	b9 8f       	std	Y+25, r27	; 0x19
			}

			//REVERSE THE NUMBER
			u32 Local_u32Remainder = 0;
    1dc2:	1d 86       	std	Y+13, r1	; 0x0d
    1dc4:	1e 86       	std	Y+14, r1	; 0x0e
    1dc6:	1f 86       	std	Y+15, r1	; 0x0f
    1dc8:	18 8a       	std	Y+16, r1	; 0x10
			u32 Local_u32Current;
			u32 Local_u32Duplicate = Local_u32IntVer;
    1dca:	89 89       	ldd	r24, Y+17	; 0x11
    1dcc:	9a 89       	ldd	r25, Y+18	; 0x12
    1dce:	ab 89       	ldd	r26, Y+19	; 0x13
    1dd0:	bc 89       	ldd	r27, Y+20	; 0x14
    1dd2:	8d 83       	std	Y+5, r24	; 0x05
    1dd4:	9e 83       	std	Y+6, r25	; 0x06
    1dd6:	af 83       	std	Y+7, r26	; 0x07
    1dd8:	b8 87       	std	Y+8, r27	; 0x08
    1dda:	3e c0       	rjmp	.+124    	; 0x1e58 <LCD_enuDisplayFloat+0x1c0>

			while(Local_u32Duplicate != 0)
			{
				Local_u32Current = Local_u32Duplicate%10;
    1ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dde:	9e 81       	ldd	r25, Y+6	; 0x06
    1de0:	af 81       	ldd	r26, Y+7	; 0x07
    1de2:	b8 85       	ldd	r27, Y+8	; 0x08
    1de4:	2a e0       	ldi	r18, 0x0A	; 10
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	40 e0       	ldi	r20, 0x00	; 0
    1dea:	50 e0       	ldi	r21, 0x00	; 0
    1dec:	bc 01       	movw	r22, r24
    1dee:	cd 01       	movw	r24, r26
    1df0:	0e 94 12 18 	call	0x3024	; 0x3024 <__udivmodsi4>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	89 87       	std	Y+9, r24	; 0x09
    1dfa:	9a 87       	std	Y+10, r25	; 0x0a
    1dfc:	ab 87       	std	Y+11, r26	; 0x0b
    1dfe:	bc 87       	std	Y+12, r27	; 0x0c
				Local_u32Remainder = (Local_u32Remainder * 10) + Local_u32Current;
    1e00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e04:	af 85       	ldd	r26, Y+15	; 0x0f
    1e06:	b8 89       	ldd	r27, Y+16	; 0x10
    1e08:	2a e0       	ldi	r18, 0x0A	; 10
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	40 e0       	ldi	r20, 0x00	; 0
    1e0e:	50 e0       	ldi	r21, 0x00	; 0
    1e10:	bc 01       	movw	r22, r24
    1e12:	cd 01       	movw	r24, r26
    1e14:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__mulsi3>
    1e18:	9b 01       	movw	r18, r22
    1e1a:	ac 01       	movw	r20, r24
    1e1c:	89 85       	ldd	r24, Y+9	; 0x09
    1e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e20:	ab 85       	ldd	r26, Y+11	; 0x0b
    1e22:	bc 85       	ldd	r27, Y+12	; 0x0c
    1e24:	82 0f       	add	r24, r18
    1e26:	93 1f       	adc	r25, r19
    1e28:	a4 1f       	adc	r26, r20
    1e2a:	b5 1f       	adc	r27, r21
    1e2c:	8d 87       	std	Y+13, r24	; 0x0d
    1e2e:	9e 87       	std	Y+14, r25	; 0x0e
    1e30:	af 87       	std	Y+15, r26	; 0x0f
    1e32:	b8 8b       	std	Y+16, r27	; 0x10
				Local_u32Duplicate /= 10;
    1e34:	8d 81       	ldd	r24, Y+5	; 0x05
    1e36:	9e 81       	ldd	r25, Y+6	; 0x06
    1e38:	af 81       	ldd	r26, Y+7	; 0x07
    1e3a:	b8 85       	ldd	r27, Y+8	; 0x08
    1e3c:	2a e0       	ldi	r18, 0x0A	; 10
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	40 e0       	ldi	r20, 0x00	; 0
    1e42:	50 e0       	ldi	r21, 0x00	; 0
    1e44:	bc 01       	movw	r22, r24
    1e46:	cd 01       	movw	r24, r26
    1e48:	0e 94 12 18 	call	0x3024	; 0x3024 <__udivmodsi4>
    1e4c:	da 01       	movw	r26, r20
    1e4e:	c9 01       	movw	r24, r18
    1e50:	8d 83       	std	Y+5, r24	; 0x05
    1e52:	9e 83       	std	Y+6, r25	; 0x06
    1e54:	af 83       	std	Y+7, r26	; 0x07
    1e56:	b8 87       	std	Y+8, r27	; 0x08
			//REVERSE THE NUMBER
			u32 Local_u32Remainder = 0;
			u32 Local_u32Current;
			u32 Local_u32Duplicate = Local_u32IntVer;

			while(Local_u32Duplicate != 0)
    1e58:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5c:	af 81       	ldd	r26, Y+7	; 0x07
    1e5e:	b8 85       	ldd	r27, Y+8	; 0x08
    1e60:	00 97       	sbiw	r24, 0x00	; 0
    1e62:	a1 05       	cpc	r26, r1
    1e64:	b1 05       	cpc	r27, r1
    1e66:	09 f0       	breq	.+2      	; 0x1e6a <LCD_enuDisplayFloat+0x1d2>
    1e68:	b9 cf       	rjmp	.-142    	; 0x1ddc <LCD_enuDisplayFloat+0x144>
    1e6a:	23 c0       	rjmp	.+70     	; 0x1eb2 <LCD_enuDisplayFloat+0x21a>
				Local_u32Duplicate /= 10;
			}

			while(Local_u32Remainder != 0)
			{
				LCD_enuWriteNLatch( (Local_u32Remainder%10) + 48);
    1e6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e70:	af 85       	ldd	r26, Y+15	; 0x0f
    1e72:	b8 89       	ldd	r27, Y+16	; 0x10
    1e74:	2a e0       	ldi	r18, 0x0A	; 10
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e0       	ldi	r20, 0x00	; 0
    1e7a:	50 e0       	ldi	r21, 0x00	; 0
    1e7c:	bc 01       	movw	r22, r24
    1e7e:	cd 01       	movw	r24, r26
    1e80:	0e 94 12 18 	call	0x3024	; 0x3024 <__udivmodsi4>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	80 5d       	subi	r24, 0xD0	; 208
    1e8a:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
				Local_u32Remainder /= 10;
    1e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e92:	af 85       	ldd	r26, Y+15	; 0x0f
    1e94:	b8 89       	ldd	r27, Y+16	; 0x10
    1e96:	2a e0       	ldi	r18, 0x0A	; 10
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	40 e0       	ldi	r20, 0x00	; 0
    1e9c:	50 e0       	ldi	r21, 0x00	; 0
    1e9e:	bc 01       	movw	r22, r24
    1ea0:	cd 01       	movw	r24, r26
    1ea2:	0e 94 12 18 	call	0x3024	; 0x3024 <__udivmodsi4>
    1ea6:	da 01       	movw	r26, r20
    1ea8:	c9 01       	movw	r24, r18
    1eaa:	8d 87       	std	Y+13, r24	; 0x0d
    1eac:	9e 87       	std	Y+14, r25	; 0x0e
    1eae:	af 87       	std	Y+15, r26	; 0x0f
    1eb0:	b8 8b       	std	Y+16, r27	; 0x10
				Local_u32Current = Local_u32Duplicate%10;
				Local_u32Remainder = (Local_u32Remainder * 10) + Local_u32Current;
				Local_u32Duplicate /= 10;
			}

			while(Local_u32Remainder != 0)
    1eb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb6:	af 85       	ldd	r26, Y+15	; 0x0f
    1eb8:	b8 89       	ldd	r27, Y+16	; 0x10
    1eba:	00 97       	sbiw	r24, 0x00	; 0
    1ebc:	a1 05       	cpc	r26, r1
    1ebe:	b1 05       	cpc	r27, r1
    1ec0:	a9 f6       	brne	.-86     	; 0x1e6c <LCD_enuDisplayFloat+0x1d4>
				LCD_enuWriteNLatch( (Local_u32Remainder%10) + 48);
				Local_u32Remainder /= 10;
			}

			//SOLVING THE ZERO BUG
			s32 Local_s32Duplicate2 = Local_u32IntVer;
    1ec2:	89 89       	ldd	r24, Y+17	; 0x11
    1ec4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ec6:	ab 89       	ldd	r26, Y+19	; 0x13
    1ec8:	bc 89       	ldd	r27, Y+20	; 0x14
    1eca:	89 83       	std	Y+1, r24	; 0x01
    1ecc:	9a 83       	std	Y+2, r25	; 0x02
    1ece:	ab 83       	std	Y+3, r26	; 0x03
    1ed0:	bc 83       	std	Y+4, r27	; 0x04
			while(1)
			{
				Local_u32Current = Local_s32Duplicate2 % 10;
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed6:	ab 81       	ldd	r26, Y+3	; 0x03
    1ed8:	bc 81       	ldd	r27, Y+4	; 0x04
    1eda:	2a e0       	ldi	r18, 0x0A	; 10
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e0       	ldi	r20, 0x00	; 0
    1ee0:	50 e0       	ldi	r21, 0x00	; 0
    1ee2:	bc 01       	movw	r22, r24
    1ee4:	cd 01       	movw	r24, r26
    1ee6:	0e 94 34 18 	call	0x3068	; 0x3068 <__divmodsi4>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	89 87       	std	Y+9, r24	; 0x09
    1ef0:	9a 87       	std	Y+10, r25	; 0x0a
    1ef2:	ab 87       	std	Y+11, r26	; 0x0b
    1ef4:	bc 87       	std	Y+12, r27	; 0x0c
				if(Local_u32Current != 0)
    1ef6:	89 85       	ldd	r24, Y+9	; 0x09
    1ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efa:	ab 85       	ldd	r26, Y+11	; 0x0b
    1efc:	bc 85       	ldd	r27, Y+12	; 0x0c
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	a1 05       	cpc	r26, r1
    1f02:	b1 05       	cpc	r27, r1
    1f04:	b1 f4       	brne	.+44     	; 0x1f32 <LCD_enuDisplayFloat+0x29a>
					break;
				else
				{
					LCD_enuWriteNLatch(48); //ASCII ZERO
    1f06:	80 e3       	ldi	r24, 0x30	; 48
    1f08:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
					Local_s32Duplicate2 /= 10;
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f10:	ab 81       	ldd	r26, Y+3	; 0x03
    1f12:	bc 81       	ldd	r27, Y+4	; 0x04
    1f14:	2a e0       	ldi	r18, 0x0A	; 10
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	40 e0       	ldi	r20, 0x00	; 0
    1f1a:	50 e0       	ldi	r21, 0x00	; 0
    1f1c:	bc 01       	movw	r22, r24
    1f1e:	cd 01       	movw	r24, r26
    1f20:	0e 94 34 18 	call	0x3068	; 0x3068 <__divmodsi4>
    1f24:	da 01       	movw	r26, r20
    1f26:	c9 01       	movw	r24, r18
    1f28:	89 83       	std	Y+1, r24	; 0x01
    1f2a:	9a 83       	std	Y+2, r25	; 0x02
    1f2c:	ab 83       	std	Y+3, r26	; 0x03
    1f2e:	bc 83       	std	Y+4, r27	; 0x04
    1f30:	d0 cf       	rjmp	.-96     	; 0x1ed2 <LCD_enuDisplayFloat+0x23a>
				}
			}

			//ADD THE FLOATING POINT
			LCD_enuWriteNLatch('.');
    1f32:	8e e2       	ldi	r24, 0x2E	; 46
    1f34:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>

			//DISPLAY NUMBERS AFTER THE FLOATING POINT
			Copy_f32Number -=  Local_u32IntVer;
    1f38:	69 89       	ldd	r22, Y+17	; 0x11
    1f3a:	7a 89       	ldd	r23, Y+18	; 0x12
    1f3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f40:	0e 94 25 04 	call	0x84a	; 0x84a <__floatunsisf>
    1f44:	9b 01       	movw	r18, r22
    1f46:	ac 01       	movw	r20, r24
    1f48:	6e 89       	ldd	r22, Y+22	; 0x16
    1f4a:	7f 89       	ldd	r23, Y+23	; 0x17
    1f4c:	88 8d       	ldd	r24, Y+24	; 0x18
    1f4e:	99 8d       	ldd	r25, Y+25	; 0x19
    1f50:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	8e 8b       	std	Y+22, r24	; 0x16
    1f5a:	9f 8b       	std	Y+23, r25	; 0x17
    1f5c:	a8 8f       	std	Y+24, r26	; 0x18
    1f5e:	b9 8f       	std	Y+25, r27	; 0x19
    1f60:	3f c0       	rjmp	.+126    	; 0x1fe0 <LCD_enuDisplayFloat+0x348>

			while(Copy_f32Number)
			{
				Copy_f32Number *= 10;
    1f62:	6e 89       	ldd	r22, Y+22	; 0x16
    1f64:	7f 89       	ldd	r23, Y+23	; 0x17
    1f66:	88 8d       	ldd	r24, Y+24	; 0x18
    1f68:	99 8d       	ldd	r25, Y+25	; 0x19
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	40 e2       	ldi	r20, 0x20	; 32
    1f70:	51 e4       	ldi	r21, 0x41	; 65
    1f72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	8e 8b       	std	Y+22, r24	; 0x16
    1f7c:	9f 8b       	std	Y+23, r25	; 0x17
    1f7e:	a8 8f       	std	Y+24, r26	; 0x18
    1f80:	b9 8f       	std	Y+25, r27	; 0x19
				LCD_enuWriteNLatch(((u32)Copy_f32Number%10) + 48);
    1f82:	6e 89       	ldd	r22, Y+22	; 0x16
    1f84:	7f 89       	ldd	r23, Y+23	; 0x17
    1f86:	88 8d       	ldd	r24, Y+24	; 0x18
    1f88:	99 8d       	ldd	r25, Y+25	; 0x19
    1f8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	2a e0       	ldi	r18, 0x0A	; 10
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	40 e0       	ldi	r20, 0x00	; 0
    1f98:	50 e0       	ldi	r21, 0x00	; 0
    1f9a:	bc 01       	movw	r22, r24
    1f9c:	cd 01       	movw	r24, r26
    1f9e:	0e 94 12 18 	call	0x3024	; 0x3024 <__udivmodsi4>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	80 5d       	subi	r24, 0xD0	; 208
    1fa8:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_enuWriteNLatch>
				Copy_f32Number = Copy_f32Number - (u32)Copy_f32Number;
    1fac:	6e 89       	ldd	r22, Y+22	; 0x16
    1fae:	7f 89       	ldd	r23, Y+23	; 0x17
    1fb0:	88 8d       	ldd	r24, Y+24	; 0x18
    1fb2:	99 8d       	ldd	r25, Y+25	; 0x19
    1fb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	bc 01       	movw	r22, r24
    1fbe:	cd 01       	movw	r24, r26
    1fc0:	0e 94 25 04 	call	0x84a	; 0x84a <__floatunsisf>
    1fc4:	9b 01       	movw	r18, r22
    1fc6:	ac 01       	movw	r20, r24
    1fc8:	6e 89       	ldd	r22, Y+22	; 0x16
    1fca:	7f 89       	ldd	r23, Y+23	; 0x17
    1fcc:	88 8d       	ldd	r24, Y+24	; 0x18
    1fce:	99 8d       	ldd	r25, Y+25	; 0x19
    1fd0:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	8e 8b       	std	Y+22, r24	; 0x16
    1fda:	9f 8b       	std	Y+23, r25	; 0x17
    1fdc:	a8 8f       	std	Y+24, r26	; 0x18
    1fde:	b9 8f       	std	Y+25, r27	; 0x19
			LCD_enuWriteNLatch('.');

			//DISPLAY NUMBERS AFTER THE FLOATING POINT
			Copy_f32Number -=  Local_u32IntVer;

			while(Copy_f32Number)
    1fe0:	6e 89       	ldd	r22, Y+22	; 0x16
    1fe2:	7f 89       	ldd	r23, Y+23	; 0x17
    1fe4:	88 8d       	ldd	r24, Y+24	; 0x18
    1fe6:	99 8d       	ldd	r25, Y+25	; 0x19
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	40 e0       	ldi	r20, 0x00	; 0
    1fee:	50 e0       	ldi	r21, 0x00	; 0
    1ff0:	0e 94 11 03 	call	0x622	; 0x622 <__nesf2>
    1ff4:	88 23       	and	r24, r24
    1ff6:	09 f0       	breq	.+2      	; 0x1ffa <LCD_enuDisplayFloat+0x362>
    1ff8:	b4 cf       	rjmp	.-152    	; 0x1f62 <LCD_enuDisplayFloat+0x2ca>
	}




	return Local_enuErrorState;
    1ffa:	8d 89       	ldd	r24, Y+21	; 0x15
}
    1ffc:	69 96       	adiw	r28, 0x19	; 25
    1ffe:	0f b6       	in	r0, 0x3f	; 63
    2000:	f8 94       	cli
    2002:	de bf       	out	0x3e, r29	; 62
    2004:	0f be       	out	0x3f, r0	; 63
    2006:	cd bf       	out	0x3d, r28	; 61
    2008:	cf 91       	pop	r28
    200a:	df 91       	pop	r29
    200c:	08 95       	ret

0000200e <LCD_enuWriteNLatch>:



static ES_t LCD_enuWriteNLatch(u8 Copy_u8Data)
{
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	2f 97       	sbiw	r28, 0x0f	; 15
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	8f 87       	std	Y+15, r24	; 0x0f
	ES_t Local_u8ErrorState = ES_NOK;
    2024:	1d 86       	std	Y+13, r1	; 0x0d
	u32 Local_u32ErrorState,Local_u32ErrorState1,Local_u32ErrorState2;
	Local_u32ErrorState = DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	63 e0       	ldi	r22, 0x03	; 3
    202a:	40 e0       	ldi	r20, 0x00	; 0
    202c:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
    2030:	88 2f       	mov	r24, r24
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	a0 e0       	ldi	r26, 0x00	; 0
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	89 87       	std	Y+9, r24	; 0x09
    203a:	9a 87       	std	Y+10, r25	; 0x0a
    203c:	ab 87       	std	Y+11, r26	; 0x0b
    203e:	bc 87       	std	Y+12, r27	; 0x0c
	Local_u32ErrorState = (DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW)<<2);
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	62 e0       	ldi	r22, 0x02	; 2
    2044:	40 e0       	ldi	r20, 0x00	; 0
    2046:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
    204a:	88 2f       	mov	r24, r24
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	88 0f       	add	r24, r24
    2050:	99 1f       	adc	r25, r25
    2052:	88 0f       	add	r24, r24
    2054:	99 1f       	adc	r25, r25
    2056:	aa 27       	eor	r26, r26
    2058:	97 fd       	sbrc	r25, 7
    205a:	a0 95       	com	r26
    205c:	ba 2f       	mov	r27, r26
    205e:	89 87       	std	Y+9, r24	; 0x09
    2060:	9a 87       	std	Y+10, r25	; 0x0a
    2062:	ab 87       	std	Y+11, r26	; 0x0b
    2064:	bc 87       	std	Y+12, r27	; 0x0c

	if (Copy_u8Data == 0x28)//'('
    2066:	8f 85       	ldd	r24, Y+15	; 0x0f
    2068:	88 32       	cpi	r24, 0x28	; 40
    206a:	09 f0       	breq	.+2      	; 0x206e <LCD_enuWriteNLatch+0x60>
    206c:	7f c0       	rjmp	.+254    	; 0x216c <LCD_enuWriteNLatch+0x15e>
	{
		u8 Local_u8RS_Val;
		Local_u32ErrorState = (DIO_enuGetPinValue(RS_PORT, RS_PIN, &Local_u8RS_Val)<<2);
    206e:	9e 01       	movw	r18, r28
    2070:	22 5f       	subi	r18, 0xF2	; 242
    2072:	3f 4f       	sbci	r19, 0xFF	; 255
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	61 e0       	ldi	r22, 0x01	; 1
    2078:	a9 01       	movw	r20, r18
    207a:	0e 94 0f 09 	call	0x121e	; 0x121e <DIO_enuGetPinValue>
    207e:	88 2f       	mov	r24, r24
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	88 0f       	add	r24, r24
    2084:	99 1f       	adc	r25, r25
    2086:	88 0f       	add	r24, r24
    2088:	99 1f       	adc	r25, r25
    208a:	aa 27       	eor	r26, r26
    208c:	97 fd       	sbrc	r25, 7
    208e:	a0 95       	com	r26
    2090:	ba 2f       	mov	r27, r26
    2092:	89 87       	std	Y+9, r24	; 0x09
    2094:	9a 87       	std	Y+10, r25	; 0x0a
    2096:	ab 87       	std	Y+11, r26	; 0x0b
    2098:	bc 87       	std	Y+12, r27	; 0x0c

		if (Local_u8RS_Val == DIO_u8LOW)
    209a:	8e 85       	ldd	r24, Y+14	; 0x0e
    209c:	88 23       	and	r24, r24
    209e:	09 f0       	breq	.+2      	; 0x20a2 <LCD_enuWriteNLatch+0x94>
    20a0:	65 c0       	rjmp	.+202    	; 0x216c <LCD_enuWriteNLatch+0x15e>
		{
			Local_u32ErrorState = (DIO_enuSetPinValue(D7_PORT, D7_PIN , ((Copy_u8Data>>7)&1))<<2);
    20a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20a4:	98 2f       	mov	r25, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	99 27       	eor	r25, r25
    20aa:	99 1f       	adc	r25, r25
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	67 e0       	ldi	r22, 0x07	; 7
    20b0:	49 2f       	mov	r20, r25
    20b2:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
    20b6:	88 2f       	mov	r24, r24
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	88 0f       	add	r24, r24
    20bc:	99 1f       	adc	r25, r25
    20be:	88 0f       	add	r24, r24
    20c0:	99 1f       	adc	r25, r25
    20c2:	aa 27       	eor	r26, r26
    20c4:	97 fd       	sbrc	r25, 7
    20c6:	a0 95       	com	r26
    20c8:	ba 2f       	mov	r27, r26
    20ca:	89 87       	std	Y+9, r24	; 0x09
    20cc:	9a 87       	std	Y+10, r25	; 0x0a
    20ce:	ab 87       	std	Y+11, r26	; 0x0b
    20d0:	bc 87       	std	Y+12, r27	; 0x0c
			Local_u32ErrorState = (DIO_enuSetPinValue(D6_PORT, D6_PIN , ((Copy_u8Data>>6)&1))<<2);
    20d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20d4:	82 95       	swap	r24
    20d6:	86 95       	lsr	r24
    20d8:	86 95       	lsr	r24
    20da:	83 70       	andi	r24, 0x03	; 3
    20dc:	98 2f       	mov	r25, r24
    20de:	91 70       	andi	r25, 0x01	; 1
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	66 e0       	ldi	r22, 0x06	; 6
    20e4:	49 2f       	mov	r20, r25
    20e6:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
    20ea:	88 2f       	mov	r24, r24
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	88 0f       	add	r24, r24
    20f0:	99 1f       	adc	r25, r25
    20f2:	88 0f       	add	r24, r24
    20f4:	99 1f       	adc	r25, r25
    20f6:	aa 27       	eor	r26, r26
    20f8:	97 fd       	sbrc	r25, 7
    20fa:	a0 95       	com	r26
    20fc:	ba 2f       	mov	r27, r26
    20fe:	89 87       	std	Y+9, r24	; 0x09
    2100:	9a 87       	std	Y+10, r25	; 0x0a
    2102:	ab 87       	std	Y+11, r26	; 0x0b
    2104:	bc 87       	std	Y+12, r27	; 0x0c
			Local_u32ErrorState = (DIO_enuSetPinValue(D5_PORT, D5_PIN , ((Copy_u8Data>>5)&1))<<2);
    2106:	8f 85       	ldd	r24, Y+15	; 0x0f
    2108:	82 95       	swap	r24
    210a:	86 95       	lsr	r24
    210c:	87 70       	andi	r24, 0x07	; 7
    210e:	98 2f       	mov	r25, r24
    2110:	91 70       	andi	r25, 0x01	; 1
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	65 e0       	ldi	r22, 0x05	; 5
    2116:	49 2f       	mov	r20, r25
    2118:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
    211c:	88 2f       	mov	r24, r24
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	88 0f       	add	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	88 0f       	add	r24, r24
    2126:	99 1f       	adc	r25, r25
    2128:	aa 27       	eor	r26, r26
    212a:	97 fd       	sbrc	r25, 7
    212c:	a0 95       	com	r26
    212e:	ba 2f       	mov	r27, r26
    2130:	89 87       	std	Y+9, r24	; 0x09
    2132:	9a 87       	std	Y+10, r25	; 0x0a
    2134:	ab 87       	std	Y+11, r26	; 0x0b
    2136:	bc 87       	std	Y+12, r27	; 0x0c
			Local_u32ErrorState = (DIO_enuSetPinValue(D4_PORT, D4_PIN , ((Copy_u8Data>>4)&1))<<2);
    2138:	8f 85       	ldd	r24, Y+15	; 0x0f
    213a:	82 95       	swap	r24
    213c:	8f 70       	andi	r24, 0x0F	; 15
    213e:	98 2f       	mov	r25, r24
    2140:	91 70       	andi	r25, 0x01	; 1
    2142:	80 e0       	ldi	r24, 0x00	; 0
    2144:	64 e0       	ldi	r22, 0x04	; 4
    2146:	49 2f       	mov	r20, r25
    2148:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
    214c:	88 2f       	mov	r24, r24
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	88 0f       	add	r24, r24
    2152:	99 1f       	adc	r25, r25
    2154:	88 0f       	add	r24, r24
    2156:	99 1f       	adc	r25, r25
    2158:	aa 27       	eor	r26, r26
    215a:	97 fd       	sbrc	r25, 7
    215c:	a0 95       	com	r26
    215e:	ba 2f       	mov	r27, r26
    2160:	89 87       	std	Y+9, r24	; 0x09
    2162:	9a 87       	std	Y+10, r25	; 0x0a
    2164:	ab 87       	std	Y+11, r26	; 0x0b
    2166:	bc 87       	std	Y+12, r27	; 0x0c

			LCD_enuLatch();
    2168:	0e 94 ab 11 	call	0x2356	; 0x2356 <LCD_enuLatch>
		}
	}

#if LCD_MODE == FOUR_BIT //'A' =65=0b 0100  0001

	Local_u32ErrorState1 = (DIO_enuSetPinValue(D7_PORT, D7_PIN , ((Copy_u8Data>>7)&1))<<2);
    216c:	8f 85       	ldd	r24, Y+15	; 0x0f
    216e:	98 2f       	mov	r25, r24
    2170:	99 1f       	adc	r25, r25
    2172:	99 27       	eor	r25, r25
    2174:	99 1f       	adc	r25, r25
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	67 e0       	ldi	r22, 0x07	; 7
    217a:	49 2f       	mov	r20, r25
    217c:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
    2180:	88 2f       	mov	r24, r24
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	88 0f       	add	r24, r24
    2186:	99 1f       	adc	r25, r25
    2188:	88 0f       	add	r24, r24
    218a:	99 1f       	adc	r25, r25
    218c:	aa 27       	eor	r26, r26
    218e:	97 fd       	sbrc	r25, 7
    2190:	a0 95       	com	r26
    2192:	ba 2f       	mov	r27, r26
    2194:	8d 83       	std	Y+5, r24	; 0x05
    2196:	9e 83       	std	Y+6, r25	; 0x06
    2198:	af 83       	std	Y+7, r26	; 0x07
    219a:	b8 87       	std	Y+8, r27	; 0x08
	Local_u32ErrorState1 = (DIO_enuSetPinValue(D6_PORT, D6_PIN , ((Copy_u8Data>>6)&1))<<2);
    219c:	8f 85       	ldd	r24, Y+15	; 0x0f
    219e:	82 95       	swap	r24
    21a0:	86 95       	lsr	r24
    21a2:	86 95       	lsr	r24
    21a4:	83 70       	andi	r24, 0x03	; 3
    21a6:	98 2f       	mov	r25, r24
    21a8:	91 70       	andi	r25, 0x01	; 1
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	66 e0       	ldi	r22, 0x06	; 6
    21ae:	49 2f       	mov	r20, r25
    21b0:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
    21b4:	88 2f       	mov	r24, r24
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	88 0f       	add	r24, r24
    21ba:	99 1f       	adc	r25, r25
    21bc:	88 0f       	add	r24, r24
    21be:	99 1f       	adc	r25, r25
    21c0:	aa 27       	eor	r26, r26
    21c2:	97 fd       	sbrc	r25, 7
    21c4:	a0 95       	com	r26
    21c6:	ba 2f       	mov	r27, r26
    21c8:	8d 83       	std	Y+5, r24	; 0x05
    21ca:	9e 83       	std	Y+6, r25	; 0x06
    21cc:	af 83       	std	Y+7, r26	; 0x07
    21ce:	b8 87       	std	Y+8, r27	; 0x08
	Local_u32ErrorState1 = (DIO_enuSetPinValue(D5_PORT, D5_PIN , ((Copy_u8Data>>5)&1))<<2);
    21d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21d2:	82 95       	swap	r24
    21d4:	86 95       	lsr	r24
    21d6:	87 70       	andi	r24, 0x07	; 7
    21d8:	98 2f       	mov	r25, r24
    21da:	91 70       	andi	r25, 0x01	; 1
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	65 e0       	ldi	r22, 0x05	; 5
    21e0:	49 2f       	mov	r20, r25
    21e2:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
    21e6:	88 2f       	mov	r24, r24
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	88 0f       	add	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	aa 27       	eor	r26, r26
    21f4:	97 fd       	sbrc	r25, 7
    21f6:	a0 95       	com	r26
    21f8:	ba 2f       	mov	r27, r26
    21fa:	8d 83       	std	Y+5, r24	; 0x05
    21fc:	9e 83       	std	Y+6, r25	; 0x06
    21fe:	af 83       	std	Y+7, r26	; 0x07
    2200:	b8 87       	std	Y+8, r27	; 0x08
	Local_u32ErrorState1 = (DIO_enuSetPinValue(D4_PORT, D4_PIN , ((Copy_u8Data>>4)&1))<<2);
    2202:	8f 85       	ldd	r24, Y+15	; 0x0f
    2204:	82 95       	swap	r24
    2206:	8f 70       	andi	r24, 0x0F	; 15
    2208:	98 2f       	mov	r25, r24
    220a:	91 70       	andi	r25, 0x01	; 1
    220c:	80 e0       	ldi	r24, 0x00	; 0
    220e:	64 e0       	ldi	r22, 0x04	; 4
    2210:	49 2f       	mov	r20, r25
    2212:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
    2216:	88 2f       	mov	r24, r24
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	88 0f       	add	r24, r24
    221c:	99 1f       	adc	r25, r25
    221e:	88 0f       	add	r24, r24
    2220:	99 1f       	adc	r25, r25
    2222:	aa 27       	eor	r26, r26
    2224:	97 fd       	sbrc	r25, 7
    2226:	a0 95       	com	r26
    2228:	ba 2f       	mov	r27, r26
    222a:	8d 83       	std	Y+5, r24	; 0x05
    222c:	9e 83       	std	Y+6, r25	; 0x06
    222e:	af 83       	std	Y+7, r26	; 0x07
    2230:	b8 87       	std	Y+8, r27	; 0x08

	LCD_enuLatch();
    2232:	0e 94 ab 11 	call	0x2356	; 0x2356 <LCD_enuLatch>



	Local_u32ErrorState1 = (DIO_enuSetPinValue(D7_PORT, D7_PIN , ((Copy_u8Data>>3)&1))<<2);
    2236:	8f 85       	ldd	r24, Y+15	; 0x0f
    2238:	86 95       	lsr	r24
    223a:	86 95       	lsr	r24
    223c:	86 95       	lsr	r24
    223e:	98 2f       	mov	r25, r24
    2240:	91 70       	andi	r25, 0x01	; 1
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	67 e0       	ldi	r22, 0x07	; 7
    2246:	49 2f       	mov	r20, r25
    2248:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
    224c:	88 2f       	mov	r24, r24
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	88 0f       	add	r24, r24
    2252:	99 1f       	adc	r25, r25
    2254:	88 0f       	add	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	aa 27       	eor	r26, r26
    225a:	97 fd       	sbrc	r25, 7
    225c:	a0 95       	com	r26
    225e:	ba 2f       	mov	r27, r26
    2260:	8d 83       	std	Y+5, r24	; 0x05
    2262:	9e 83       	std	Y+6, r25	; 0x06
    2264:	af 83       	std	Y+7, r26	; 0x07
    2266:	b8 87       	std	Y+8, r27	; 0x08
	Local_u32ErrorState1 = (DIO_enuSetPinValue(D6_PORT, D6_PIN , ((Copy_u8Data>>2)&1))<<2);
    2268:	8f 85       	ldd	r24, Y+15	; 0x0f
    226a:	86 95       	lsr	r24
    226c:	86 95       	lsr	r24
    226e:	98 2f       	mov	r25, r24
    2270:	91 70       	andi	r25, 0x01	; 1
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	66 e0       	ldi	r22, 0x06	; 6
    2276:	49 2f       	mov	r20, r25
    2278:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
    227c:	88 2f       	mov	r24, r24
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	88 0f       	add	r24, r24
    2282:	99 1f       	adc	r25, r25
    2284:	88 0f       	add	r24, r24
    2286:	99 1f       	adc	r25, r25
    2288:	aa 27       	eor	r26, r26
    228a:	97 fd       	sbrc	r25, 7
    228c:	a0 95       	com	r26
    228e:	ba 2f       	mov	r27, r26
    2290:	8d 83       	std	Y+5, r24	; 0x05
    2292:	9e 83       	std	Y+6, r25	; 0x06
    2294:	af 83       	std	Y+7, r26	; 0x07
    2296:	b8 87       	std	Y+8, r27	; 0x08
	Local_u32ErrorState1 = (DIO_enuSetPinValue(D5_PORT, D5_PIN , ((Copy_u8Data>>1)&1))<<2);
    2298:	8f 85       	ldd	r24, Y+15	; 0x0f
    229a:	86 95       	lsr	r24
    229c:	98 2f       	mov	r25, r24
    229e:	91 70       	andi	r25, 0x01	; 1
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	65 e0       	ldi	r22, 0x05	; 5
    22a4:	49 2f       	mov	r20, r25
    22a6:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
    22aa:	88 2f       	mov	r24, r24
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	88 0f       	add	r24, r24
    22b0:	99 1f       	adc	r25, r25
    22b2:	88 0f       	add	r24, r24
    22b4:	99 1f       	adc	r25, r25
    22b6:	aa 27       	eor	r26, r26
    22b8:	97 fd       	sbrc	r25, 7
    22ba:	a0 95       	com	r26
    22bc:	ba 2f       	mov	r27, r26
    22be:	8d 83       	std	Y+5, r24	; 0x05
    22c0:	9e 83       	std	Y+6, r25	; 0x06
    22c2:	af 83       	std	Y+7, r26	; 0x07
    22c4:	b8 87       	std	Y+8, r27	; 0x08
	Local_u32ErrorState1 = (DIO_enuSetPinValue(D4_PORT, D4_PIN , ((Copy_u8Data>>0)&1))<<2);
    22c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    22c8:	98 2f       	mov	r25, r24
    22ca:	91 70       	andi	r25, 0x01	; 1
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	64 e0       	ldi	r22, 0x04	; 4
    22d0:	49 2f       	mov	r20, r25
    22d2:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
    22d6:	88 2f       	mov	r24, r24
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	88 0f       	add	r24, r24
    22dc:	99 1f       	adc	r25, r25
    22de:	88 0f       	add	r24, r24
    22e0:	99 1f       	adc	r25, r25
    22e2:	aa 27       	eor	r26, r26
    22e4:	97 fd       	sbrc	r25, 7
    22e6:	a0 95       	com	r26
    22e8:	ba 2f       	mov	r27, r26
    22ea:	8d 83       	std	Y+5, r24	; 0x05
    22ec:	9e 83       	std	Y+6, r25	; 0x06
    22ee:	af 83       	std	Y+7, r26	; 0x07
    22f0:	b8 87       	std	Y+8, r27	; 0x08

	LCD_enuLatch();
    22f2:	0e 94 ab 11 	call	0x2356	; 0x2356 <LCD_enuLatch>
	Local_u32ErrorState2 = (DIO_enuSetPinValue(LCD_u8D1_GROUP,LCD_u8D1_PIN,(Copy_u8Data>>DIO_u8PIN1)&1)<<2);
	Local_u32ErrorState2 = (DIO_enuSetPinValue(LCD_u8D0_GROUP,LCD_u8D0_PIN,(Copy_u8Data>>DIO_u8PIN0)&1)<<2);
#else
#error"LCD mode is wrong"
#endif
	if (Local_u32ErrorState == 0x15555 && ( Local_u32ErrorState1 == 0x555555 || Local_u32ErrorState2 == 0x5555) ){
    22f6:	89 85       	ldd	r24, Y+9	; 0x09
    22f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fa:	ab 85       	ldd	r26, Y+11	; 0x0b
    22fc:	bc 85       	ldd	r27, Y+12	; 0x0c
    22fe:	85 35       	cpi	r24, 0x55	; 85
    2300:	25 e5       	ldi	r18, 0x55	; 85
    2302:	92 07       	cpc	r25, r18
    2304:	21 e0       	ldi	r18, 0x01	; 1
    2306:	a2 07       	cpc	r26, r18
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	b2 07       	cpc	r27, r18
    230c:	d1 f4       	brne	.+52     	; 0x2342 <LCD_enuWriteNLatch+0x334>
    230e:	8d 81       	ldd	r24, Y+5	; 0x05
    2310:	9e 81       	ldd	r25, Y+6	; 0x06
    2312:	af 81       	ldd	r26, Y+7	; 0x07
    2314:	b8 85       	ldd	r27, Y+8	; 0x08
    2316:	85 35       	cpi	r24, 0x55	; 85
    2318:	25 e5       	ldi	r18, 0x55	; 85
    231a:	92 07       	cpc	r25, r18
    231c:	25 e5       	ldi	r18, 0x55	; 85
    231e:	a2 07       	cpc	r26, r18
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	b2 07       	cpc	r27, r18
    2324:	61 f0       	breq	.+24     	; 0x233e <LCD_enuWriteNLatch+0x330>
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	9a 81       	ldd	r25, Y+2	; 0x02
    232a:	ab 81       	ldd	r26, Y+3	; 0x03
    232c:	bc 81       	ldd	r27, Y+4	; 0x04
    232e:	85 35       	cpi	r24, 0x55	; 85
    2330:	25 e5       	ldi	r18, 0x55	; 85
    2332:	92 07       	cpc	r25, r18
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	a2 07       	cpc	r26, r18
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	b2 07       	cpc	r27, r18
    233c:	11 f4       	brne	.+4      	; 0x2342 <LCD_enuWriteNLatch+0x334>
		Local_u8ErrorState = ES_OK;
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	8d 87       	std	Y+13, r24	; 0x0d
	}


	return Local_u8ErrorState;
    2342:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    2344:	2f 96       	adiw	r28, 0x0f	; 15
    2346:	0f b6       	in	r0, 0x3f	; 63
    2348:	f8 94       	cli
    234a:	de bf       	out	0x3e, r29	; 62
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	cd bf       	out	0x3d, r28	; 61
    2350:	cf 91       	pop	r28
    2352:	df 91       	pop	r29
    2354:	08 95       	ret

00002356 <LCD_enuLatch>:

static ES_t LCD_enuLatch(void)
{
    2356:	df 93       	push	r29
    2358:	cf 93       	push	r28
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    235e:	6e 97       	sbiw	r28, 0x1e	; 30
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	f8 94       	cli
    2364:	de bf       	out	0x3e, r29	; 62
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    236a:	1e 8e       	std	Y+30, r1	; 0x1e

	u8 Local_u8ErrorState = 0;
    236c:	1d 8e       	std	Y+29, r1	; 0x1d

	Local_u8ErrorState = DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8HIGH);
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	63 e0       	ldi	r22, 0x03	; 3
    2372:	41 e0       	ldi	r20, 0x01	; 1
    2374:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
    2378:	8d 8f       	std	Y+29, r24	; 0x1d
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	a0 ea       	ldi	r26, 0xA0	; 160
    2380:	b0 e4       	ldi	r27, 0x40	; 64
    2382:	89 8f       	std	Y+25, r24	; 0x19
    2384:	9a 8f       	std	Y+26, r25	; 0x1a
    2386:	ab 8f       	std	Y+27, r26	; 0x1b
    2388:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    238a:	69 8d       	ldd	r22, Y+25	; 0x19
    238c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    238e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2390:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	4a e7       	ldi	r20, 0x7A	; 122
    2398:	55 e4       	ldi	r21, 0x45	; 69
    239a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	8d 8b       	std	Y+21, r24	; 0x15
    23a4:	9e 8b       	std	Y+22, r25	; 0x16
    23a6:	af 8b       	std	Y+23, r26	; 0x17
    23a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23aa:	6d 89       	ldd	r22, Y+21	; 0x15
    23ac:	7e 89       	ldd	r23, Y+22	; 0x16
    23ae:	8f 89       	ldd	r24, Y+23	; 0x17
    23b0:	98 8d       	ldd	r25, Y+24	; 0x18
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	40 e8       	ldi	r20, 0x80	; 128
    23b8:	5f e3       	ldi	r21, 0x3F	; 63
    23ba:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    23be:	88 23       	and	r24, r24
    23c0:	2c f4       	brge	.+10     	; 0x23cc <LCD_enuLatch+0x76>
		__ticks = 1;
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	9c 8b       	std	Y+20, r25	; 0x14
    23c8:	8b 8b       	std	Y+19, r24	; 0x13
    23ca:	3f c0       	rjmp	.+126    	; 0x244a <LCD_enuLatch+0xf4>
	else if (__tmp > 65535)
    23cc:	6d 89       	ldd	r22, Y+21	; 0x15
    23ce:	7e 89       	ldd	r23, Y+22	; 0x16
    23d0:	8f 89       	ldd	r24, Y+23	; 0x17
    23d2:	98 8d       	ldd	r25, Y+24	; 0x18
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	3f ef       	ldi	r19, 0xFF	; 255
    23d8:	4f e7       	ldi	r20, 0x7F	; 127
    23da:	57 e4       	ldi	r21, 0x47	; 71
    23dc:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    23e0:	18 16       	cp	r1, r24
    23e2:	4c f5       	brge	.+82     	; 0x2436 <LCD_enuLatch+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e4:	69 8d       	ldd	r22, Y+25	; 0x19
    23e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	40 e2       	ldi	r20, 0x20	; 32
    23f2:	51 e4       	ldi	r21, 0x41	; 65
    23f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	bc 01       	movw	r22, r24
    23fe:	cd 01       	movw	r24, r26
    2400:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	9c 8b       	std	Y+20, r25	; 0x14
    240a:	8b 8b       	std	Y+19, r24	; 0x13
    240c:	0f c0       	rjmp	.+30     	; 0x242c <LCD_enuLatch+0xd6>
    240e:	80 e9       	ldi	r24, 0x90	; 144
    2410:	91 e0       	ldi	r25, 0x01	; 1
    2412:	9a 8b       	std	Y+18, r25	; 0x12
    2414:	89 8b       	std	Y+17, r24	; 0x11
    2416:	89 89       	ldd	r24, Y+17	; 0x11
    2418:	9a 89       	ldd	r25, Y+18	; 0x12
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	f1 f7       	brne	.-4      	; 0x241a <LCD_enuLatch+0xc4>
    241e:	9a 8b       	std	Y+18, r25	; 0x12
    2420:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2422:	8b 89       	ldd	r24, Y+19	; 0x13
    2424:	9c 89       	ldd	r25, Y+20	; 0x14
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	9c 8b       	std	Y+20, r25	; 0x14
    242a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    242c:	8b 89       	ldd	r24, Y+19	; 0x13
    242e:	9c 89       	ldd	r25, Y+20	; 0x14
    2430:	00 97       	sbiw	r24, 0x00	; 0
    2432:	69 f7       	brne	.-38     	; 0x240e <LCD_enuLatch+0xb8>
    2434:	14 c0       	rjmp	.+40     	; 0x245e <LCD_enuLatch+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2436:	6d 89       	ldd	r22, Y+21	; 0x15
    2438:	7e 89       	ldd	r23, Y+22	; 0x16
    243a:	8f 89       	ldd	r24, Y+23	; 0x17
    243c:	98 8d       	ldd	r25, Y+24	; 0x18
    243e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	9c 8b       	std	Y+20, r25	; 0x14
    2448:	8b 8b       	std	Y+19, r24	; 0x13
    244a:	8b 89       	ldd	r24, Y+19	; 0x13
    244c:	9c 89       	ldd	r25, Y+20	; 0x14
    244e:	98 8b       	std	Y+16, r25	; 0x10
    2450:	8f 87       	std	Y+15, r24	; 0x0f
    2452:	8f 85       	ldd	r24, Y+15	; 0x0f
    2454:	98 89       	ldd	r25, Y+16	; 0x10
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	f1 f7       	brne	.-4      	; 0x2456 <LCD_enuLatch+0x100>
    245a:	98 8b       	std	Y+16, r25	; 0x10
    245c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	Local_u8ErrorState |= (DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW))<<2;
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	63 e0       	ldi	r22, 0x03	; 3
    2462:	40 e0       	ldi	r20, 0x00	; 0
    2464:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
    2468:	88 2f       	mov	r24, r24
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	88 0f       	add	r24, r24
    246e:	99 1f       	adc	r25, r25
    2470:	88 0f       	add	r24, r24
    2472:	99 1f       	adc	r25, r25
    2474:	98 2f       	mov	r25, r24
    2476:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2478:	89 2b       	or	r24, r25
    247a:	8d 8f       	std	Y+29, r24	; 0x1d
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	a0 ea       	ldi	r26, 0xA0	; 160
    2482:	b0 e4       	ldi	r27, 0x40	; 64
    2484:	8b 87       	std	Y+11, r24	; 0x0b
    2486:	9c 87       	std	Y+12, r25	; 0x0c
    2488:	ad 87       	std	Y+13, r26	; 0x0d
    248a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248c:	6b 85       	ldd	r22, Y+11	; 0x0b
    248e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2490:	8d 85       	ldd	r24, Y+13	; 0x0d
    2492:	9e 85       	ldd	r25, Y+14	; 0x0e
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	4a e7       	ldi	r20, 0x7A	; 122
    249a:	55 e4       	ldi	r21, 0x45	; 69
    249c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	8f 83       	std	Y+7, r24	; 0x07
    24a6:	98 87       	std	Y+8, r25	; 0x08
    24a8:	a9 87       	std	Y+9, r26	; 0x09
    24aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24ac:	6f 81       	ldd	r22, Y+7	; 0x07
    24ae:	78 85       	ldd	r23, Y+8	; 0x08
    24b0:	89 85       	ldd	r24, Y+9	; 0x09
    24b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e8       	ldi	r20, 0x80	; 128
    24ba:	5f e3       	ldi	r21, 0x3F	; 63
    24bc:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    24c0:	88 23       	and	r24, r24
    24c2:	2c f4       	brge	.+10     	; 0x24ce <LCD_enuLatch+0x178>
		__ticks = 1;
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	9e 83       	std	Y+6, r25	; 0x06
    24ca:	8d 83       	std	Y+5, r24	; 0x05
    24cc:	3f c0       	rjmp	.+126    	; 0x254c <LCD_enuLatch+0x1f6>
	else if (__tmp > 65535)
    24ce:	6f 81       	ldd	r22, Y+7	; 0x07
    24d0:	78 85       	ldd	r23, Y+8	; 0x08
    24d2:	89 85       	ldd	r24, Y+9	; 0x09
    24d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	3f ef       	ldi	r19, 0xFF	; 255
    24da:	4f e7       	ldi	r20, 0x7F	; 127
    24dc:	57 e4       	ldi	r21, 0x47	; 71
    24de:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    24e2:	18 16       	cp	r1, r24
    24e4:	4c f5       	brge	.+82     	; 0x2538 <LCD_enuLatch+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	40 e2       	ldi	r20, 0x20	; 32
    24f4:	51 e4       	ldi	r21, 0x41	; 65
    24f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	bc 01       	movw	r22, r24
    2500:	cd 01       	movw	r24, r26
    2502:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	9e 83       	std	Y+6, r25	; 0x06
    250c:	8d 83       	std	Y+5, r24	; 0x05
    250e:	0f c0       	rjmp	.+30     	; 0x252e <LCD_enuLatch+0x1d8>
    2510:	80 e9       	ldi	r24, 0x90	; 144
    2512:	91 e0       	ldi	r25, 0x01	; 1
    2514:	9c 83       	std	Y+4, r25	; 0x04
    2516:	8b 83       	std	Y+3, r24	; 0x03
    2518:	8b 81       	ldd	r24, Y+3	; 0x03
    251a:	9c 81       	ldd	r25, Y+4	; 0x04
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	f1 f7       	brne	.-4      	; 0x251c <LCD_enuLatch+0x1c6>
    2520:	9c 83       	std	Y+4, r25	; 0x04
    2522:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2524:	8d 81       	ldd	r24, Y+5	; 0x05
    2526:	9e 81       	ldd	r25, Y+6	; 0x06
    2528:	01 97       	sbiw	r24, 0x01	; 1
    252a:	9e 83       	std	Y+6, r25	; 0x06
    252c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252e:	8d 81       	ldd	r24, Y+5	; 0x05
    2530:	9e 81       	ldd	r25, Y+6	; 0x06
    2532:	00 97       	sbiw	r24, 0x00	; 0
    2534:	69 f7       	brne	.-38     	; 0x2510 <LCD_enuLatch+0x1ba>
    2536:	14 c0       	rjmp	.+40     	; 0x2560 <LCD_enuLatch+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2538:	6f 81       	ldd	r22, Y+7	; 0x07
    253a:	78 85       	ldd	r23, Y+8	; 0x08
    253c:	89 85       	ldd	r24, Y+9	; 0x09
    253e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2540:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	9e 83       	std	Y+6, r25	; 0x06
    254a:	8d 83       	std	Y+5, r24	; 0x05
    254c:	8d 81       	ldd	r24, Y+5	; 0x05
    254e:	9e 81       	ldd	r25, Y+6	; 0x06
    2550:	9a 83       	std	Y+2, r25	; 0x02
    2552:	89 83       	std	Y+1, r24	; 0x01
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	9a 81       	ldd	r25, Y+2	; 0x02
    2558:	01 97       	sbiw	r24, 0x01	; 1
    255a:	f1 f7       	brne	.-4      	; 0x2558 <LCD_enuLatch+0x202>
    255c:	9a 83       	std	Y+2, r25	; 0x02
    255e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);

	if(Local_u8ErrorState == 5)
    2560:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2562:	85 30       	cpi	r24, 0x05	; 5
    2564:	11 f4       	brne	.+4      	; 0x256a <LCD_enuLatch+0x214>
	{
		Local_enuErrorState = ES_OK;
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	8e 8f       	std	Y+30, r24	; 0x1e
	}

	return Local_enuErrorState;
    256a:	8e 8d       	ldd	r24, Y+30	; 0x1e
}
    256c:	6e 96       	adiw	r28, 0x1e	; 30
    256e:	0f b6       	in	r0, 0x3f	; 63
    2570:	f8 94       	cli
    2572:	de bf       	out	0x3e, r29	; 62
    2574:	0f be       	out	0x3f, r0	; 63
    2576:	cd bf       	out	0x3d, r28	; 61
    2578:	cf 91       	pop	r28
    257a:	df 91       	pop	r29
    257c:	08 95       	ret

0000257e <Keypad_enuInit>:
#include "Keypad_priv.h"

#include <util/delay.h>

ES_t Keypad_enuInit(void)
{
    257e:	df 93       	push	r29
    2580:	cf 93       	push	r28
    2582:	0f 92       	push	r0
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2588:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinDirection(C1_PORT , C1_PIN , DIO_u8OUTPUT);
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	64 e0       	ldi	r22, 0x04	; 4
    258e:	41 e0       	ldi	r20, 0x01	; 1
    2590:	0e 94 a6 06 	call	0xd4c	; 0xd4c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C2_PORT , C2_PIN , DIO_u8OUTPUT);
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	65 e0       	ldi	r22, 0x05	; 5
    2598:	41 e0       	ldi	r20, 0x01	; 1
    259a:	0e 94 a6 06 	call	0xd4c	; 0xd4c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C3_PORT , C3_PIN , DIO_u8OUTPUT);
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	66 e0       	ldi	r22, 0x06	; 6
    25a2:	41 e0       	ldi	r20, 0x01	; 1
    25a4:	0e 94 a6 06 	call	0xd4c	; 0xd4c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C4_PORT , C4_PIN , DIO_u8OUTPUT);
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	67 e0       	ldi	r22, 0x07	; 7
    25ac:	41 e0       	ldi	r20, 0x01	; 1
    25ae:	0e 94 a6 06 	call	0xd4c	; 0xd4c <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(R1_PORT , R1_PIN , DIO_u8INPUT);
    25b2:	82 e0       	ldi	r24, 0x02	; 2
    25b4:	63 e0       	ldi	r22, 0x03	; 3
    25b6:	40 e0       	ldi	r20, 0x00	; 0
    25b8:	0e 94 a6 06 	call	0xd4c	; 0xd4c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R2_PORT , R2_PIN , DIO_u8INPUT);
    25bc:	82 e0       	ldi	r24, 0x02	; 2
    25be:	64 e0       	ldi	r22, 0x04	; 4
    25c0:	40 e0       	ldi	r20, 0x00	; 0
    25c2:	0e 94 a6 06 	call	0xd4c	; 0xd4c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R3_PORT , R3_PIN , DIO_u8INPUT);
    25c6:	82 e0       	ldi	r24, 0x02	; 2
    25c8:	65 e0       	ldi	r22, 0x05	; 5
    25ca:	40 e0       	ldi	r20, 0x00	; 0
    25cc:	0e 94 a6 06 	call	0xd4c	; 0xd4c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R4_PORT , R4_PIN , DIO_u8INPUT);
    25d0:	82 e0       	ldi	r24, 0x02	; 2
    25d2:	66 e0       	ldi	r22, 0x06	; 6
    25d4:	40 e0       	ldi	r20, 0x00	; 0
    25d6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <DIO_enuSetPinDirection>

	DIO_enuSetPinValue(C1_PORT , C1_PIN , DIO_u8HIGH);
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	64 e0       	ldi	r22, 0x04	; 4
    25de:	41 e0       	ldi	r20, 0x01	; 1
    25e0:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C2_PORT , C2_PIN , DIO_u8HIGH);
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	65 e0       	ldi	r22, 0x05	; 5
    25e8:	41 e0       	ldi	r20, 0x01	; 1
    25ea:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C3_PORT , C3_PIN , DIO_u8HIGH);
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	66 e0       	ldi	r22, 0x06	; 6
    25f2:	41 e0       	ldi	r20, 0x01	; 1
    25f4:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C4_PORT , C4_PIN , DIO_u8HIGH);
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	67 e0       	ldi	r22, 0x07	; 7
    25fc:	41 e0       	ldi	r20, 0x01	; 1
    25fe:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(R1_PORT , R1_PIN , DIO_u8PULL_UP);
    2602:	82 e0       	ldi	r24, 0x02	; 2
    2604:	63 e0       	ldi	r22, 0x03	; 3
    2606:	41 e0       	ldi	r20, 0x01	; 1
    2608:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R2_PORT , R2_PIN , DIO_u8PULL_UP);
    260c:	82 e0       	ldi	r24, 0x02	; 2
    260e:	64 e0       	ldi	r22, 0x04	; 4
    2610:	41 e0       	ldi	r20, 0x01	; 1
    2612:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R3_PORT , R3_PIN , DIO_u8PULL_UP);
    2616:	82 e0       	ldi	r24, 0x02	; 2
    2618:	65 e0       	ldi	r22, 0x05	; 5
    261a:	41 e0       	ldi	r20, 0x01	; 1
    261c:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R4_PORT , R4_PIN , DIO_u8PULL_UP);
    2620:	82 e0       	ldi	r24, 0x02	; 2
    2622:	66 e0       	ldi	r22, 0x06	; 6
    2624:	41 e0       	ldi	r20, 0x01	; 1
    2626:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>

	return Local_enuErrorState;
    262a:	89 81       	ldd	r24, Y+1	; 0x01
}
    262c:	0f 90       	pop	r0
    262e:	cf 91       	pop	r28
    2630:	df 91       	pop	r29
    2632:	08 95       	ret

00002634 <Keypad_enuGetPressedKey>:

ES_t Keypad_enuGetPressedKey(u8 * Copy_pu8KeyValue)
{
    2634:	df 93       	push	r29
    2636:	cf 93       	push	r28
    2638:	cd b7       	in	r28, 0x3d	; 61
    263a:	de b7       	in	r29, 0x3e	; 62
    263c:	ea 97       	sbiw	r28, 0x3a	; 58
    263e:	0f b6       	in	r0, 0x3f	; 63
    2640:	f8 94       	cli
    2642:	de bf       	out	0x3e, r29	; 62
    2644:	0f be       	out	0x3f, r0	; 63
    2646:	cd bf       	out	0x3d, r28	; 61
    2648:	9c ab       	std	Y+52, r25	; 0x34
    264a:	8b ab       	std	Y+51, r24	; 0x33
	ES_t Local_enuErrorState = ES_NOK;
    264c:	19 8a       	std	Y+17, r1	; 0x11

	u8 Local_Au8ColPorts [COL_NUM] = {C1_PORT,C2_PORT,C3_PORT,C4_PORT};
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	8a 8b       	std	Y+18, r24	; 0x12
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	8b 8b       	std	Y+19, r24	; 0x13
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	8c 8b       	std	Y+20, r24	; 0x14
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	8d 8b       	std	Y+21, r24	; 0x15
	u8 Local_Au8ColPins  [COL_NUM] = {C1_PIN, C2_PIN, C3_PIN, C4_PIN};
    265e:	84 e0       	ldi	r24, 0x04	; 4
    2660:	8e 8b       	std	Y+22, r24	; 0x16
    2662:	85 e0       	ldi	r24, 0x05	; 5
    2664:	8f 8b       	std	Y+23, r24	; 0x17
    2666:	86 e0       	ldi	r24, 0x06	; 6
    2668:	88 8f       	std	Y+24, r24	; 0x18
    266a:	87 e0       	ldi	r24, 0x07	; 7
    266c:	89 8f       	std	Y+25, r24	; 0x19

	u8 Local_Au8RowPorts [ROW_NUM] = {R1_PORT,R2_PORT,R3_PORT,R4_PORT};
    266e:	82 e0       	ldi	r24, 0x02	; 2
    2670:	8a 8f       	std	Y+26, r24	; 0x1a
    2672:	82 e0       	ldi	r24, 0x02	; 2
    2674:	8b 8f       	std	Y+27, r24	; 0x1b
    2676:	82 e0       	ldi	r24, 0x02	; 2
    2678:	8c 8f       	std	Y+28, r24	; 0x1c
    267a:	82 e0       	ldi	r24, 0x02	; 2
    267c:	8d 8f       	std	Y+29, r24	; 0x1d
	u8 Local_Au8RowPins  [ROW_NUM] = {R1_PIN, R2_PIN, R3_PIN, R4_PIN};
    267e:	83 e0       	ldi	r24, 0x03	; 3
    2680:	8e 8f       	std	Y+30, r24	; 0x1e
    2682:	84 e0       	ldi	r24, 0x04	; 4
    2684:	8f 8f       	std	Y+31, r24	; 0x1f
    2686:	85 e0       	ldi	r24, 0x05	; 5
    2688:	88 a3       	std	Y+32, r24	; 0x20
    268a:	86 e0       	ldi	r24, 0x06	; 6
    268c:	89 a3       	std	Y+33, r24	; 0x21

	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;
	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
    268e:	18 8a       	std	Y+16, r1	; 0x10
    2690:	3f c1       	rjmp	.+638    	; 0x2910 <Keypad_enuGetPressedKey+0x2dc>
	{
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8LOW);
    2692:	88 89       	ldd	r24, Y+16	; 0x10
    2694:	28 2f       	mov	r18, r24
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	ce 01       	movw	r24, r28
    269a:	42 96       	adiw	r24, 0x12	; 18
    269c:	fc 01       	movw	r30, r24
    269e:	e2 0f       	add	r30, r18
    26a0:	f3 1f       	adc	r31, r19
    26a2:	40 81       	ld	r20, Z
    26a4:	88 89       	ldd	r24, Y+16	; 0x10
    26a6:	28 2f       	mov	r18, r24
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	ce 01       	movw	r24, r28
    26ac:	46 96       	adiw	r24, 0x16	; 22
    26ae:	fc 01       	movw	r30, r24
    26b0:	e2 0f       	add	r30, r18
    26b2:	f3 1f       	adc	r31, r19
    26b4:	90 81       	ld	r25, Z
    26b6:	84 2f       	mov	r24, r20
    26b8:	69 2f       	mov	r22, r25
    26ba:	40 e0       	ldi	r20, 0x00	; 0
    26bc:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>
		for (Local_u8RowIter=0; Local_u8RowIter < ROW_NUM ; Local_u8RowIter++)
    26c0:	1f 86       	std	Y+15, r1	; 0x0f
    26c2:	08 c1       	rjmp	.+528    	; 0x28d4 <Keypad_enuGetPressedKey+0x2a0>
		{
			DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    26c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    26c6:	28 2f       	mov	r18, r24
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	ce 01       	movw	r24, r28
    26cc:	4a 96       	adiw	r24, 0x1a	; 26
    26ce:	fc 01       	movw	r30, r24
    26d0:	e2 0f       	add	r30, r18
    26d2:	f3 1f       	adc	r31, r19
    26d4:	40 81       	ld	r20, Z
    26d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    26d8:	28 2f       	mov	r18, r24
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	ce 01       	movw	r24, r28
    26de:	4e 96       	adiw	r24, 0x1e	; 30
    26e0:	fc 01       	movw	r30, r24
    26e2:	e2 0f       	add	r30, r18
    26e4:	f3 1f       	adc	r31, r19
    26e6:	90 81       	ld	r25, Z
    26e8:	9e 01       	movw	r18, r28
    26ea:	2e 5d       	subi	r18, 0xDE	; 222
    26ec:	3f 4f       	sbci	r19, 0xFF	; 255
    26ee:	84 2f       	mov	r24, r20
    26f0:	69 2f       	mov	r22, r25
    26f2:	a9 01       	movw	r20, r18
    26f4:	0e 94 0f 09 	call	0x121e	; 0x121e <DIO_enuGetPinValue>
			if (! Local_u8PinValue)
    26f8:	8a a1       	ldd	r24, Y+34	; 0x22
    26fa:	88 23       	and	r24, r24
    26fc:	09 f0       	breq	.+2      	; 0x2700 <Keypad_enuGetPressedKey+0xcc>
    26fe:	e7 c0       	rjmp	.+462    	; 0x28ce <Keypad_enuGetPressedKey+0x29a>
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	a0 e2       	ldi	r26, 0x20	; 32
    2706:	b1 e4       	ldi	r27, 0x41	; 65
    2708:	8b 87       	std	Y+11, r24	; 0x0b
    270a:	9c 87       	std	Y+12, r25	; 0x0c
    270c:	ad 87       	std	Y+13, r26	; 0x0d
    270e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2710:	6b 85       	ldd	r22, Y+11	; 0x0b
    2712:	7c 85       	ldd	r23, Y+12	; 0x0c
    2714:	8d 85       	ldd	r24, Y+13	; 0x0d
    2716:	9e 85       	ldd	r25, Y+14	; 0x0e
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	4a e7       	ldi	r20, 0x7A	; 122
    271e:	55 e4       	ldi	r21, 0x45	; 69
    2720:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	8f 83       	std	Y+7, r24	; 0x07
    272a:	98 87       	std	Y+8, r25	; 0x08
    272c:	a9 87       	std	Y+9, r26	; 0x09
    272e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2730:	6f 81       	ldd	r22, Y+7	; 0x07
    2732:	78 85       	ldd	r23, Y+8	; 0x08
    2734:	89 85       	ldd	r24, Y+9	; 0x09
    2736:	9a 85       	ldd	r25, Y+10	; 0x0a
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	40 e8       	ldi	r20, 0x80	; 128
    273e:	5f e3       	ldi	r21, 0x3F	; 63
    2740:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    2744:	88 23       	and	r24, r24
    2746:	2c f4       	brge	.+10     	; 0x2752 <Keypad_enuGetPressedKey+0x11e>
		__ticks = 1;
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	9e 83       	std	Y+6, r25	; 0x06
    274e:	8d 83       	std	Y+5, r24	; 0x05
    2750:	3f c0       	rjmp	.+126    	; 0x27d0 <Keypad_enuGetPressedKey+0x19c>
	else if (__tmp > 65535)
    2752:	6f 81       	ldd	r22, Y+7	; 0x07
    2754:	78 85       	ldd	r23, Y+8	; 0x08
    2756:	89 85       	ldd	r24, Y+9	; 0x09
    2758:	9a 85       	ldd	r25, Y+10	; 0x0a
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	3f ef       	ldi	r19, 0xFF	; 255
    275e:	4f e7       	ldi	r20, 0x7F	; 127
    2760:	57 e4       	ldi	r21, 0x47	; 71
    2762:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    2766:	18 16       	cp	r1, r24
    2768:	4c f5       	brge	.+82     	; 0x27bc <Keypad_enuGetPressedKey+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    276a:	6b 85       	ldd	r22, Y+11	; 0x0b
    276c:	7c 85       	ldd	r23, Y+12	; 0x0c
    276e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2770:	9e 85       	ldd	r25, Y+14	; 0x0e
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	40 e2       	ldi	r20, 0x20	; 32
    2778:	51 e4       	ldi	r21, 0x41	; 65
    277a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	bc 01       	movw	r22, r24
    2784:	cd 01       	movw	r24, r26
    2786:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	9e 83       	std	Y+6, r25	; 0x06
    2790:	8d 83       	std	Y+5, r24	; 0x05
    2792:	0f c0       	rjmp	.+30     	; 0x27b2 <Keypad_enuGetPressedKey+0x17e>
    2794:	80 e9       	ldi	r24, 0x90	; 144
    2796:	91 e0       	ldi	r25, 0x01	; 1
    2798:	9c 83       	std	Y+4, r25	; 0x04
    279a:	8b 83       	std	Y+3, r24	; 0x03
    279c:	8b 81       	ldd	r24, Y+3	; 0x03
    279e:	9c 81       	ldd	r25, Y+4	; 0x04
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	f1 f7       	brne	.-4      	; 0x27a0 <Keypad_enuGetPressedKey+0x16c>
    27a4:	9c 83       	std	Y+4, r25	; 0x04
    27a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a8:	8d 81       	ldd	r24, Y+5	; 0x05
    27aa:	9e 81       	ldd	r25, Y+6	; 0x06
    27ac:	01 97       	sbiw	r24, 0x01	; 1
    27ae:	9e 83       	std	Y+6, r25	; 0x06
    27b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b2:	8d 81       	ldd	r24, Y+5	; 0x05
    27b4:	9e 81       	ldd	r25, Y+6	; 0x06
    27b6:	00 97       	sbiw	r24, 0x00	; 0
    27b8:	69 f7       	brne	.-38     	; 0x2794 <Keypad_enuGetPressedKey+0x160>
    27ba:	14 c0       	rjmp	.+40     	; 0x27e4 <Keypad_enuGetPressedKey+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27bc:	6f 81       	ldd	r22, Y+7	; 0x07
    27be:	78 85       	ldd	r23, Y+8	; 0x08
    27c0:	89 85       	ldd	r24, Y+9	; 0x09
    27c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	9e 83       	std	Y+6, r25	; 0x06
    27ce:	8d 83       	std	Y+5, r24	; 0x05
    27d0:	8d 81       	ldd	r24, Y+5	; 0x05
    27d2:	9e 81       	ldd	r25, Y+6	; 0x06
    27d4:	9a 83       	std	Y+2, r25	; 0x02
    27d6:	89 83       	std	Y+1, r24	; 0x01
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	9a 81       	ldd	r25, Y+2	; 0x02
    27dc:	01 97       	sbiw	r24, 0x01	; 1
    27de:	f1 f7       	brne	.-4      	; 0x27dc <Keypad_enuGetPressedKey+0x1a8>
    27e0:	9a 83       	std	Y+2, r25	; 0x02
    27e2:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(10);
				DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    27e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    27e6:	28 2f       	mov	r18, r24
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	ce 01       	movw	r24, r28
    27ec:	4a 96       	adiw	r24, 0x1a	; 26
    27ee:	fc 01       	movw	r30, r24
    27f0:	e2 0f       	add	r30, r18
    27f2:	f3 1f       	adc	r31, r19
    27f4:	40 81       	ld	r20, Z
    27f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    27f8:	28 2f       	mov	r18, r24
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	ce 01       	movw	r24, r28
    27fe:	4e 96       	adiw	r24, 0x1e	; 30
    2800:	fc 01       	movw	r30, r24
    2802:	e2 0f       	add	r30, r18
    2804:	f3 1f       	adc	r31, r19
    2806:	90 81       	ld	r25, Z
    2808:	9e 01       	movw	r18, r28
    280a:	2e 5d       	subi	r18, 0xDE	; 222
    280c:	3f 4f       	sbci	r19, 0xFF	; 255
    280e:	84 2f       	mov	r24, r20
    2810:	69 2f       	mov	r22, r25
    2812:	a9 01       	movw	r20, r18
    2814:	0e 94 0f 09 	call	0x121e	; 0x121e <DIO_enuGetPinValue>
				if (! Local_u8PinValue)
    2818:	8a a1       	ldd	r24, Y+34	; 0x22
    281a:	88 23       	and	r24, r24
    281c:	09 f0       	breq	.+2      	; 0x2820 <Keypad_enuGetPressedKey+0x1ec>
    281e:	57 c0       	rjmp	.+174    	; 0x28ce <Keypad_enuGetPressedKey+0x29a>
    2820:	1a c0       	rjmp	.+52     	; 0x2856 <Keypad_enuGetPressedKey+0x222>
				{
					while (! Local_u8PinValue)
						DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    2822:	8f 85       	ldd	r24, Y+15	; 0x0f
    2824:	28 2f       	mov	r18, r24
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	ce 01       	movw	r24, r28
    282a:	4a 96       	adiw	r24, 0x1a	; 26
    282c:	fc 01       	movw	r30, r24
    282e:	e2 0f       	add	r30, r18
    2830:	f3 1f       	adc	r31, r19
    2832:	40 81       	ld	r20, Z
    2834:	8f 85       	ldd	r24, Y+15	; 0x0f
    2836:	28 2f       	mov	r18, r24
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	ce 01       	movw	r24, r28
    283c:	4e 96       	adiw	r24, 0x1e	; 30
    283e:	fc 01       	movw	r30, r24
    2840:	e2 0f       	add	r30, r18
    2842:	f3 1f       	adc	r31, r19
    2844:	90 81       	ld	r25, Z
    2846:	9e 01       	movw	r18, r28
    2848:	2e 5d       	subi	r18, 0xDE	; 222
    284a:	3f 4f       	sbci	r19, 0xFF	; 255
    284c:	84 2f       	mov	r24, r20
    284e:	69 2f       	mov	r22, r25
    2850:	a9 01       	movw	r20, r18
    2852:	0e 94 0f 09 	call	0x121e	; 0x121e <DIO_enuGetPinValue>
			{
				_delay_ms(10);
				DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
				if (! Local_u8PinValue)
				{
					while (! Local_u8PinValue)
    2856:	8a a1       	ldd	r24, Y+34	; 0x22
    2858:	88 23       	and	r24, r24
    285a:	19 f3       	breq	.-58     	; 0x2822 <Keypad_enuGetPressedKey+0x1ee>
						DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);

					u8 Local_Au8Values[ROW_NUM][COL_NUM] = KEYPAD_VALUES;
    285c:	ce 01       	movw	r24, r28
    285e:	83 96       	adiw	r24, 0x23	; 35
    2860:	9f ab       	std	Y+55, r25	; 0x37
    2862:	8e ab       	std	Y+54, r24	; 0x36
    2864:	e8 e7       	ldi	r30, 0x78	; 120
    2866:	f1 e0       	ldi	r31, 0x01	; 1
    2868:	f9 af       	std	Y+57, r31	; 0x39
    286a:	e8 af       	std	Y+56, r30	; 0x38
    286c:	f0 e1       	ldi	r31, 0x10	; 16
    286e:	fa af       	std	Y+58, r31	; 0x3a
    2870:	e8 ad       	ldd	r30, Y+56	; 0x38
    2872:	f9 ad       	ldd	r31, Y+57	; 0x39
    2874:	00 80       	ld	r0, Z
    2876:	88 ad       	ldd	r24, Y+56	; 0x38
    2878:	99 ad       	ldd	r25, Y+57	; 0x39
    287a:	01 96       	adiw	r24, 0x01	; 1
    287c:	99 af       	std	Y+57, r25	; 0x39
    287e:	88 af       	std	Y+56, r24	; 0x38
    2880:	ee a9       	ldd	r30, Y+54	; 0x36
    2882:	ff a9       	ldd	r31, Y+55	; 0x37
    2884:	00 82       	st	Z, r0
    2886:	8e a9       	ldd	r24, Y+54	; 0x36
    2888:	9f a9       	ldd	r25, Y+55	; 0x37
    288a:	01 96       	adiw	r24, 0x01	; 1
    288c:	9f ab       	std	Y+55, r25	; 0x37
    288e:	8e ab       	std	Y+54, r24	; 0x36
    2890:	9a ad       	ldd	r25, Y+58	; 0x3a
    2892:	91 50       	subi	r25, 0x01	; 1
    2894:	9a af       	std	Y+58, r25	; 0x3a
    2896:	ea ad       	ldd	r30, Y+58	; 0x3a
    2898:	ee 23       	and	r30, r30
    289a:	51 f7       	brne	.-44     	; 0x2870 <Keypad_enuGetPressedKey+0x23c>
					*Copy_pu8KeyValue = Local_Au8Values[Local_u8RowIter][Local_u8ColIter];
    289c:	8f 85       	ldd	r24, Y+15	; 0x0f
    289e:	28 2f       	mov	r18, r24
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	88 89       	ldd	r24, Y+16	; 0x10
    28a4:	48 2f       	mov	r20, r24
    28a6:	50 e0       	ldi	r21, 0x00	; 0
    28a8:	22 0f       	add	r18, r18
    28aa:	33 1f       	adc	r19, r19
    28ac:	22 0f       	add	r18, r18
    28ae:	33 1f       	adc	r19, r19
    28b0:	ce 01       	movw	r24, r28
    28b2:	01 96       	adiw	r24, 0x01	; 1
    28b4:	82 0f       	add	r24, r18
    28b6:	93 1f       	adc	r25, r19
    28b8:	84 0f       	add	r24, r20
    28ba:	95 1f       	adc	r25, r21
    28bc:	fc 01       	movw	r30, r24
    28be:	b2 96       	adiw	r30, 0x22	; 34
    28c0:	80 81       	ld	r24, Z
    28c2:	eb a9       	ldd	r30, Y+51	; 0x33
    28c4:	fc a9       	ldd	r31, Y+52	; 0x34
    28c6:	80 83       	st	Z, r24
					return ES_OK;
    28c8:	f1 e0       	ldi	r31, 0x01	; 1
    28ca:	fd ab       	std	Y+53, r31	; 0x35
    28cc:	2b c0       	rjmp	.+86     	; 0x2924 <Keypad_enuGetPressedKey+0x2f0>

	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;
	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
	{
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8LOW);
		for (Local_u8RowIter=0; Local_u8RowIter < ROW_NUM ; Local_u8RowIter++)
    28ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    28d0:	8f 5f       	subi	r24, 0xFF	; 255
    28d2:	8f 87       	std	Y+15, r24	; 0x0f
    28d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    28d6:	84 30       	cpi	r24, 0x04	; 4
    28d8:	08 f4       	brcc	.+2      	; 0x28dc <Keypad_enuGetPressedKey+0x2a8>
    28da:	f4 ce       	rjmp	.-536    	; 0x26c4 <Keypad_enuGetPressedKey+0x90>
					*Copy_pu8KeyValue = Local_Au8Values[Local_u8RowIter][Local_u8ColIter];
					return ES_OK;
				}
			}
		}
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8HIGH);
    28dc:	88 89       	ldd	r24, Y+16	; 0x10
    28de:	28 2f       	mov	r18, r24
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	ce 01       	movw	r24, r28
    28e4:	42 96       	adiw	r24, 0x12	; 18
    28e6:	fc 01       	movw	r30, r24
    28e8:	e2 0f       	add	r30, r18
    28ea:	f3 1f       	adc	r31, r19
    28ec:	40 81       	ld	r20, Z
    28ee:	88 89       	ldd	r24, Y+16	; 0x10
    28f0:	28 2f       	mov	r18, r24
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	ce 01       	movw	r24, r28
    28f6:	46 96       	adiw	r24, 0x16	; 22
    28f8:	fc 01       	movw	r30, r24
    28fa:	e2 0f       	add	r30, r18
    28fc:	f3 1f       	adc	r31, r19
    28fe:	90 81       	ld	r25, Z
    2900:	84 2f       	mov	r24, r20
    2902:	69 2f       	mov	r22, r25
    2904:	41 e0       	ldi	r20, 0x01	; 1
    2906:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_enuSetPinValue>

	u8 Local_Au8RowPorts [ROW_NUM] = {R1_PORT,R2_PORT,R3_PORT,R4_PORT};
	u8 Local_Au8RowPins  [ROW_NUM] = {R1_PIN, R2_PIN, R3_PIN, R4_PIN};

	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;
	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
    290a:	88 89       	ldd	r24, Y+16	; 0x10
    290c:	8f 5f       	subi	r24, 0xFF	; 255
    290e:	88 8b       	std	Y+16, r24	; 0x10
    2910:	88 89       	ldd	r24, Y+16	; 0x10
    2912:	84 30       	cpi	r24, 0x04	; 4
    2914:	08 f4       	brcc	.+2      	; 0x2918 <Keypad_enuGetPressedKey+0x2e4>
    2916:	bd ce       	rjmp	.-646    	; 0x2692 <Keypad_enuGetPressedKey+0x5e>
				}
			}
		}
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8HIGH);
	}
	*Copy_pu8KeyValue = KEYPAD_NOT_PRESSED;
    2918:	eb a9       	ldd	r30, Y+51	; 0x33
    291a:	fc a9       	ldd	r31, Y+52	; 0x34
    291c:	8f ef       	ldi	r24, 0xFF	; 255
    291e:	80 83       	st	Z, r24
	return Local_enuErrorState;
    2920:	89 89       	ldd	r24, Y+17	; 0x11
    2922:	8d ab       	std	Y+53, r24	; 0x35
    2924:	8d a9       	ldd	r24, Y+53	; 0x35
}
    2926:	ea 96       	adiw	r28, 0x3a	; 58
    2928:	0f b6       	in	r0, 0x3f	; 63
    292a:	f8 94       	cli
    292c:	de bf       	out	0x3e, r29	; 62
    292e:	0f be       	out	0x3f, r0	; 63
    2930:	cd bf       	out	0x3d, r28	; 61
    2932:	cf 91       	pop	r28
    2934:	df 91       	pop	r29
    2936:	08 95       	ret

00002938 <main>:
int stringToInt(const char* str);
void IntToString (char* str, int number );
u8 strComp(const char * str1 , const char * str2);

int main()
{
    2938:	df 93       	push	r29
    293a:	cf 93       	push	r28
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
    2940:	c7 54       	subi	r28, 0x47	; 71
    2942:	d0 40       	sbci	r29, 0x00	; 0
    2944:	0f b6       	in	r0, 0x3f	; 63
    2946:	f8 94       	cli
    2948:	de bf       	out	0x3e, r29	; 62
    294a:	0f be       	out	0x3f, r0	; 63
    294c:	cd bf       	out	0x3d, r28	; 61
	int i=0,j=0;
    294e:	1f a2       	std	Y+39, r1	; 0x27
    2950:	1e a2       	std	Y+38, r1	; 0x26
    2952:	1d a2       	std	Y+37, r1	; 0x25
    2954:	1c a2       	std	Y+36, r1	; 0x24

	u8 key,k;
	int Result;
	char buffer[15];
	LCD_enuInit();
    2956:	0e 94 ad 09 	call	0x135a	; 0x135a <LCD_enuInit>
	Keypad_enuInit();
    295a:	0e 94 bf 12 	call	0x257e	; 0x257e <Keypad_enuInit>
	LCD_enuSendString("welcome to cal.");
    295e:	80 e6       	ldi	r24, 0x60	; 96
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_enuSendString>
	LCD_enuSendCommand(FORCE_CURSOR_START_SECOND_LINE);
    2966:	80 ec       	ldi	r24, 0xC0	; 192
    2968:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_enuSendCommand>
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	aa e7       	ldi	r26, 0x7A	; 122
    2972:	b4 e4       	ldi	r27, 0x44	; 68
    2974:	89 8f       	std	Y+25, r24	; 0x19
    2976:	9a 8f       	std	Y+26, r25	; 0x1a
    2978:	ab 8f       	std	Y+27, r26	; 0x1b
    297a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    297c:	69 8d       	ldd	r22, Y+25	; 0x19
    297e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2980:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2982:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	4a e7       	ldi	r20, 0x7A	; 122
    298a:	55 e4       	ldi	r21, 0x45	; 69
    298c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	8d 8b       	std	Y+21, r24	; 0x15
    2996:	9e 8b       	std	Y+22, r25	; 0x16
    2998:	af 8b       	std	Y+23, r26	; 0x17
    299a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    299c:	6d 89       	ldd	r22, Y+21	; 0x15
    299e:	7e 89       	ldd	r23, Y+22	; 0x16
    29a0:	8f 89       	ldd	r24, Y+23	; 0x17
    29a2:	98 8d       	ldd	r25, Y+24	; 0x18
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	40 e8       	ldi	r20, 0x80	; 128
    29aa:	5f e3       	ldi	r21, 0x3F	; 63
    29ac:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    29b0:	88 23       	and	r24, r24
    29b2:	2c f4       	brge	.+10     	; 0x29be <main+0x86>
		__ticks = 1;
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	9c 8b       	std	Y+20, r25	; 0x14
    29ba:	8b 8b       	std	Y+19, r24	; 0x13
    29bc:	3f c0       	rjmp	.+126    	; 0x2a3c <main+0x104>
	else if (__tmp > 65535)
    29be:	6d 89       	ldd	r22, Y+21	; 0x15
    29c0:	7e 89       	ldd	r23, Y+22	; 0x16
    29c2:	8f 89       	ldd	r24, Y+23	; 0x17
    29c4:	98 8d       	ldd	r25, Y+24	; 0x18
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	3f ef       	ldi	r19, 0xFF	; 255
    29ca:	4f e7       	ldi	r20, 0x7F	; 127
    29cc:	57 e4       	ldi	r21, 0x47	; 71
    29ce:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    29d2:	18 16       	cp	r1, r24
    29d4:	4c f5       	brge	.+82     	; 0x2a28 <main+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d6:	69 8d       	ldd	r22, Y+25	; 0x19
    29d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	40 e2       	ldi	r20, 0x20	; 32
    29e4:	51 e4       	ldi	r21, 0x41	; 65
    29e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	bc 01       	movw	r22, r24
    29f0:	cd 01       	movw	r24, r26
    29f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	9c 8b       	std	Y+20, r25	; 0x14
    29fc:	8b 8b       	std	Y+19, r24	; 0x13
    29fe:	0f c0       	rjmp	.+30     	; 0x2a1e <main+0xe6>
    2a00:	80 e9       	ldi	r24, 0x90	; 144
    2a02:	91 e0       	ldi	r25, 0x01	; 1
    2a04:	9a 8b       	std	Y+18, r25	; 0x12
    2a06:	89 8b       	std	Y+17, r24	; 0x11
    2a08:	89 89       	ldd	r24, Y+17	; 0x11
    2a0a:	9a 89       	ldd	r25, Y+18	; 0x12
    2a0c:	01 97       	sbiw	r24, 0x01	; 1
    2a0e:	f1 f7       	brne	.-4      	; 0x2a0c <main+0xd4>
    2a10:	9a 8b       	std	Y+18, r25	; 0x12
    2a12:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a14:	8b 89       	ldd	r24, Y+19	; 0x13
    2a16:	9c 89       	ldd	r25, Y+20	; 0x14
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	9c 8b       	std	Y+20, r25	; 0x14
    2a1c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a20:	9c 89       	ldd	r25, Y+20	; 0x14
    2a22:	00 97       	sbiw	r24, 0x00	; 0
    2a24:	69 f7       	brne	.-38     	; 0x2a00 <main+0xc8>
    2a26:	14 c0       	rjmp	.+40     	; 0x2a50 <main+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a28:	6d 89       	ldd	r22, Y+21	; 0x15
    2a2a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a2c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a2e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	9c 8b       	std	Y+20, r25	; 0x14
    2a3a:	8b 8b       	std	Y+19, r24	; 0x13
    2a3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a40:	98 8b       	std	Y+16, r25	; 0x10
    2a42:	8f 87       	std	Y+15, r24	; 0x0f
    2a44:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a46:	98 89       	ldd	r25, Y+16	; 0x10
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	f1 f7       	brne	.-4      	; 0x2a48 <main+0x110>
    2a4c:	98 8b       	std	Y+16, r25	; 0x10
    2a4e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	while (1){
		LCD_enuSendCommand(CLEAR_DISPLAY);
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_enuSendCommand>
    2a56:	32 c0       	rjmp	.+100    	; 0x2abc <main+0x184>
		char num1[7],num2[7];
		while(i < 7){
			Keypad_enuGetPressedKey(&key);
    2a58:	ce 01       	movw	r24, r28
    2a5a:	88 96       	adiw	r24, 0x28	; 40
    2a5c:	0e 94 1a 13 	call	0x2634	; 0x2634 <Keypad_enuGetPressedKey>
			if (key != KEYPAD_NOT_PRESSED){
    2a60:	88 a5       	ldd	r24, Y+40	; 0x28
    2a62:	8f 3f       	cpi	r24, 0xFF	; 255
    2a64:	59 f1       	breq	.+86     	; 0x2abc <main+0x184>
				if (key == '+' || key =='-' || key == '/' || key == '*'){
    2a66:	88 a5       	ldd	r24, Y+40	; 0x28
    2a68:	8b 32       	cpi	r24, 0x2B	; 43
    2a6a:	49 f0       	breq	.+18     	; 0x2a7e <main+0x146>
    2a6c:	88 a5       	ldd	r24, Y+40	; 0x28
    2a6e:	8d 32       	cpi	r24, 0x2D	; 45
    2a70:	31 f0       	breq	.+12     	; 0x2a7e <main+0x146>
    2a72:	88 a5       	ldd	r24, Y+40	; 0x28
    2a74:	8f 32       	cpi	r24, 0x2F	; 47
    2a76:	19 f0       	breq	.+6      	; 0x2a7e <main+0x146>
    2a78:	88 a5       	ldd	r24, Y+40	; 0x28
    2a7a:	8a 32       	cpi	r24, 0x2A	; 42
    2a7c:	71 f4       	brne	.+28     	; 0x2a9a <main+0x162>
					k = key;
    2a7e:	88 a5       	ldd	r24, Y+40	; 0x28
    2a80:	8b a3       	std	Y+35, r24	; 0x23
					LCD_enuSendData(k);
    2a82:	8b a1       	ldd	r24, Y+35	; 0x23
    2a84:	0e 94 cd 0b 	call	0x179a	; 0x179a <LCD_enuSendData>
					num1[i] = '\0';
    2a88:	2e a1       	ldd	r18, Y+38	; 0x26
    2a8a:	3f a1       	ldd	r19, Y+39	; 0x27
    2a8c:	ce 01       	movw	r24, r28
    2a8e:	c8 96       	adiw	r24, 0x38	; 56
    2a90:	fc 01       	movw	r30, r24
    2a92:	e2 0f       	add	r30, r18
    2a94:	f3 1f       	adc	r31, r19
    2a96:	10 82       	st	Z, r1
    2a98:	3e c0       	rjmp	.+124    	; 0x2b16 <main+0x1de>
					break;
				}
				num1[i++] = key;
    2a9a:	2e a1       	ldd	r18, Y+38	; 0x26
    2a9c:	3f a1       	ldd	r19, Y+39	; 0x27
    2a9e:	48 a5       	ldd	r20, Y+40	; 0x28
    2aa0:	ce 01       	movw	r24, r28
    2aa2:	c8 96       	adiw	r24, 0x38	; 56
    2aa4:	fc 01       	movw	r30, r24
    2aa6:	e2 0f       	add	r30, r18
    2aa8:	f3 1f       	adc	r31, r19
    2aaa:	40 83       	st	Z, r20
    2aac:	8e a1       	ldd	r24, Y+38	; 0x26
    2aae:	9f a1       	ldd	r25, Y+39	; 0x27
    2ab0:	01 96       	adiw	r24, 0x01	; 1
    2ab2:	9f a3       	std	Y+39, r25	; 0x27
    2ab4:	8e a3       	std	Y+38, r24	; 0x26


				LCD_enuSendData(key);
    2ab6:	88 a5       	ldd	r24, Y+40	; 0x28
    2ab8:	0e 94 cd 0b 	call	0x179a	; 0x179a <LCD_enuSendData>
	LCD_enuSendCommand(FORCE_CURSOR_START_SECOND_LINE);
	_delay_ms(1000);
	while (1){
		LCD_enuSendCommand(CLEAR_DISPLAY);
		char num1[7],num2[7];
		while(i < 7){
    2abc:	8e a1       	ldd	r24, Y+38	; 0x26
    2abe:	9f a1       	ldd	r25, Y+39	; 0x27
    2ac0:	87 30       	cpi	r24, 0x07	; 7
    2ac2:	91 05       	cpc	r25, r1
    2ac4:	4c f2       	brlt	.-110    	; 0x2a58 <main+0x120>
    2ac6:	27 c0       	rjmp	.+78     	; 0x2b16 <main+0x1de>
		}



		while(j < 7 ){
			Keypad_enuGetPressedKey(&key);
    2ac8:	ce 01       	movw	r24, r28
    2aca:	88 96       	adiw	r24, 0x28	; 40
    2acc:	0e 94 1a 13 	call	0x2634	; 0x2634 <Keypad_enuGetPressedKey>
			if (key != KEYPAD_NOT_PRESSED){
    2ad0:	88 a5       	ldd	r24, Y+40	; 0x28
    2ad2:	8f 3f       	cpi	r24, 0xFF	; 255
    2ad4:	01 f1       	breq	.+64     	; 0x2b16 <main+0x1de>
				if (key == '='){
    2ad6:	88 a5       	ldd	r24, Y+40	; 0x28
    2ad8:	8d 33       	cpi	r24, 0x3D	; 61
    2ada:	61 f4       	brne	.+24     	; 0x2af4 <main+0x1bc>
					LCD_enuSendData(key);
    2adc:	88 a5       	ldd	r24, Y+40	; 0x28
    2ade:	0e 94 cd 0b 	call	0x179a	; 0x179a <LCD_enuSendData>
					num2[j] = '\0';
    2ae2:	2c a1       	ldd	r18, Y+36	; 0x24
    2ae4:	3d a1       	ldd	r19, Y+37	; 0x25
    2ae6:	ce 01       	movw	r24, r28
    2ae8:	cf 96       	adiw	r24, 0x3f	; 63
    2aea:	fc 01       	movw	r30, r24
    2aec:	e2 0f       	add	r30, r18
    2aee:	f3 1f       	adc	r31, r19
    2af0:	10 82       	st	Z, r1
    2af2:	16 c0       	rjmp	.+44     	; 0x2b20 <main+0x1e8>
					break;
				}
				num2[j++] = key;
    2af4:	2c a1       	ldd	r18, Y+36	; 0x24
    2af6:	3d a1       	ldd	r19, Y+37	; 0x25
    2af8:	48 a5       	ldd	r20, Y+40	; 0x28
    2afa:	ce 01       	movw	r24, r28
    2afc:	cf 96       	adiw	r24, 0x3f	; 63
    2afe:	fc 01       	movw	r30, r24
    2b00:	e2 0f       	add	r30, r18
    2b02:	f3 1f       	adc	r31, r19
    2b04:	40 83       	st	Z, r20
    2b06:	8c a1       	ldd	r24, Y+36	; 0x24
    2b08:	9d a1       	ldd	r25, Y+37	; 0x25
    2b0a:	01 96       	adiw	r24, 0x01	; 1
    2b0c:	9d a3       	std	Y+37, r25	; 0x25
    2b0e:	8c a3       	std	Y+36, r24	; 0x24
				LCD_enuSendData(key);
    2b10:	88 a5       	ldd	r24, Y+40	; 0x28
    2b12:	0e 94 cd 0b 	call	0x179a	; 0x179a <LCD_enuSendData>

		}



		while(j < 7 ){
    2b16:	8c a1       	ldd	r24, Y+36	; 0x24
    2b18:	9d a1       	ldd	r25, Y+37	; 0x25
    2b1a:	87 30       	cpi	r24, 0x07	; 7
    2b1c:	91 05       	cpc	r25, r1
    2b1e:	a4 f2       	brlt	.-88     	; 0x2ac8 <main+0x190>
				LCD_enuSendData(key);
			}

		}

		int num_1 = stringToInt(num1);
    2b20:	ce 01       	movw	r24, r28
    2b22:	c8 96       	adiw	r24, 0x38	; 56
    2b24:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <stringToInt>
    2b28:	98 a3       	std	Y+32, r25	; 0x20
    2b2a:	8f 8f       	std	Y+31, r24	; 0x1f
		int num_2 = stringToInt(num2);
    2b2c:	ce 01       	movw	r24, r28
    2b2e:	cf 96       	adiw	r24, 0x3f	; 63
    2b30:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <stringToInt>
    2b34:	9e 8f       	std	Y+30, r25	; 0x1e
    2b36:	8d 8f       	std	Y+29, r24	; 0x1d
		switch (k){
    2b38:	8b a1       	ldd	r24, Y+35	; 0x23
    2b3a:	28 2f       	mov	r18, r24
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	28 96       	adiw	r28, 0x08	; 8
    2b40:	3f af       	std	Y+63, r19	; 0x3f
    2b42:	2e af       	std	Y+62, r18	; 0x3e
    2b44:	28 97       	sbiw	r28, 0x08	; 8
    2b46:	28 96       	adiw	r28, 0x08	; 8
    2b48:	4e ad       	ldd	r20, Y+62	; 0x3e
    2b4a:	5f ad       	ldd	r21, Y+63	; 0x3f
    2b4c:	28 97       	sbiw	r28, 0x08	; 8
    2b4e:	4b 32       	cpi	r20, 0x2B	; 43
    2b50:	51 05       	cpc	r21, r1
    2b52:	f1 f0       	breq	.+60     	; 0x2b90 <main+0x258>
    2b54:	28 96       	adiw	r28, 0x08	; 8
    2b56:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b58:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b5a:	28 97       	sbiw	r28, 0x08	; 8
    2b5c:	8c 32       	cpi	r24, 0x2C	; 44
    2b5e:	91 05       	cpc	r25, r1
    2b60:	44 f4       	brge	.+16     	; 0x2b72 <main+0x23a>
    2b62:	28 96       	adiw	r28, 0x08	; 8
    2b64:	2e ad       	ldd	r18, Y+62	; 0x3e
    2b66:	3f ad       	ldd	r19, Y+63	; 0x3f
    2b68:	28 97       	sbiw	r28, 0x08	; 8
    2b6a:	2a 32       	cpi	r18, 0x2A	; 42
    2b6c:	31 05       	cpc	r19, r1
    2b6e:	11 f1       	breq	.+68     	; 0x2bb4 <main+0x27c>
    2b70:	3a c0       	rjmp	.+116    	; 0x2be6 <main+0x2ae>
    2b72:	28 96       	adiw	r28, 0x08	; 8
    2b74:	4e ad       	ldd	r20, Y+62	; 0x3e
    2b76:	5f ad       	ldd	r21, Y+63	; 0x3f
    2b78:	28 97       	sbiw	r28, 0x08	; 8
    2b7a:	4d 32       	cpi	r20, 0x2D	; 45
    2b7c:	51 05       	cpc	r21, r1
    2b7e:	89 f0       	breq	.+34     	; 0x2ba2 <main+0x26a>
    2b80:	28 96       	adiw	r28, 0x08	; 8
    2b82:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b84:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b86:	28 97       	sbiw	r28, 0x08	; 8
    2b88:	8f 32       	cpi	r24, 0x2F	; 47
    2b8a:	91 05       	cpc	r25, r1
    2b8c:	11 f1       	breq	.+68     	; 0x2bd2 <main+0x29a>
    2b8e:	2b c0       	rjmp	.+86     	; 0x2be6 <main+0x2ae>
		case '+':
			Result = num_1 + num_2;
    2b90:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b92:	98 a1       	ldd	r25, Y+32	; 0x20
    2b94:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2b96:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2b98:	82 0f       	add	r24, r18
    2b9a:	93 1f       	adc	r25, r19
    2b9c:	9a a3       	std	Y+34, r25	; 0x22
    2b9e:	89 a3       	std	Y+33, r24	; 0x21
    2ba0:	22 c0       	rjmp	.+68     	; 0x2be6 <main+0x2ae>
			break;
		case '-':
			Result = num_1 - num_2;
    2ba2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ba4:	98 a1       	ldd	r25, Y+32	; 0x20
    2ba6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2ba8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2baa:	82 1b       	sub	r24, r18
    2bac:	93 0b       	sbc	r25, r19
    2bae:	9a a3       	std	Y+34, r25	; 0x22
    2bb0:	89 a3       	std	Y+33, r24	; 0x21
    2bb2:	19 c0       	rjmp	.+50     	; 0x2be6 <main+0x2ae>
			break;
		case '*':
			Result = num_1 * num_2;
    2bb4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bb6:	98 a1       	ldd	r25, Y+32	; 0x20
    2bb8:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2bba:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2bbc:	ac 01       	movw	r20, r24
    2bbe:	42 9f       	mul	r20, r18
    2bc0:	c0 01       	movw	r24, r0
    2bc2:	43 9f       	mul	r20, r19
    2bc4:	90 0d       	add	r25, r0
    2bc6:	52 9f       	mul	r21, r18
    2bc8:	90 0d       	add	r25, r0
    2bca:	11 24       	eor	r1, r1
    2bcc:	9a a3       	std	Y+34, r25	; 0x22
    2bce:	89 a3       	std	Y+33, r24	; 0x21
    2bd0:	0a c0       	rjmp	.+20     	; 0x2be6 <main+0x2ae>
			break;
		case '/':
			Result = num_1 / num_2;
    2bd2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bd4:	98 a1       	ldd	r25, Y+32	; 0x20
    2bd6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2bd8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2bda:	b9 01       	movw	r22, r18
    2bdc:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__divmodhi4>
    2be0:	cb 01       	movw	r24, r22
    2be2:	9a a3       	std	Y+34, r25	; 0x22
    2be4:	89 a3       	std	Y+33, r24	; 0x21
			break;



		}
		IntToString(buffer,Result);
    2be6:	ce 01       	movw	r24, r28
    2be8:	89 96       	adiw	r24, 0x29	; 41
    2bea:	29 a1       	ldd	r18, Y+33	; 0x21
    2bec:	3a a1       	ldd	r19, Y+34	; 0x22
    2bee:	b9 01       	movw	r22, r18
    2bf0:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <IntToString>
		LCD_enuGoToPosition(2,1);
    2bf4:	82 e0       	ldi	r24, 0x02	; 2
    2bf6:	61 e0       	ldi	r22, 0x01	; 1
    2bf8:	0e 94 49 0c 	call	0x1892	; 0x1892 <LCD_enuGoToPosition>
		LCD_enuDisplayInt(Result);
    2bfc:	89 a1       	ldd	r24, Y+33	; 0x21
    2bfe:	9a a1       	ldd	r25, Y+34	; 0x22
    2c00:	aa 27       	eor	r26, r26
    2c02:	97 fd       	sbrc	r25, 7
    2c04:	a0 95       	com	r26
    2c06:	ba 2f       	mov	r27, r26
    2c08:	bc 01       	movw	r22, r24
    2c0a:	cd 01       	movw	r24, r26
    2c0c:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_enuDisplayInt>
    2c10:	80 e0       	ldi	r24, 0x00	; 0
    2c12:	90 e4       	ldi	r25, 0x40	; 64
    2c14:	ac e9       	ldi	r26, 0x9C	; 156
    2c16:	b5 e4       	ldi	r27, 0x45	; 69
    2c18:	8b 87       	std	Y+11, r24	; 0x0b
    2c1a:	9c 87       	std	Y+12, r25	; 0x0c
    2c1c:	ad 87       	std	Y+13, r26	; 0x0d
    2c1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c20:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c22:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	4a e7       	ldi	r20, 0x7A	; 122
    2c2e:	55 e4       	ldi	r21, 0x45	; 69
    2c30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	8f 83       	std	Y+7, r24	; 0x07
    2c3a:	98 87       	std	Y+8, r25	; 0x08
    2c3c:	a9 87       	std	Y+9, r26	; 0x09
    2c3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c40:	6f 81       	ldd	r22, Y+7	; 0x07
    2c42:	78 85       	ldd	r23, Y+8	; 0x08
    2c44:	89 85       	ldd	r24, Y+9	; 0x09
    2c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	40 e8       	ldi	r20, 0x80	; 128
    2c4e:	5f e3       	ldi	r21, 0x3F	; 63
    2c50:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    2c54:	88 23       	and	r24, r24
    2c56:	2c f4       	brge	.+10     	; 0x2c62 <main+0x32a>
		__ticks = 1;
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	9e 83       	std	Y+6, r25	; 0x06
    2c5e:	8d 83       	std	Y+5, r24	; 0x05
    2c60:	3f c0       	rjmp	.+126    	; 0x2ce0 <main+0x3a8>
	else if (__tmp > 65535)
    2c62:	6f 81       	ldd	r22, Y+7	; 0x07
    2c64:	78 85       	ldd	r23, Y+8	; 0x08
    2c66:	89 85       	ldd	r24, Y+9	; 0x09
    2c68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	3f ef       	ldi	r19, 0xFF	; 255
    2c6e:	4f e7       	ldi	r20, 0x7F	; 127
    2c70:	57 e4       	ldi	r21, 0x47	; 71
    2c72:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    2c76:	18 16       	cp	r1, r24
    2c78:	4c f5       	brge	.+82     	; 0x2ccc <main+0x394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c80:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	40 e2       	ldi	r20, 0x20	; 32
    2c88:	51 e4       	ldi	r21, 0x41	; 65
    2c8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	bc 01       	movw	r22, r24
    2c94:	cd 01       	movw	r24, r26
    2c96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	9e 83       	std	Y+6, r25	; 0x06
    2ca0:	8d 83       	std	Y+5, r24	; 0x05
    2ca2:	0f c0       	rjmp	.+30     	; 0x2cc2 <main+0x38a>
    2ca4:	80 e9       	ldi	r24, 0x90	; 144
    2ca6:	91 e0       	ldi	r25, 0x01	; 1
    2ca8:	9c 83       	std	Y+4, r25	; 0x04
    2caa:	8b 83       	std	Y+3, r24	; 0x03
    2cac:	8b 81       	ldd	r24, Y+3	; 0x03
    2cae:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb0:	01 97       	sbiw	r24, 0x01	; 1
    2cb2:	f1 f7       	brne	.-4      	; 0x2cb0 <main+0x378>
    2cb4:	9c 83       	std	Y+4, r25	; 0x04
    2cb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cba:	9e 81       	ldd	r25, Y+6	; 0x06
    2cbc:	01 97       	sbiw	r24, 0x01	; 1
    2cbe:	9e 83       	std	Y+6, r25	; 0x06
    2cc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc6:	00 97       	sbiw	r24, 0x00	; 0
    2cc8:	69 f7       	brne	.-38     	; 0x2ca4 <main+0x36c>
    2cca:	c2 ce       	rjmp	.-636    	; 0x2a50 <main+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    2cce:	78 85       	ldd	r23, Y+8	; 0x08
    2cd0:	89 85       	ldd	r24, Y+9	; 0x09
    2cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	9e 83       	std	Y+6, r25	; 0x06
    2cde:	8d 83       	std	Y+5, r24	; 0x05
    2ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce4:	9a 83       	std	Y+2, r25	; 0x02
    2ce6:	89 83       	std	Y+1, r24	; 0x01
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	9a 81       	ldd	r25, Y+2	; 0x02
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	f1 f7       	brne	.-4      	; 0x2cec <main+0x3b4>
    2cf0:	9a 83       	std	Y+2, r25	; 0x02
    2cf2:	89 83       	std	Y+1, r24	; 0x01
    2cf4:	ad ce       	rjmp	.-678    	; 0x2a50 <main+0x118>

00002cf6 <strComp>:
	return 0;
}


u8 strComp(const char * str1 , const char * str2)
{
    2cf6:	df 93       	push	r29
    2cf8:	cf 93       	push	r28
    2cfa:	cd b7       	in	r28, 0x3d	; 61
    2cfc:	de b7       	in	r29, 0x3e	; 62
    2cfe:	27 97       	sbiw	r28, 0x07	; 7
    2d00:	0f b6       	in	r0, 0x3f	; 63
    2d02:	f8 94       	cli
    2d04:	de bf       	out	0x3e, r29	; 62
    2d06:	0f be       	out	0x3f, r0	; 63
    2d08:	cd bf       	out	0x3d, r28	; 61
    2d0a:	9c 83       	std	Y+4, r25	; 0x04
    2d0c:	8b 83       	std	Y+3, r24	; 0x03
    2d0e:	7e 83       	std	Y+6, r23	; 0x06
    2d10:	6d 83       	std	Y+5, r22	; 0x05
	int i=0;
    2d12:	1a 82       	std	Y+2, r1	; 0x02
    2d14:	19 82       	std	Y+1, r1	; 0x01
	for (i=0; str1[i] != '\0' ;i++)
    2d16:	1a 82       	std	Y+2, r1	; 0x02
    2d18:	19 82       	std	Y+1, r1	; 0x01
    2d1a:	19 c0       	rjmp	.+50     	; 0x2d4e <strComp+0x58>
	{
		if (str1[i]!=str2[i])
    2d1c:	29 81       	ldd	r18, Y+1	; 0x01
    2d1e:	3a 81       	ldd	r19, Y+2	; 0x02
    2d20:	8b 81       	ldd	r24, Y+3	; 0x03
    2d22:	9c 81       	ldd	r25, Y+4	; 0x04
    2d24:	fc 01       	movw	r30, r24
    2d26:	e2 0f       	add	r30, r18
    2d28:	f3 1f       	adc	r31, r19
    2d2a:	40 81       	ld	r20, Z
    2d2c:	29 81       	ldd	r18, Y+1	; 0x01
    2d2e:	3a 81       	ldd	r19, Y+2	; 0x02
    2d30:	8d 81       	ldd	r24, Y+5	; 0x05
    2d32:	9e 81       	ldd	r25, Y+6	; 0x06
    2d34:	fc 01       	movw	r30, r24
    2d36:	e2 0f       	add	r30, r18
    2d38:	f3 1f       	adc	r31, r19
    2d3a:	80 81       	ld	r24, Z
    2d3c:	48 17       	cp	r20, r24
    2d3e:	11 f0       	breq	.+4      	; 0x2d44 <strComp+0x4e>
			return 0;
    2d40:	1f 82       	std	Y+7, r1	; 0x07
    2d42:	1d c0       	rjmp	.+58     	; 0x2d7e <strComp+0x88>


u8 strComp(const char * str1 , const char * str2)
{
	int i=0;
	for (i=0; str1[i] != '\0' ;i++)
    2d44:	89 81       	ldd	r24, Y+1	; 0x01
    2d46:	9a 81       	ldd	r25, Y+2	; 0x02
    2d48:	01 96       	adiw	r24, 0x01	; 1
    2d4a:	9a 83       	std	Y+2, r25	; 0x02
    2d4c:	89 83       	std	Y+1, r24	; 0x01
    2d4e:	29 81       	ldd	r18, Y+1	; 0x01
    2d50:	3a 81       	ldd	r19, Y+2	; 0x02
    2d52:	8b 81       	ldd	r24, Y+3	; 0x03
    2d54:	9c 81       	ldd	r25, Y+4	; 0x04
    2d56:	fc 01       	movw	r30, r24
    2d58:	e2 0f       	add	r30, r18
    2d5a:	f3 1f       	adc	r31, r19
    2d5c:	80 81       	ld	r24, Z
    2d5e:	88 23       	and	r24, r24
    2d60:	e9 f6       	brne	.-70     	; 0x2d1c <strComp+0x26>
	{
		if (str1[i]!=str2[i])
			return 0;
	}
	if (str2[i] == '\0')
    2d62:	29 81       	ldd	r18, Y+1	; 0x01
    2d64:	3a 81       	ldd	r19, Y+2	; 0x02
    2d66:	8d 81       	ldd	r24, Y+5	; 0x05
    2d68:	9e 81       	ldd	r25, Y+6	; 0x06
    2d6a:	fc 01       	movw	r30, r24
    2d6c:	e2 0f       	add	r30, r18
    2d6e:	f3 1f       	adc	r31, r19
    2d70:	80 81       	ld	r24, Z
    2d72:	88 23       	and	r24, r24
    2d74:	19 f4       	brne	.+6      	; 0x2d7c <strComp+0x86>
		return 1;
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	8f 83       	std	Y+7, r24	; 0x07
    2d7a:	01 c0       	rjmp	.+2      	; 0x2d7e <strComp+0x88>
	return 0;
    2d7c:	1f 82       	std	Y+7, r1	; 0x07
    2d7e:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2d80:	27 96       	adiw	r28, 0x07	; 7
    2d82:	0f b6       	in	r0, 0x3f	; 63
    2d84:	f8 94       	cli
    2d86:	de bf       	out	0x3e, r29	; 62
    2d88:	0f be       	out	0x3f, r0	; 63
    2d8a:	cd bf       	out	0x3d, r28	; 61
    2d8c:	cf 91       	pop	r28
    2d8e:	df 91       	pop	r29
    2d90:	08 95       	ret

00002d92 <stringToInt>:

int stringToInt(const char* str){
    2d92:	df 93       	push	r29
    2d94:	cf 93       	push	r28
    2d96:	cd b7       	in	r28, 0x3d	; 61
    2d98:	de b7       	in	r29, 0x3e	; 62
    2d9a:	2a 97       	sbiw	r28, 0x0a	; 10
    2d9c:	0f b6       	in	r0, 0x3f	; 63
    2d9e:	f8 94       	cli
    2da0:	de bf       	out	0x3e, r29	; 62
    2da2:	0f be       	out	0x3f, r0	; 63
    2da4:	cd bf       	out	0x3d, r28	; 61
    2da6:	9a 87       	std	Y+10, r25	; 0x0a
    2da8:	89 87       	std	Y+9, r24	; 0x09
	int sign =1, result =0,i=0;
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	98 87       	std	Y+8, r25	; 0x08
    2db0:	8f 83       	std	Y+7, r24	; 0x07
    2db2:	1e 82       	std	Y+6, r1	; 0x06
    2db4:	1d 82       	std	Y+5, r1	; 0x05
    2db6:	1c 82       	std	Y+4, r1	; 0x04
    2db8:	1b 82       	std	Y+3, r1	; 0x03
	if (str[0]== '-'){
    2dba:	e9 85       	ldd	r30, Y+9	; 0x09
    2dbc:	fa 85       	ldd	r31, Y+10	; 0x0a
    2dbe:	80 81       	ld	r24, Z
    2dc0:	8d 32       	cpi	r24, 0x2D	; 45
    2dc2:	71 f5       	brne	.+92     	; 0x2e20 <stringToInt+0x8e>
		sign = -1;
    2dc4:	8f ef       	ldi	r24, 0xFF	; 255
    2dc6:	9f ef       	ldi	r25, 0xFF	; 255
    2dc8:	98 87       	std	Y+8, r25	; 0x08
    2dca:	8f 83       	std	Y+7, r24	; 0x07
		i++;
    2dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dce:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd0:	01 96       	adiw	r24, 0x01	; 1
    2dd2:	9c 83       	std	Y+4, r25	; 0x04
    2dd4:	8b 83       	std	Y+3, r24	; 0x03
    2dd6:	24 c0       	rjmp	.+72     	; 0x2e20 <stringToInt+0x8e>

	}
	while (str[i]!='\0'){
		int digit = str[i] - '0';
    2dd8:	2b 81       	ldd	r18, Y+3	; 0x03
    2dda:	3c 81       	ldd	r19, Y+4	; 0x04
    2ddc:	89 85       	ldd	r24, Y+9	; 0x09
    2dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    2de0:	fc 01       	movw	r30, r24
    2de2:	e2 0f       	add	r30, r18
    2de4:	f3 1f       	adc	r31, r19
    2de6:	80 81       	ld	r24, Z
    2de8:	88 2f       	mov	r24, r24
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	c0 97       	sbiw	r24, 0x30	; 48
    2dee:	9a 83       	std	Y+2, r25	; 0x02
    2df0:	89 83       	std	Y+1, r24	; 0x01
		result = result * 10 + digit;
    2df2:	8d 81       	ldd	r24, Y+5	; 0x05
    2df4:	9e 81       	ldd	r25, Y+6	; 0x06
    2df6:	9c 01       	movw	r18, r24
    2df8:	22 0f       	add	r18, r18
    2dfa:	33 1f       	adc	r19, r19
    2dfc:	c9 01       	movw	r24, r18
    2dfe:	88 0f       	add	r24, r24
    2e00:	99 1f       	adc	r25, r25
    2e02:	88 0f       	add	r24, r24
    2e04:	99 1f       	adc	r25, r25
    2e06:	28 0f       	add	r18, r24
    2e08:	39 1f       	adc	r19, r25
    2e0a:	89 81       	ldd	r24, Y+1	; 0x01
    2e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0e:	82 0f       	add	r24, r18
    2e10:	93 1f       	adc	r25, r19
    2e12:	9e 83       	std	Y+6, r25	; 0x06
    2e14:	8d 83       	std	Y+5, r24	; 0x05
		i++;
    2e16:	8b 81       	ldd	r24, Y+3	; 0x03
    2e18:	9c 81       	ldd	r25, Y+4	; 0x04
    2e1a:	01 96       	adiw	r24, 0x01	; 1
    2e1c:	9c 83       	std	Y+4, r25	; 0x04
    2e1e:	8b 83       	std	Y+3, r24	; 0x03
	if (str[0]== '-'){
		sign = -1;
		i++;

	}
	while (str[i]!='\0'){
    2e20:	2b 81       	ldd	r18, Y+3	; 0x03
    2e22:	3c 81       	ldd	r19, Y+4	; 0x04
    2e24:	89 85       	ldd	r24, Y+9	; 0x09
    2e26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e28:	fc 01       	movw	r30, r24
    2e2a:	e2 0f       	add	r30, r18
    2e2c:	f3 1f       	adc	r31, r19
    2e2e:	80 81       	ld	r24, Z
    2e30:	88 23       	and	r24, r24
    2e32:	91 f6       	brne	.-92     	; 0x2dd8 <stringToInt+0x46>
		int digit = str[i] - '0';
		result = result * 10 + digit;
		i++;
	}
	return sign * result;
    2e34:	2f 81       	ldd	r18, Y+7	; 0x07
    2e36:	38 85       	ldd	r19, Y+8	; 0x08
    2e38:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3c:	ac 01       	movw	r20, r24
    2e3e:	24 9f       	mul	r18, r20
    2e40:	c0 01       	movw	r24, r0
    2e42:	25 9f       	mul	r18, r21
    2e44:	90 0d       	add	r25, r0
    2e46:	34 9f       	mul	r19, r20
    2e48:	90 0d       	add	r25, r0
    2e4a:	11 24       	eor	r1, r1
}
    2e4c:	2a 96       	adiw	r28, 0x0a	; 10
    2e4e:	0f b6       	in	r0, 0x3f	; 63
    2e50:	f8 94       	cli
    2e52:	de bf       	out	0x3e, r29	; 62
    2e54:	0f be       	out	0x3f, r0	; 63
    2e56:	cd bf       	out	0x3d, r28	; 61
    2e58:	cf 91       	pop	r28
    2e5a:	df 91       	pop	r29
    2e5c:	08 95       	ret

00002e5e <IntToString>:
void IntToString (char* str, int number ){
    2e5e:	df 93       	push	r29
    2e60:	cf 93       	push	r28
    2e62:	cd b7       	in	r28, 0x3d	; 61
    2e64:	de b7       	in	r29, 0x3e	; 62
    2e66:	2b 97       	sbiw	r28, 0x0b	; 11
    2e68:	0f b6       	in	r0, 0x3f	; 63
    2e6a:	f8 94       	cli
    2e6c:	de bf       	out	0x3e, r29	; 62
    2e6e:	0f be       	out	0x3f, r0	; 63
    2e70:	cd bf       	out	0x3d, r28	; 61
    2e72:	99 87       	std	Y+9, r25	; 0x09
    2e74:	88 87       	std	Y+8, r24	; 0x08
    2e76:	7b 87       	std	Y+11, r23	; 0x0b
    2e78:	6a 87       	std	Y+10, r22	; 0x0a
	int i =0 , sign,j;
    2e7a:	1f 82       	std	Y+7, r1	; 0x07
    2e7c:	1e 82       	std	Y+6, r1	; 0x06
	char temp;
	if (number < 0){
    2e7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e80:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e82:	99 23       	and	r25, r25
    2e84:	64 f4       	brge	.+24     	; 0x2e9e <IntToString+0x40>
		sign =-1;
    2e86:	8f ef       	ldi	r24, 0xFF	; 255
    2e88:	9f ef       	ldi	r25, 0xFF	; 255
    2e8a:	9d 83       	std	Y+5, r25	; 0x05
    2e8c:	8c 83       	std	Y+4, r24	; 0x04
		number = -number;
    2e8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e90:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e92:	90 95       	com	r25
    2e94:	81 95       	neg	r24
    2e96:	9f 4f       	sbci	r25, 0xFF	; 255
    2e98:	9b 87       	std	Y+11, r25	; 0x0b
    2e9a:	8a 87       	std	Y+10, r24	; 0x0a
    2e9c:	04 c0       	rjmp	.+8      	; 0x2ea6 <IntToString+0x48>
	}
	else {
		sign =1;
    2e9e:	81 e0       	ldi	r24, 0x01	; 1
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	9d 83       	std	Y+5, r25	; 0x05
    2ea4:	8c 83       	std	Y+4, r24	; 0x04
	}
	do {
		str[i++]=number %10 +'0';
    2ea6:	2e 81       	ldd	r18, Y+6	; 0x06
    2ea8:	3f 81       	ldd	r19, Y+7	; 0x07
    2eaa:	88 85       	ldd	r24, Y+8	; 0x08
    2eac:	99 85       	ldd	r25, Y+9	; 0x09
    2eae:	fc 01       	movw	r30, r24
    2eb0:	e2 0f       	add	r30, r18
    2eb2:	f3 1f       	adc	r31, r19
    2eb4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2eb6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2eb8:	2a e0       	ldi	r18, 0x0A	; 10
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	b9 01       	movw	r22, r18
    2ebe:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__divmodhi4>
    2ec2:	80 5d       	subi	r24, 0xD0	; 208
    2ec4:	80 83       	st	Z, r24
    2ec6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ec8:	9f 81       	ldd	r25, Y+7	; 0x07
    2eca:	01 96       	adiw	r24, 0x01	; 1
    2ecc:	9f 83       	std	Y+7, r25	; 0x07
    2ece:	8e 83       	std	Y+6, r24	; 0x06
		number /= 10;
    2ed0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ed2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ed4:	2a e0       	ldi	r18, 0x0A	; 10
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	b9 01       	movw	r22, r18
    2eda:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__divmodhi4>
    2ede:	cb 01       	movw	r24, r22
    2ee0:	9b 87       	std	Y+11, r25	; 0x0b
    2ee2:	8a 87       	std	Y+10, r24	; 0x0a
	}while (number >0);
    2ee4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ee6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ee8:	18 16       	cp	r1, r24
    2eea:	19 06       	cpc	r1, r25
    2eec:	e4 f2       	brlt	.-72     	; 0x2ea6 <IntToString+0x48>

	if (sign == -1){
    2eee:	8c 81       	ldd	r24, Y+4	; 0x04
    2ef0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ef2:	2f ef       	ldi	r18, 0xFF	; 255
    2ef4:	8f 3f       	cpi	r24, 0xFF	; 255
    2ef6:	92 07       	cpc	r25, r18
    2ef8:	71 f4       	brne	.+28     	; 0x2f16 <IntToString+0xb8>
		str[i++] = '-';
    2efa:	2e 81       	ldd	r18, Y+6	; 0x06
    2efc:	3f 81       	ldd	r19, Y+7	; 0x07
    2efe:	88 85       	ldd	r24, Y+8	; 0x08
    2f00:	99 85       	ldd	r25, Y+9	; 0x09
    2f02:	fc 01       	movw	r30, r24
    2f04:	e2 0f       	add	r30, r18
    2f06:	f3 1f       	adc	r31, r19
    2f08:	8d e2       	ldi	r24, 0x2D	; 45
    2f0a:	80 83       	st	Z, r24
    2f0c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f0e:	9f 81       	ldd	r25, Y+7	; 0x07
    2f10:	01 96       	adiw	r24, 0x01	; 1
    2f12:	9f 83       	std	Y+7, r25	; 0x07
    2f14:	8e 83       	std	Y+6, r24	; 0x06

	}
	str[i] = '\0';
    2f16:	8e 81       	ldd	r24, Y+6	; 0x06
    2f18:	9f 81       	ldd	r25, Y+7	; 0x07
    2f1a:	28 85       	ldd	r18, Y+8	; 0x08
    2f1c:	39 85       	ldd	r19, Y+9	; 0x09
    2f1e:	f9 01       	movw	r30, r18
    2f20:	e8 0f       	add	r30, r24
    2f22:	f9 1f       	adc	r31, r25
    2f24:	10 82       	st	Z, r1
	for (j =0;j<i;j++){
    2f26:	1b 82       	std	Y+3, r1	; 0x03
    2f28:	1a 82       	std	Y+2, r1	; 0x02
    2f2a:	39 c0       	rjmp	.+114    	; 0x2f9e <IntToString+0x140>
		temp = str[j];
    2f2c:	2a 81       	ldd	r18, Y+2	; 0x02
    2f2e:	3b 81       	ldd	r19, Y+3	; 0x03
    2f30:	88 85       	ldd	r24, Y+8	; 0x08
    2f32:	99 85       	ldd	r25, Y+9	; 0x09
    2f34:	fc 01       	movw	r30, r24
    2f36:	e2 0f       	add	r30, r18
    2f38:	f3 1f       	adc	r31, r19
    2f3a:	80 81       	ld	r24, Z
    2f3c:	89 83       	std	Y+1, r24	; 0x01
		str[j] = str[i - j -1];
    2f3e:	2a 81       	ldd	r18, Y+2	; 0x02
    2f40:	3b 81       	ldd	r19, Y+3	; 0x03
    2f42:	88 85       	ldd	r24, Y+8	; 0x08
    2f44:	99 85       	ldd	r25, Y+9	; 0x09
    2f46:	dc 01       	movw	r26, r24
    2f48:	a2 0f       	add	r26, r18
    2f4a:	b3 1f       	adc	r27, r19
    2f4c:	2e 81       	ldd	r18, Y+6	; 0x06
    2f4e:	3f 81       	ldd	r19, Y+7	; 0x07
    2f50:	8a 81       	ldd	r24, Y+2	; 0x02
    2f52:	9b 81       	ldd	r25, Y+3	; 0x03
    2f54:	a9 01       	movw	r20, r18
    2f56:	48 1b       	sub	r20, r24
    2f58:	59 0b       	sbc	r21, r25
    2f5a:	ca 01       	movw	r24, r20
    2f5c:	9c 01       	movw	r18, r24
    2f5e:	21 50       	subi	r18, 0x01	; 1
    2f60:	30 40       	sbci	r19, 0x00	; 0
    2f62:	88 85       	ldd	r24, Y+8	; 0x08
    2f64:	99 85       	ldd	r25, Y+9	; 0x09
    2f66:	fc 01       	movw	r30, r24
    2f68:	e2 0f       	add	r30, r18
    2f6a:	f3 1f       	adc	r31, r19
    2f6c:	80 81       	ld	r24, Z
    2f6e:	8c 93       	st	X, r24
		str [ i - j -1] = temp;
    2f70:	2e 81       	ldd	r18, Y+6	; 0x06
    2f72:	3f 81       	ldd	r19, Y+7	; 0x07
    2f74:	8a 81       	ldd	r24, Y+2	; 0x02
    2f76:	9b 81       	ldd	r25, Y+3	; 0x03
    2f78:	a9 01       	movw	r20, r18
    2f7a:	48 1b       	sub	r20, r24
    2f7c:	59 0b       	sbc	r21, r25
    2f7e:	ca 01       	movw	r24, r20
    2f80:	9c 01       	movw	r18, r24
    2f82:	21 50       	subi	r18, 0x01	; 1
    2f84:	30 40       	sbci	r19, 0x00	; 0
    2f86:	88 85       	ldd	r24, Y+8	; 0x08
    2f88:	99 85       	ldd	r25, Y+9	; 0x09
    2f8a:	fc 01       	movw	r30, r24
    2f8c:	e2 0f       	add	r30, r18
    2f8e:	f3 1f       	adc	r31, r19
    2f90:	89 81       	ldd	r24, Y+1	; 0x01
    2f92:	80 83       	st	Z, r24
	if (sign == -1){
		str[i++] = '-';

	}
	str[i] = '\0';
	for (j =0;j<i;j++){
    2f94:	8a 81       	ldd	r24, Y+2	; 0x02
    2f96:	9b 81       	ldd	r25, Y+3	; 0x03
    2f98:	01 96       	adiw	r24, 0x01	; 1
    2f9a:	9b 83       	std	Y+3, r25	; 0x03
    2f9c:	8a 83       	std	Y+2, r24	; 0x02
    2f9e:	2a 81       	ldd	r18, Y+2	; 0x02
    2fa0:	3b 81       	ldd	r19, Y+3	; 0x03
    2fa2:	8e 81       	ldd	r24, Y+6	; 0x06
    2fa4:	9f 81       	ldd	r25, Y+7	; 0x07
    2fa6:	28 17       	cp	r18, r24
    2fa8:	39 07       	cpc	r19, r25
    2faa:	0c f4       	brge	.+2      	; 0x2fae <IntToString+0x150>
    2fac:	bf cf       	rjmp	.-130    	; 0x2f2c <IntToString+0xce>
		str [ i - j -1] = temp;



	}
}
    2fae:	2b 96       	adiw	r28, 0x0b	; 11
    2fb0:	0f b6       	in	r0, 0x3f	; 63
    2fb2:	f8 94       	cli
    2fb4:	de bf       	out	0x3e, r29	; 62
    2fb6:	0f be       	out	0x3f, r0	; 63
    2fb8:	cd bf       	out	0x3d, r28	; 61
    2fba:	cf 91       	pop	r28
    2fbc:	df 91       	pop	r29
    2fbe:	08 95       	ret

00002fc0 <__mulsi3>:
    2fc0:	62 9f       	mul	r22, r18
    2fc2:	d0 01       	movw	r26, r0
    2fc4:	73 9f       	mul	r23, r19
    2fc6:	f0 01       	movw	r30, r0
    2fc8:	82 9f       	mul	r24, r18
    2fca:	e0 0d       	add	r30, r0
    2fcc:	f1 1d       	adc	r31, r1
    2fce:	64 9f       	mul	r22, r20
    2fd0:	e0 0d       	add	r30, r0
    2fd2:	f1 1d       	adc	r31, r1
    2fd4:	92 9f       	mul	r25, r18
    2fd6:	f0 0d       	add	r31, r0
    2fd8:	83 9f       	mul	r24, r19
    2fda:	f0 0d       	add	r31, r0
    2fdc:	74 9f       	mul	r23, r20
    2fde:	f0 0d       	add	r31, r0
    2fe0:	65 9f       	mul	r22, r21
    2fe2:	f0 0d       	add	r31, r0
    2fe4:	99 27       	eor	r25, r25
    2fe6:	72 9f       	mul	r23, r18
    2fe8:	b0 0d       	add	r27, r0
    2fea:	e1 1d       	adc	r30, r1
    2fec:	f9 1f       	adc	r31, r25
    2fee:	63 9f       	mul	r22, r19
    2ff0:	b0 0d       	add	r27, r0
    2ff2:	e1 1d       	adc	r30, r1
    2ff4:	f9 1f       	adc	r31, r25
    2ff6:	bd 01       	movw	r22, r26
    2ff8:	cf 01       	movw	r24, r30
    2ffa:	11 24       	eor	r1, r1
    2ffc:	08 95       	ret

00002ffe <__divmodhi4>:
    2ffe:	97 fb       	bst	r25, 7
    3000:	09 2e       	mov	r0, r25
    3002:	07 26       	eor	r0, r23
    3004:	0a d0       	rcall	.+20     	; 0x301a <__divmodhi4_neg1>
    3006:	77 fd       	sbrc	r23, 7
    3008:	04 d0       	rcall	.+8      	; 0x3012 <__divmodhi4_neg2>
    300a:	49 d0       	rcall	.+146    	; 0x309e <__udivmodhi4>
    300c:	06 d0       	rcall	.+12     	; 0x301a <__divmodhi4_neg1>
    300e:	00 20       	and	r0, r0
    3010:	1a f4       	brpl	.+6      	; 0x3018 <__divmodhi4_exit>

00003012 <__divmodhi4_neg2>:
    3012:	70 95       	com	r23
    3014:	61 95       	neg	r22
    3016:	7f 4f       	sbci	r23, 0xFF	; 255

00003018 <__divmodhi4_exit>:
    3018:	08 95       	ret

0000301a <__divmodhi4_neg1>:
    301a:	f6 f7       	brtc	.-4      	; 0x3018 <__divmodhi4_exit>
    301c:	90 95       	com	r25
    301e:	81 95       	neg	r24
    3020:	9f 4f       	sbci	r25, 0xFF	; 255
    3022:	08 95       	ret

00003024 <__udivmodsi4>:
    3024:	a1 e2       	ldi	r26, 0x21	; 33
    3026:	1a 2e       	mov	r1, r26
    3028:	aa 1b       	sub	r26, r26
    302a:	bb 1b       	sub	r27, r27
    302c:	fd 01       	movw	r30, r26
    302e:	0d c0       	rjmp	.+26     	; 0x304a <__udivmodsi4_ep>

00003030 <__udivmodsi4_loop>:
    3030:	aa 1f       	adc	r26, r26
    3032:	bb 1f       	adc	r27, r27
    3034:	ee 1f       	adc	r30, r30
    3036:	ff 1f       	adc	r31, r31
    3038:	a2 17       	cp	r26, r18
    303a:	b3 07       	cpc	r27, r19
    303c:	e4 07       	cpc	r30, r20
    303e:	f5 07       	cpc	r31, r21
    3040:	20 f0       	brcs	.+8      	; 0x304a <__udivmodsi4_ep>
    3042:	a2 1b       	sub	r26, r18
    3044:	b3 0b       	sbc	r27, r19
    3046:	e4 0b       	sbc	r30, r20
    3048:	f5 0b       	sbc	r31, r21

0000304a <__udivmodsi4_ep>:
    304a:	66 1f       	adc	r22, r22
    304c:	77 1f       	adc	r23, r23
    304e:	88 1f       	adc	r24, r24
    3050:	99 1f       	adc	r25, r25
    3052:	1a 94       	dec	r1
    3054:	69 f7       	brne	.-38     	; 0x3030 <__udivmodsi4_loop>
    3056:	60 95       	com	r22
    3058:	70 95       	com	r23
    305a:	80 95       	com	r24
    305c:	90 95       	com	r25
    305e:	9b 01       	movw	r18, r22
    3060:	ac 01       	movw	r20, r24
    3062:	bd 01       	movw	r22, r26
    3064:	cf 01       	movw	r24, r30
    3066:	08 95       	ret

00003068 <__divmodsi4>:
    3068:	97 fb       	bst	r25, 7
    306a:	09 2e       	mov	r0, r25
    306c:	05 26       	eor	r0, r21
    306e:	0e d0       	rcall	.+28     	; 0x308c <__divmodsi4_neg1>
    3070:	57 fd       	sbrc	r21, 7
    3072:	04 d0       	rcall	.+8      	; 0x307c <__divmodsi4_neg2>
    3074:	d7 df       	rcall	.-82     	; 0x3024 <__udivmodsi4>
    3076:	0a d0       	rcall	.+20     	; 0x308c <__divmodsi4_neg1>
    3078:	00 1c       	adc	r0, r0
    307a:	38 f4       	brcc	.+14     	; 0x308a <__divmodsi4_exit>

0000307c <__divmodsi4_neg2>:
    307c:	50 95       	com	r21
    307e:	40 95       	com	r20
    3080:	30 95       	com	r19
    3082:	21 95       	neg	r18
    3084:	3f 4f       	sbci	r19, 0xFF	; 255
    3086:	4f 4f       	sbci	r20, 0xFF	; 255
    3088:	5f 4f       	sbci	r21, 0xFF	; 255

0000308a <__divmodsi4_exit>:
    308a:	08 95       	ret

0000308c <__divmodsi4_neg1>:
    308c:	f6 f7       	brtc	.-4      	; 0x308a <__divmodsi4_exit>
    308e:	90 95       	com	r25
    3090:	80 95       	com	r24
    3092:	70 95       	com	r23
    3094:	61 95       	neg	r22
    3096:	7f 4f       	sbci	r23, 0xFF	; 255
    3098:	8f 4f       	sbci	r24, 0xFF	; 255
    309a:	9f 4f       	sbci	r25, 0xFF	; 255
    309c:	08 95       	ret

0000309e <__udivmodhi4>:
    309e:	aa 1b       	sub	r26, r26
    30a0:	bb 1b       	sub	r27, r27
    30a2:	51 e1       	ldi	r21, 0x11	; 17
    30a4:	07 c0       	rjmp	.+14     	; 0x30b4 <__udivmodhi4_ep>

000030a6 <__udivmodhi4_loop>:
    30a6:	aa 1f       	adc	r26, r26
    30a8:	bb 1f       	adc	r27, r27
    30aa:	a6 17       	cp	r26, r22
    30ac:	b7 07       	cpc	r27, r23
    30ae:	10 f0       	brcs	.+4      	; 0x30b4 <__udivmodhi4_ep>
    30b0:	a6 1b       	sub	r26, r22
    30b2:	b7 0b       	sbc	r27, r23

000030b4 <__udivmodhi4_ep>:
    30b4:	88 1f       	adc	r24, r24
    30b6:	99 1f       	adc	r25, r25
    30b8:	5a 95       	dec	r21
    30ba:	a9 f7       	brne	.-22     	; 0x30a6 <__udivmodhi4_loop>
    30bc:	80 95       	com	r24
    30be:	90 95       	com	r25
    30c0:	bc 01       	movw	r22, r24
    30c2:	cd 01       	movw	r24, r26
    30c4:	08 95       	ret

000030c6 <__prologue_saves__>:
    30c6:	2f 92       	push	r2
    30c8:	3f 92       	push	r3
    30ca:	4f 92       	push	r4
    30cc:	5f 92       	push	r5
    30ce:	6f 92       	push	r6
    30d0:	7f 92       	push	r7
    30d2:	8f 92       	push	r8
    30d4:	9f 92       	push	r9
    30d6:	af 92       	push	r10
    30d8:	bf 92       	push	r11
    30da:	cf 92       	push	r12
    30dc:	df 92       	push	r13
    30de:	ef 92       	push	r14
    30e0:	ff 92       	push	r15
    30e2:	0f 93       	push	r16
    30e4:	1f 93       	push	r17
    30e6:	cf 93       	push	r28
    30e8:	df 93       	push	r29
    30ea:	cd b7       	in	r28, 0x3d	; 61
    30ec:	de b7       	in	r29, 0x3e	; 62
    30ee:	ca 1b       	sub	r28, r26
    30f0:	db 0b       	sbc	r29, r27
    30f2:	0f b6       	in	r0, 0x3f	; 63
    30f4:	f8 94       	cli
    30f6:	de bf       	out	0x3e, r29	; 62
    30f8:	0f be       	out	0x3f, r0	; 63
    30fa:	cd bf       	out	0x3d, r28	; 61
    30fc:	09 94       	ijmp

000030fe <__epilogue_restores__>:
    30fe:	2a 88       	ldd	r2, Y+18	; 0x12
    3100:	39 88       	ldd	r3, Y+17	; 0x11
    3102:	48 88       	ldd	r4, Y+16	; 0x10
    3104:	5f 84       	ldd	r5, Y+15	; 0x0f
    3106:	6e 84       	ldd	r6, Y+14	; 0x0e
    3108:	7d 84       	ldd	r7, Y+13	; 0x0d
    310a:	8c 84       	ldd	r8, Y+12	; 0x0c
    310c:	9b 84       	ldd	r9, Y+11	; 0x0b
    310e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3110:	b9 84       	ldd	r11, Y+9	; 0x09
    3112:	c8 84       	ldd	r12, Y+8	; 0x08
    3114:	df 80       	ldd	r13, Y+7	; 0x07
    3116:	ee 80       	ldd	r14, Y+6	; 0x06
    3118:	fd 80       	ldd	r15, Y+5	; 0x05
    311a:	0c 81       	ldd	r16, Y+4	; 0x04
    311c:	1b 81       	ldd	r17, Y+3	; 0x03
    311e:	aa 81       	ldd	r26, Y+2	; 0x02
    3120:	b9 81       	ldd	r27, Y+1	; 0x01
    3122:	ce 0f       	add	r28, r30
    3124:	d1 1d       	adc	r29, r1
    3126:	0f b6       	in	r0, 0x3f	; 63
    3128:	f8 94       	cli
    312a:	de bf       	out	0x3e, r29	; 62
    312c:	0f be       	out	0x3f, r0	; 63
    312e:	cd bf       	out	0x3d, r28	; 61
    3130:	ed 01       	movw	r28, r26
    3132:	08 95       	ret

00003134 <_exit>:
    3134:	f8 94       	cli

00003136 <__stop_program>:
    3136:	ff cf       	rjmp	.-2      	; 0x3136 <__stop_program>
